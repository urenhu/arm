L 1 "..\free_rtos\tasks.c"
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N/* Standard includes. */
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 192842 $
N * Checkin $Date: 2015-04-28 10:58:32 +0100 (Tue, 28 Apr 2015) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060002
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 77 "..\free_rtos\tasks.c" 2
N#include <stdlib.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060002
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 78 "..\free_rtos\tasks.c" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060002
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 79 "..\free_rtos\tasks.c" 2
N
N/* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
Nall the API functions to use the MPU wrappers.  That should only be done when
Ntask.h is included from an application file. */
N#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
N
N/* FreeRTOS includes. */
N#include "FreeRTOS.h"
L 1 "..\free_rtos\FreeRTOS.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef INC_FREERTOS_H
N#define INC_FREERTOS_H
N
N
N/*
N * Include the generic headers required for the FreeRTOS port being used.
N */
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 83 "..\free_rtos\FreeRTOS.h" 2
N
N/* Basic FreeRTOS definitions. */
N#include "projdefs.h"
L 1 "..\free_rtos\projdefs.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef PROJDEFS_H
N#define PROJDEFS_H
N
N/* Defines the prototype to which task functions must conform. */
Ntypedef void (*pdTASK_CODE)( void * );
N
N#define pdTRUE		( 1 )
N#define pdFALSE		( 0 )
N
N#define pdPASS									( 1 )
N#define pdFAIL									( 0 )
N#define errQUEUE_EMPTY							( 0 )
N#define errQUEUE_FULL							( 0 )
N
N/* Error definitions. */
N#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	( -1 )
N#define errNO_TASK_TO_RUN						( -2 )
N#define errQUEUE_BLOCKED						( -4 )
N#define errQUEUE_YIELD							( -5 )
N
N#endif /* PROJDEFS_H */
N
N
N
L 86 "..\free_rtos\FreeRTOS.h" 2
N
N/* Application specific configuration options. */
N#include "FreeRTOSConfig.h"
L 1 "..\free_rtos\FreeRTOSConfig.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef FREERTOS_CONFIG_H
N#define FREERTOS_CONFIG_H
N
N/*-----------------------------------------------------------
N * Application specific definitions.
N *
N * These definitions should be adjusted for your particular hardware and
N * application requirements.
N *
N * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
N * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
N *
N * See http://www.freertos.org/a00110.html.
N *----------------------------------------------------------*/
N
N#define configUSE_PREEMPTION		1
N#define configUSE_IDLE_HOOK			0
N#define configUSE_TICK_HOOK			0
N#define configCPU_CLOCK_HZ			( ( unsigned long ) 72000000 )	
N#define configTICK_RATE_HZ			( ( portTickType ) 1000 )
N#define configMAX_PRIORITIES		( ( unsigned portBASE_TYPE ) 5 )
N#define configMINIMAL_STACK_SIZE	( ( unsigned short ) 128 )
N#define configTOTAL_HEAP_SIZE		( ( size_t ) ( 17 * 1024 ) )
N#define configMAX_TASK_NAME_LEN		( 16 )
N#define configUSE_TRACE_FACILITY	0
N#define configUSE_16_BIT_TICKS		0
N#define configIDLE_SHOULD_YIELD		1
N
N/* Co-routine definitions. */
N#define configUSE_CO_ROUTINES 		0
N#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )
N
N/* Set the following definitions to 1 to include the API function, or zero
Nto exclude the API function. */
N
N#define INCLUDE_vTaskPrioritySet		1
N#define INCLUDE_uxTaskPriorityGet		1
N#define INCLUDE_vTaskDelete				1
N#define INCLUDE_vTaskCleanUpResources	0
N#define INCLUDE_vTaskSuspend			1
N#define INCLUDE_vTaskDelayUntil			1
N#define INCLUDE_vTaskDelay				1
N
N/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
N(lowest) to 0 (1?) (highest). */
N#define configKERNEL_INTERRUPT_PRIORITY 		255
N/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
NSee http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
N#define configMAX_SYSCALL_INTERRUPT_PRIORITY 	191 /* equivalent to 0xb0, or priority 11. */
N
N
N/* This is the value being used as per the ST library which permits 16
Npriority values, 0 to 15.  This must correspond to the
NconfigKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NNVIC value of 255. */
N#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY	15
N
N#endif /* FREERTOS_CONFIG_H */
N
L 89 "..\free_rtos\FreeRTOS.h" 2
N
N/* configUSE_PORT_OPTIMISED_TASK_SELECTION must be defined before portable.h
Nis included as it is used by the port layer. */
N#ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
N	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 0
N#endif
N
N/* Definitions specific to the port being used. */
N#include "portable.h"
L 1 "..\free_rtos\portable.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*-----------------------------------------------------------
N * Portable layer API.  Each function must be defined for each port.
N *----------------------------------------------------------*/
N
N#ifndef PORTABLE_H
N#define PORTABLE_H
N
N/* Include the macro file relevant to the port being used. */
N
N#ifdef OPEN_WATCOM_INDUSTRIAL_PC_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\pc\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef OPEN_WATCOM_FLASH_LITE_186_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\flsh186\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef GCC_MEGA_AVR
S	#include "../portable/GCC/ATMega323/portmacro.h"
N#endif
N
N#ifdef IAR_MEGA_AVR
S	#include "../portable/IAR/ATMega323/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC24_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_DSPIC_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC18F_PORT
S	#include "..\..\Source\portable\MPLAB\PIC18F\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC32MX_PORT
S	#include "..\..\Source\portable\MPLAB\PIC32MX\portmacro.h"
N#endif
N
N#ifdef _FEDPICC
S	#include "libFreeRTOS/Include/portmacro.h"
N#endif
N
N#ifdef SDCC_CYGNAL
S	#include "../../Source/portable/SDCC/Cygnal/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7
S	#include "../../Source/portable/GCC/ARM7_LPC2000/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7_ECLIPSE
S	#include "portmacro.h"
N#endif
N
N#ifdef ROWLEY_LPC23xx
S	#include "../../Source/portable/GCC/ARM7_LPC23xx/portmacro.h"
N#endif
N
N#ifdef IAR_MSP430
S	#include "..\..\Source\portable\IAR\MSP430\portmacro.h"	
N#endif
N	
N#ifdef GCC_MSP430
S	#include "../../Source/portable/GCC/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ROWLEY_MSP430
S	#include "../../Source/portable/Rowley/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ARM7_LPC21xx_KEIL_RVDS
S	#include "..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.h"
N#endif
N
N#ifdef SAM7_GCC
S	#include "../../Source/portable/GCC/ARM7_AT91SAM7S/portmacro.h"
N#endif
N
N#ifdef SAM7_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM7S64\portmacro.h"
N#endif
N
N#ifdef SAM9XE_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM9XE\portmacro.h"
N#endif
N
N#ifdef LPC2000_IAR
S	#include "..\..\Source\portable\IAR\LPC2000\portmacro.h"
N#endif
N
N#ifdef STR71X_IAR
S	#include "..\..\Source\portable\IAR\STR71x\portmacro.h"
N#endif
N
N#ifdef STR75X_IAR
S	#include "..\..\Source\portable\IAR\STR75x\portmacro.h"
N#endif
N	
N#ifdef STR75X_GCC
S	#include "..\..\Source\portable\GCC\STR75x\portmacro.h"
N#endif
N
N#ifdef STR91X_IAR
S	#include "..\..\Source\portable\IAR\STR91x\portmacro.h"
N#endif
N	
N#ifdef GCC_H8S
S	#include "../../Source/portable/GCC/H8S2329/portmacro.h"
N#endif
N
N#ifdef GCC_AT91FR40008
S	#include "../../Source/portable/GCC/ARM7_AT91FR40008/portmacro.h"
N#endif
N
N#ifdef RVDS_ARMCM3_LM3S102
S	#include "../../Source/portable/RVDS/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3_LM3S102
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARM_CM3
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARMCM3_LM
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N	
N#ifdef HCS12_CODE_WARRIOR
S	#include "../../Source/portable/CodeWarrior/HCS12/portmacro.h"
N#endif	
N
N#ifdef MICROBLAZE_GCC
S	#include "../../Source/portable/GCC/MicroBlaze/portmacro.h"
N#endif
N
N#ifdef TERN_EE
S	#include "..\..\Source\portable\Paradigm\Tern_EE\small\portmacro.h"
N#endif
N
N#ifdef GCC_HCS12
S	#include "../../Source/portable/GCC/HCS12/portmacro.h"
N#endif
N
N#ifdef GCC_MCF5235
S    #include "../../Source/portable/GCC/MCF5235/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_GCC
S	#include "../../../Source/portable/GCC/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_CODEWARRIOR
S	#include "../../Source/portable/CodeWarrior/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef GCC_PPC405
S	#include "../../Source/portable/GCC/PPC405_Xilinx/portmacro.h"
N#endif
N
N#ifdef GCC_PPC440
S	#include "../../Source/portable/GCC/PPC440_Xilinx/portmacro.h"
N#endif
N
N#ifdef _16FX_SOFTUNE
S	#include "..\..\Source\portable\Softune\MB96340\portmacro.h"
N#endif
N
N#ifdef BCC_INDUSTRIAL_PC_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\PC\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef BCC_FLASH_LITE_186_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\flsh186\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef __GNUC__
S   #ifdef __AVR32_AVR32A__
S	   #include "portmacro.h"
S   #endif
N#endif
N
N#ifdef __ICCAVR32__
S   #ifdef __CORE__
S      #if __CORE__ == __AVR32A__
S	      #include "portmacro.h"
S      #endif
S   #endif
N#endif
N
N#ifdef __91467D
S	#include "portmacro.h"
N#endif
N
N#ifdef __96340
S	#include "portmacro.h"
N#endif
N
N
N#ifdef __IAR_V850ES_Fx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3_L__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Hx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_78K0R_Kx3__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N#ifdef __IAR_78K0R_Kx3L__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N/* Catch all to ensure portmacro.h is included in the build.  Newer demos
Nhave the path as part of the project options, rather than as relative from
Nthe project location.  If portENTER_CRITICAL() has not been defined then
Nportmacro.h has not yet been included - as every portmacro.h provides a
NportENTER_CRITICAL() definition.  Check the demo application for your demo
Nto find the path to the correct portmacro.h file. */
N#ifndef portENTER_CRITICAL
N	#include "portmacro.h"	
L 1 "..\free_rtos\portmacro.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef PORTMACRO_H
N#define PORTMACRO_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * Port specific definitions.
N *
N * The settings in this file configure FreeRTOS correctly for the
N * given hardware and compiler.
N *
N * These settings should not be altered.
N *-----------------------------------------------------------
N */
N
N/* Type definitions. */
N#define portCHAR		     char
N#define portFLOAT		     float
N#define portDOUBLE		   double
N#define portLONG         long
N#define portSHORT	       short
N#define portSTACK_TYPE	 unsigned portLONG
N#define portBASE_TYPE	   long
N
N#if( configUSE_16_BIT_TICKS == 1 )
X#if( 0 == 1 )
S	typedef unsigned portSHORT                portTickType;
S	#define portMAX_DELAY ( portTickType )    0xffff
N#else
N	typedef unsigned portLONG                 portTickType;
X	typedef unsigned long                 portTickType;
N	#define portMAX_DELAY ( portTickType )    0xffffffff
N#endif
N/*-----------------------------------------------------------*/
N/* Architecture specifics. */
N#define portSTACK_GROWTH			  ( -1 )
N#define portTICK_RATE_MS			  ( ( portTickType ) 1000 / configTICK_RATE_HZ )
N#define portBYTE_ALIGNMENT			 8
N/*-----------------------------------------------------------*/
N/* Scheduler utilities. */
Nextern void                        vPortYield( void );
N#define portNVIC_INT_CTRL_REG		   ( * ( ( volatile unsigned long * ) 0xe000ed04 ) )
N#define portNVIC_PENDSVSET_BIT		 ( 1UL << 28UL )
N#define portYIELD()					        vPortYield()
N#define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
N/*-----------------------------------------------------------*/
N/* Critical section management. */
Nextern unsigned long   ulPortSetInterruptMask( void );
Nextern void            vPortClearInterruptMask( unsigned long ulNewMask );
Nextern void            vPortEnterCritical( void );
Nextern void            vPortExitCritical( void );
N
N#define portDISABLE_INTERRUPTS()				      ulPortSetInterruptMask()
N#define portENABLE_INTERRUPTS()					      vPortClearInterruptMask( 0 )
N#define portENTER_CRITICAL()					        vPortEnterCritical()
N#define portEXIT_CRITICAL()						        vPortExitCritical()
N#define portSET_INTERRUPT_MASK_FROM_ISR()		  ulPortSetInterruptMask()
N#define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
N/*-----------------------------------------------------------*/
N
N/* Tickless idle/low power functionality. */
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
N	extern void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime );
N	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdleTime )
N#endif
N/*-----------------------------------------------------------*/
N
N/* Port specific optimisations. */
N#if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
X#if 0 == 1
S	/* Check the configuration. */
S	#if( configMAX_PRIORITIES > 32 )
S		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is less than or equal to 32.  It is very rare that a system requires more than 10 to 15 difference priorities as tasks that share a priority will time slice.
S	#endif
S
S	/* Store/clear the ready priorities in a bit map. */
S	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )        ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
S	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )         ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
S	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )        uxTopPriority = ( 31 - __clz( ( uxReadyPriorities ) ) )
S
N#endif /* taskRECORD_READY_PRIORITY */
N/*-----------------------------------------------------------*/
N/* Task function macros as described on the FreeRTOS.org WEB site.  These are
N   not necessary for to use this port.  They are defined so the common demo files
N   (which build with all the ports) will build. */
N#define portTASK_FUNCTION_PROTO( vFunction, pvParameters )  void vFunction( void *pvParameters )
N#define portTASK_FUNCTION( vFunction, pvParameters )        void vFunction( void *pvParameters )
N
N/*-----------------------------------------------------------*/
N/* portNOP() is not required by this port. */
N#define portNOP()
N#ifdef __cplusplus
S}
N#endif
N#endif /* PORTMACRO_H */
N
L 329 "..\free_rtos\portable.h" 2
N#endif
N	
N#if portBYTE_ALIGNMENT == 8
X#if 8 == 8
N	#define portBYTE_ALIGNMENT_MASK ( 0x0007 )
N#endif
N
N#if portBYTE_ALIGNMENT == 4
X#if 8 == 4
S	#define portBYTE_ALIGNMENT_MASK	( 0x0003 )
N#endif
N
N#if portBYTE_ALIGNMENT == 2
X#if 8 == 2
S	#define portBYTE_ALIGNMENT_MASK	( 0x0001 )
N#endif
N
N#if portBYTE_ALIGNMENT == 1
X#if 8 == 1
S	#define portBYTE_ALIGNMENT_MASK	( 0x0000 )
N#endif
N
N#ifndef portBYTE_ALIGNMENT_MASK
S	#error "Invalid portBYTE_ALIGNMENT definition"
N#endif
N
N#ifndef portNUM_CONFIGURABLE_REGIONS
N	#define portNUM_CONFIGURABLE_REGIONS 1
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "mpu_wrappers.h"
L 1 "..\free_rtos\mpu_wrappers.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef MPU_WRAPPERS_H
N#define MPU_WRAPPERS_H
N
N/* This file redefines API functions to be called through a wrapper macro, but
Nonly for ports that are using the MPU. */
N#ifdef portUSING_MPU_WRAPPERS
S
S	/* MPU_WRAPPERS_INCLUDED_FROM_API_FILE will be defined when this file is
S	included from queue.c or task.c to prevent it from having an effect within
S	those files. */
S	#ifndef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
S
S		#define xTaskGenericCreate				MPU_xTaskGenericCreate
S		#define vTaskAllocateMPURegions			MPU_vTaskAllocateMPURegions
S		#define vTaskDelete						MPU_vTaskDelete
S		#define vTaskDelayUntil					MPU_vTaskDelayUntil
S		#define vTaskDelay						MPU_vTaskDelay
S		#define uxTaskPriorityGet				MPU_uxTaskPriorityGet
S		#define vTaskPrioritySet				MPU_vTaskPrioritySet
S		#define eTaskGetState					MPU_eTaskGetState
S		#define vTaskSuspend					MPU_vTaskSuspend
S		#define xTaskIsTaskSuspended			MPU_xTaskIsTaskSuspended
S		#define vTaskResume						MPU_vTaskResume
S		#define vTaskSuspendAll					MPU_vTaskSuspendAll
S		#define xTaskResumeAll					MPU_xTaskResumeAll
S		#define xTaskGetTickCount				MPU_xTaskGetTickCount
S		#define uxTaskGetNumberOfTasks			MPU_uxTaskGetNumberOfTasks
S		#define vTaskList						MPU_vTaskList
S		#define vTaskGetRunTimeStats			MPU_vTaskGetRunTimeStats
S		#define vTaskSetApplicationTaskTag		MPU_vTaskSetApplicationTaskTag
S		#define xTaskGetApplicationTaskTag		MPU_xTaskGetApplicationTaskTag
S		#define xTaskCallApplicationTaskHook	MPU_xTaskCallApplicationTaskHook
S		#define uxTaskGetStackHighWaterMark		MPU_uxTaskGetStackHighWaterMark
S		#define xTaskGetCurrentTaskHandle		MPU_xTaskGetCurrentTaskHandle
S		#define xTaskGetSchedulerState			MPU_xTaskGetSchedulerState
S		#define xTaskGetIdleTaskHandle			MPU_xTaskGetIdleTaskHandle
S
S		#define xQueueGenericCreate				MPU_xQueueGenericCreate
S		#define xQueueCreateMutex				MPU_xQueueCreateMutex
S		#define xQueueGiveMutexRecursive		MPU_xQueueGiveMutexRecursive
S		#define xQueueTakeMutexRecursive		MPU_xQueueTakeMutexRecursive
S		#define xQueueCreateCountingSemaphore	MPU_xQueueCreateCountingSemaphore
S		#define xQueueGenericSend				MPU_xQueueGenericSend
S		#define xQueueAltGenericSend			MPU_xQueueAltGenericSend
S		#define xQueueAltGenericReceive			MPU_xQueueAltGenericReceive
S		#define xQueueGenericReceive			MPU_xQueueGenericReceive
S		#define uxQueueMessagesWaiting			MPU_uxQueueMessagesWaiting
S		#define vQueueDelete					MPU_vQueueDelete
S		#define xQueueGenericReset				MPU_xQueueGenericReset
S		#define xQueueCreateSet					MPU_xQueueCreateSet
S		#define xQueueSelectFromSet				MPU_xQueueSelectFromSet
S		#define xQueueAddToSet					MPU_xQueueAddToSet
S		#define xQueueRemoveFromSet				MPU_xQueueRemoveFromSet
S
S		#define pvPortMalloc					MPU_pvPortMalloc
S		#define vPortFree						MPU_vPortFree
S		#define xPortGetFreeHeapSize			MPU_xPortGetFreeHeapSize
S		#define vPortInitialiseBlocks			MPU_vPortInitialiseBlocks
S
S		#if configQUEUE_REGISTRY_SIZE > 0
S			#define vQueueAddToRegistry				MPU_vQueueAddToRegistry
S			#define vQueueUnregisterQueue			MPU_vQueueUnregisterQueue
S		#endif
S
S		/* Remove the privileged function macro. */
S		#define PRIVILEGED_FUNCTION
S
S	#else /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
S		/* Ensure API functions go in the privileged execution section. */
S		#define PRIVILEGED_FUNCTION __attribute__((section("privileged_functions")))
S		#define PRIVILEGED_DATA __attribute__((section("privileged_data")))
S        //#define PRIVILEGED_DATA
S
S	#endif /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
N#else /* portUSING_MPU_WRAPPERS */
N
N	#define PRIVILEGED_FUNCTION
N	#define PRIVILEGED_DATA
N	#define portUSING_MPU_WRAPPERS 0
N
N#endif /* portUSING_MPU_WRAPPERS */
N
N
N#endif /* MPU_WRAPPERS_H */
N
L 360 "..\free_rtos\portable.h" 2
N
N/*
N * Setup the stack of a new task so it is ready to be placed under the
N * scheduler control.  The registers have to be placed on the stack in
N * the order that the port expects to find them.
N *
N */
N#if( portUSING_MPU_WRAPPERS == 1 )
X#if( 0 == 1 )
S	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters, portBASE_TYPE xRunPrivileged ) PRIVILEGED_FUNCTION;
N#else
N	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
X	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
N#endif
N
N/*
N * Map to the memory management routines required for the port.
N */
Nvoid *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION;
Xvoid *pvPortMalloc( size_t xSize ) ;
Nvoid vPortFree( void *pv ) PRIVILEGED_FUNCTION;
Xvoid vPortFree( void *pv ) ;
Nvoid vPortInitialiseBlocks( void ) PRIVILEGED_FUNCTION;
Xvoid vPortInitialiseBlocks( void ) ;
Nsize_t xPortGetFreeHeapSize( void ) PRIVILEGED_FUNCTION;
Xsize_t xPortGetFreeHeapSize( void ) ;
N
N/*
N * Setup the hardware ready for the scheduler to take control.  This generally
N * sets up a tick interrupt and sets timers for the correct tick frequency.
N */
NportBASE_TYPE xPortStartScheduler( void ) PRIVILEGED_FUNCTION;
Xlong xPortStartScheduler( void ) ;
N
N/*
N * Undo any hardware/ISR setup that was performed by xPortStartScheduler() so
N * the hardware is left in its original condition after the scheduler stops
N * executing.
N */
Nvoid vPortEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vPortEndScheduler( void ) ;
N
N/*
N * The structures and methods of manipulating the MPU are contained within the
N * port layer.
N *
N * Fills the xMPUSettings structure with the memory region information
N * contained in xRegions.
N */
N#if( portUSING_MPU_WRAPPERS == 1 ) 
X#if( 0 == 1 ) 
S	struct xMEMORY_REGION;
S	void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, portSTACK_TYPE *pxBottomOfStack, unsigned short usStackDepth ) PRIVILEGED_FUNCTION;
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* PORTABLE_H */
N
L 98 "..\free_rtos\FreeRTOS.h" 2
N
N
N/* Defines the prototype to which the application task hook function must
Nconform. */
Ntypedef portBASE_TYPE (*pdTASK_HOOK_CODE)( void * );
Xtypedef long (*pdTASK_HOOK_CODE)( void * );
N
N
N
N
N
N/*
N * Check all the required application specific macros have been defined.
N * These macros are application specific and (as downloaded) are defined
N * within FreeRTOSConfig.h.
N */
N
N#ifndef configUSE_PREEMPTION
S	#error Missing definition:  configUSE_PREEMPTION should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_IDLE_HOOK
S	#error Missing definition:  configUSE_IDLE_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_TICK_HOOK
S	#error Missing definition:  configUSE_TICK_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_CO_ROUTINES
S	#error  Missing definition:  configUSE_CO_ROUTINES should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskPrioritySet
S	#error Missing definition:  INCLUDE_vTaskPrioritySet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_uxTaskPriorityGet
S	#error Missing definition:  INCLUDE_uxTaskPriorityGet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelete
S	#error Missing definition:  INCLUDE_vTaskDelete		 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskSuspend
S	#error Missing definition:  INCLUDE_vTaskSuspend	 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelayUntil
S	#error Missing definition:  INCLUDE_vTaskDelayUntil should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelay
S	#error Missing definition:  INCLUDE_vTaskDelay should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_16_BIT_TICKS
S	#error Missing definition:  configUSE_16_BIT_TICKS should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_xTaskGetIdleTaskHandle
N	#define INCLUDE_xTaskGetIdleTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xTimerGetTimerDaemonTaskHandle
N	#define INCLUDE_xTimerGetTimerDaemonTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xQueueGetMutexHolder
N	#define INCLUDE_xQueueGetMutexHolder 0
N#endif
N
N#ifndef INCLUDE_xSemaphoreGetMutexHolder
N	#define INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetMutexHolder
N#endif
N
N#ifndef INCLUDE_pcTaskGetTaskName
N	#define INCLUDE_pcTaskGetTaskName 0
N#endif
N
N#ifndef configUSE_APPLICATION_TASK_TAG
N	#define configUSE_APPLICATION_TASK_TAG 0
N#endif
N
N#ifndef INCLUDE_uxTaskGetStackHighWaterMark
N	#define INCLUDE_uxTaskGetStackHighWaterMark 0
N#endif
N
N#ifndef INCLUDE_eTaskGetState
N	#define INCLUDE_eTaskGetState 0
N#endif
N
N#ifndef configUSE_RECURSIVE_MUTEXES
N	#define configUSE_RECURSIVE_MUTEXES 0
N#endif
N
N#ifndef configUSE_MUTEXES
N	#define configUSE_MUTEXES 0
N#endif
N
N#ifndef configUSE_TIMERS
N	#define configUSE_TIMERS 0
N#endif
N
N#ifndef configUSE_COUNTING_SEMAPHORES
N	#define configUSE_COUNTING_SEMAPHORES 0
N#endif
N
N#ifndef configUSE_ALTERNATIVE_API
N	#define configUSE_ALTERNATIVE_API 0
N#endif
N
N#ifndef portCRITICAL_NESTING_IN_TCB
N	#define portCRITICAL_NESTING_IN_TCB 0
N#endif
N
N#ifndef configMAX_TASK_NAME_LEN
S	#define configMAX_TASK_NAME_LEN 16
N#endif
N
N#ifndef configIDLE_SHOULD_YIELD
S	#define configIDLE_SHOULD_YIELD		1
N#endif
N
N#if configMAX_TASK_NAME_LEN < 1
X#if ( 16 ) < 1
S	#error configMAX_TASK_NAME_LEN must be set to a minimum of 1 in FreeRTOSConfig.h
N#endif
N
N#ifndef INCLUDE_xTaskResumeFromISR
N	#define INCLUDE_xTaskResumeFromISR 1
N#endif
N
N#ifndef configASSERT
N	#define configASSERT( x )
N#endif
N
N#ifndef portALIGNMENT_ASSERT_pxCurrentTCB
N	#define portALIGNMENT_ASSERT_pxCurrentTCB configASSERT
N#endif
N
N/* The timers module relies on xTaskGetSchedulerState(). */
N#if configUSE_TIMERS == 1
X#if 0 == 1
S
S	#ifndef configTIMER_TASK_PRIORITY
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_PRIORITY must also be defined.
S	#endif /* configTIMER_TASK_PRIORITY */
S
S	#ifndef configTIMER_QUEUE_LENGTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_QUEUE_LENGTH must also be defined.
S	#endif /* configTIMER_QUEUE_LENGTH */
S
S	#ifndef configTIMER_TASK_STACK_DEPTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_STACK_DEPTH must also be defined.
S	#endif /* configTIMER_TASK_STACK_DEPTH */
S
N#endif /* configUSE_TIMERS */
N
N#ifndef INCLUDE_xTaskGetSchedulerState
N	#define INCLUDE_xTaskGetSchedulerState 0
N#endif
N
N#ifndef INCLUDE_xTaskGetCurrentTaskHandle
N	#define INCLUDE_xTaskGetCurrentTaskHandle 0
N#endif
N
N
N#ifndef portSET_INTERRUPT_MASK_FROM_ISR
S	#define portSET_INTERRUPT_MASK_FROM_ISR() 0
N#endif
N
N#ifndef portCLEAR_INTERRUPT_MASK_FROM_ISR
S	#define portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedStatusValue ) ( void ) uxSavedStatusValue
N#endif
N
N#ifndef portCLEAN_UP_TCB
N	#define portCLEAN_UP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef portSETUP_TCB
N	#define portSETUP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef configQUEUE_REGISTRY_SIZE
N	#define configQUEUE_REGISTRY_SIZE 0U
N#endif
N
N#if ( configQUEUE_REGISTRY_SIZE < 1 )
X#if ( 0U < 1 )
N	#define vQueueAddToRegistry( xQueue, pcName )
N	#define vQueueUnregisterQueue( xQueue )
N#endif
N
N#ifndef portPOINTER_SIZE_TYPE
N	#define portPOINTER_SIZE_TYPE unsigned long
N#endif
N
N/* Remove any unused trace macros. */
N#ifndef traceSTART
N	/* Used to perform any necessary initialisation - for example, open a file
N	into which trace is to be written. */
N	#define traceSTART()
N#endif
N
N#ifndef traceEND
N	/* Use to close a trace, for example close a file into which trace has been
N	written. */
N	#define traceEND()
N#endif
N
N#ifndef traceTASK_SWITCHED_IN
N	/* Called after a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the selected task. */
N	#define traceTASK_SWITCHED_IN()
N#endif
N
N#ifndef traceTASK_SWITCHED_OUT
N	/* Called before a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the task being switched out. */
N	#define traceTASK_SWITCHED_OUT()
N#endif
N
N#ifndef traceTASK_PRIORITY_INHERIT
N	/* Called when a task attempts to take a mutex that is already held by a
N	lower priority task.  pxTCBOfMutexHolder is a pointer to the TCB of the task
N	that holds the mutex.  uxInheritedPriority is the priority the mutex holder
N	will inherit (the priority of the task that is attempting to obtain the
N	muted. */
N	#define traceTASK_PRIORITY_INHERIT( pxTCBOfMutexHolder, uxInheritedPriority )
N#endif
N
N#ifndef traceTASK_PRIORITY_DISINHERIT
N	/* Called when a task releases a mutex, the holding of which had resulted in
N	the task inheriting the priority of a higher priority task.
N	pxTCBOfMutexHolder is a pointer to the TCB of the task that is releasing the
N	mutex.  uxOriginalPriority is the task's configured (base) priority. */
N	#define traceTASK_PRIORITY_DISINHERIT( pxTCBOfMutexHolder, uxOriginalPriority )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_RECEIVE
N	/* Task is about to block because it cannot read from a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the read was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the read. */
N	#define traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_SEND
N	/* Task is about to block because it cannot write to a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the write was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the write. */
N	#define traceBLOCKING_ON_QUEUE_SEND( pxQueue )
N#endif
N
N#ifndef configCHECK_FOR_STACK_OVERFLOW
N	#define configCHECK_FOR_STACK_OVERFLOW 0
N#endif
N
N/* The following event macros are embedded in the kernel API calls. */
N
N#ifndef traceMOVED_TASK_TO_READY_STATE
N	#define traceMOVED_TASK_TO_READY_STATE( pxTCB )
N#endif
N
N#ifndef traceQUEUE_CREATE
N	#define traceQUEUE_CREATE( pxNewQueue )
N#endif
N
N#ifndef traceQUEUE_CREATE_FAILED
N	#define traceQUEUE_CREATE_FAILED( ucQueueType )
N#endif
N
N#ifndef traceCREATE_MUTEX
N	#define traceCREATE_MUTEX( pxNewQueue )
N#endif
N
N#ifndef traceCREATE_MUTEX_FAILED
N	#define traceCREATE_MUTEX_FAILED()
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE
N	#define traceGIVE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE_FAILED
N	#define traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE
N	#define traceTAKE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE_FAILED
N	#define traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE
N	#define traceCREATE_COUNTING_SEMAPHORE()
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE_FAILED
N	#define traceCREATE_COUNTING_SEMAPHORE_FAILED()
N#endif
N
N#ifndef traceQUEUE_SEND
N	#define traceQUEUE_SEND( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FAILED
N	#define traceQUEUE_SEND_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE
N	#define traceQUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK
N	#define traceQUEUE_PEEK( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FAILED
N	#define traceQUEUE_RECEIVE_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR
N	#define traceQUEUE_SEND_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR_FAILED
N	#define traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR
N	#define traceQUEUE_RECEIVE_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR_FAILED
N	#define traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_DELETE
N	#define traceQUEUE_DELETE( pxQueue )
N#endif
N
N#ifndef traceTASK_CREATE
N	#define traceTASK_CREATE( pxNewTCB )
N#endif
N
N#ifndef traceTASK_CREATE_FAILED
N	#define traceTASK_CREATE_FAILED()
N#endif
N
N#ifndef traceTASK_DELETE
N	#define traceTASK_DELETE( pxTaskToDelete )
N#endif
N
N#ifndef traceTASK_DELAY_UNTIL
N	#define traceTASK_DELAY_UNTIL()
N#endif
N
N#ifndef traceTASK_DELAY
N	#define traceTASK_DELAY()
N#endif
N
N#ifndef traceTASK_PRIORITY_SET
N	#define traceTASK_PRIORITY_SET( pxTask, uxNewPriority )
N#endif
N
N#ifndef traceTASK_SUSPEND
N	#define traceTASK_SUSPEND( pxTaskToSuspend )
N#endif
N
N#ifndef traceTASK_RESUME
N	#define traceTASK_RESUME( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_RESUME_FROM_ISR
N	#define traceTASK_RESUME_FROM_ISR( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_INCREMENT_TICK
N	#define traceTASK_INCREMENT_TICK( xTickCount )
N#endif
N
N#ifndef traceTIMER_CREATE
N	#define traceTIMER_CREATE( pxNewTimer )
N#endif
N
N#ifndef traceTIMER_CREATE_FAILED
N	#define traceTIMER_CREATE_FAILED()
N#endif
N
N#ifndef traceTIMER_COMMAND_SEND
N	#define traceTIMER_COMMAND_SEND( xTimer, xMessageID, xMessageValueValue, xReturn )
N#endif
N
N#ifndef traceTIMER_EXPIRED
N	#define traceTIMER_EXPIRED( pxTimer )
N#endif
N
N#ifndef traceTIMER_COMMAND_RECEIVED
N	#define traceTIMER_COMMAND_RECEIVED( pxTimer, xMessageID, xMessageValue )
N#endif
N
N#ifndef configGENERATE_RUN_TIME_STATS
N	#define configGENERATE_RUN_TIME_STATS 0
N#endif
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
S		#error If configGENERATE_RUN_TIME_STATS is defined then portCONFIGURE_TIMER_FOR_RUN_TIME_STATS must also be defined.  portCONFIGURE_TIMER_FOR_RUN_TIME_STATS should call a port layer function to setup a peripheral timer/counter that can then be used as the run time counter time base.
S	#endif /* portCONFIGURE_TIMER_FOR_RUN_TIME_STATS */
S
S	#ifndef portGET_RUN_TIME_COUNTER_VALUE
S		#ifndef portALT_GET_RUN_TIME_COUNTER_VALUE
S			#error If configGENERATE_RUN_TIME_STATS is defined then either portGET_RUN_TIME_COUNTER_VALUE or portALT_GET_RUN_TIME_COUNTER_VALUE must also be defined.  See the examples provided and the FreeRTOS web site for more information.
S		#endif /* portALT_GET_RUN_TIME_COUNTER_VALUE */
S	#endif /* portGET_RUN_TIME_COUNTER_VALUE */
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N
N#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
N	#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()
N#endif
N
N#ifndef configUSE_MALLOC_FAILED_HOOK
N	#define configUSE_MALLOC_FAILED_HOOK 0
N#endif
N
N#ifndef portPRIVILEGE_BIT
N	#define portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00 )
N#endif
N
N#ifndef portYIELD_WITHIN_API
N	#define portYIELD_WITHIN_API portYIELD
N#endif
N
N#ifndef pvPortMallocAligned
N	#define pvPortMallocAligned( x, puxStackBuffer ) ( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )
N#endif
N
N#ifndef vPortFreeAligned
N	#define vPortFreeAligned( pvBlockToFree ) vPortFree( pvBlockToFree )
N#endif
N
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
S	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )
N#endif
N
N#ifndef configEXPECTED_IDLE_TIME_BEFORE_SLEEP
N	#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2
N#endif
N
N#if configEXPECTED_IDLE_TIME_BEFORE_SLEEP < 2
X#if 2 < 2
S	#error configEXPECTED_IDLE_TIME_BEFORE_SLEEP must not be less than 2
N#endif
N
N#ifndef configUSE_TICKLESS_IDLE
N	#define configUSE_TICKLESS_IDLE 0
N#endif
N
N#ifndef configPRE_SLEEP_PROCESSING
N	#define configPRE_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configPOST_SLEEP_PROCESSING
N	#define configPOST_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configUSE_QUEUE_SETS
N	#define configUSE_QUEUE_SETS 0
N#endif
N
N/* For backward compatability. */
N#define eTaskStateGet eTaskGetState
N
N#endif /* INC_FREERTOS_H */
N
L 87 "..\free_rtos\tasks.c" 2
N#include "task.h"
L 1 "..\free_rtos\task.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef TASK_H
N#define TASK_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include task.h"
N#endif
N
N#include "portable.h"
N#include "list.h"
L 1 "..\free_rtos\list.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*
N * This is the list implementation used by the scheduler.  While it is tailored
N * heavily for the schedulers needs, it is also available for use by
N * application code.
N *
N * xLists can only store pointers to xListItems.  Each xListItem contains a
N * numeric value (xItemValue).  Most of the time the lists are sorted in
N * descending item value order.
N *
N * Lists are created already containing one list item.  The value of this
N * item is the maximum possible that can be stored, it is therefore always at
N * the end of the list and acts as a marker.  The list member pxHead always
N * points to this marker - even though it is at the tail of the list.  This
N * is because the tail contains a wrap back pointer to the true head of
N * the list.
N *
N * In addition to it's value, each list item contains a pointer to the next
N * item in the list (pxNext), a pointer to the list it is in (pxContainer)
N * and a pointer to back to the object that contains it.  These later two
N * pointers are included for efficiency of list manipulation.  There is
N * effectively a two way link between the object containing the list item and
N * the list item itself.
N *
N *
N * \page ListIntroduction List Implementation
N * \ingroup FreeRTOSIntro
N */
N
N
N#ifndef LIST_H
N#define LIST_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N/*
N * Definition of the only type of object that a list can contain.
N */
Nstruct xLIST_ITEM
N{
N	portTickType xItemValue;				/*< The value being listed.  In most cases this is used to sort the list in descending order. */
N	volatile struct xLIST_ITEM * pxNext;	/*< Pointer to the next xListItem in the list. */
N	volatile struct xLIST_ITEM * pxPrevious;/*< Pointer to the previous xListItem in the list. */
N	void * pvOwner;							/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */
N	void * pvContainer;						/*< Pointer to the list in which this list item is placed (if any). */
N};
Ntypedef struct xLIST_ITEM xListItem;		/* For some reason lint wants this as two separate definitions. */
N
Nstruct xMINI_LIST_ITEM
N{
N	portTickType xItemValue;
N	volatile struct xLIST_ITEM *pxNext;
N	volatile struct xLIST_ITEM *pxPrevious;
N};
Ntypedef struct xMINI_LIST_ITEM xMiniListItem;
N
N/*
N * Definition of the type of queue used by the scheduler.
N */
Ntypedef struct xLIST
N{
N	volatile unsigned portBASE_TYPE uxNumberOfItems;
X	volatile unsigned long uxNumberOfItems;
N	volatile xListItem * pxIndex;			/*< Used to walk through the list.  Points to the last item returned by a call to pvListGetOwnerOfNextEntry (). */
N	volatile xMiniListItem xListEnd;		/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */
N} xList;
N
N/*
N * Access macro to set the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )		( pxListItem )->pvOwner = ( void * ) ( pxOwner )
N
N/*
N * Access macro to get the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_OWNER( pxListItem )		( pxListItem )->pvOwner
N
N/*
N * Access macro to set the value of the list item.  In most cases the value is
N * used to sort the list in descending order.
N *
N * \page listSET_LIST_ITEM_VALUE listSET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )		( pxListItem )->xItemValue = ( xValue )
N
N/*
N * Access macro to retrieve the value of the list item.  The value can
N * represent anything - for example a the priority of a task, or the time at
N * which a task should be unblocked.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_VALUE( pxListItem )				( ( pxListItem )->xItemValue )
N
N/*
N * Access macro the retrieve the value of the list item at the head of a given
N * list.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )			( (&( ( pxList )->xListEnd ))->pxNext->xItemValue )
N
N/*
N * Access macro to determine if a list contains any items.  The macro will
N * only have the value true if the list is empty.
N *
N * \page listLIST_IS_EMPTY listLIST_IS_EMPTY
N * \ingroup LinkedList
N */
N#define listLIST_IS_EMPTY( pxList )				( ( pxList )->uxNumberOfItems == ( unsigned portBASE_TYPE ) 0 )
N
N/*
N * Access macro to return the number of items in the list.
N */
N#define listCURRENT_LIST_LENGTH( pxList )		( ( pxList )->uxNumberOfItems )
N
N/*
N * Access function to obtain the owner of the next entry in a list.
N *
N * The list member pxIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pxIndex to the next item in the list
N * and returns that entries pxOwner parameter.  Using multiple calls to this
N * function it is therefore possible to move through every item contained in
N * a list.
N *
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the next item owner is to be returned.
N *
N * \page listGET_OWNER_OF_NEXT_ENTRY listGET_OWNER_OF_NEXT_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									\
N{																						\
NxList * const pxConstList = ( pxList );													\
N	/* Increment the index to the next item and return the item, ensuring */			\
N	/* we don't return the marker used at the end of the list.  */						\
N	( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						\
N	if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )	\
N	{																					\
N		( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;					\
N	}																					\
N	( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										\
N}
X#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									{																						xList * const pxConstList = ( pxList );														 				 							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )		{																							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						}																						( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										}
N
N
N/*
N * Access function to obtain the owner of the first entry in a list.  Lists
N * are normally sorted in ascending item value order.
N *
N * This function returns the pxOwner member of the first item in the list.
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the owner of the head item is to be
N * returned.
N *
N * \page listGET_OWNER_OF_HEAD_ENTRY listGET_OWNER_OF_HEAD_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_HEAD_ENTRY( pxList )  ( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )
N
N/*
N * Check to see if a list item is within a list.  The list item maintains a
N * "container" pointer that points to the list it is in.  All this macro does
N * is check to see if the container and the list match.
N *
N * @param pxList The list we want to know if the list item is within.
N * @param pxListItem The list item we want to know if is in the list.
N * @return pdTRUE is the list item is in the list, otherwise pdFALSE.
N * pointer against
N */
N#define listIS_CONTAINED_WITHIN( pxList, pxListItem ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) )
N
N/*
N * Return the list a list item is contained within (referenced from).
N *
N * @param pxListItem The list item being queried.
N * @return A pointer to the xList object that references the pxListItem
N */
N#define listLIST_ITEM_CONTAINER( pxListItem ) ( ( pxListItem )->pvContainer )
N
N/*
N * This provides a crude means of knowing if a list has been initialised, as
N * pxList->xListEnd.xItemValue is set to portMAX_DELAY by the vListInitialise()
N * function.
N */
N#define listLIST_IS_INITIALISED( pxList ) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
N
N/*
N * Must be called before a list is used!  This initialises all the members
N * of the list structure and inserts the xListEnd item into the list as a
N * marker to the back of the list.
N *
N * @param pxList Pointer to the list being initialised.
N *
N * \page vListInitialise vListInitialise
N * \ingroup LinkedList
N */
Nvoid vListInitialise( xList *pxList );
N
N/*
N * Must be called before a list item is used.  This sets the list container to
N * null so the item does not think that it is already contained in a list.
N *
N * @param pxItem Pointer to the list item being initialised.
N *
N * \page vListInitialiseItem vListInitialiseItem
N * \ingroup LinkedList
N */
Nvoid vListInitialiseItem( xListItem *pxItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted into the list in
N * a position determined by its item value (descending item value order).
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The item to that is to be placed in the list.
N *
N * \page vListInsert vListInsert
N * \ingroup LinkedList
N */
Nvoid vListInsert( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted in a position
N * such that it will be the last item within the list returned by multiple
N * calls to listGET_OWNER_OF_NEXT_ENTRY.
N *
N * The list member pvIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pvIndex to the next item in the list.
N * Placing an item in a list using vListInsertEnd effectively places the item
N * in the list position pointed to by pvIndex.  This means that every other
N * item within the list will be returned by listGET_OWNER_OF_NEXT_ENTRY before
N * the pvIndex parameter again points to the item being inserted.
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The list item to be inserted into the list.
N *
N * \page vListInsertEnd vListInsertEnd
N * \ingroup LinkedList
N */
Nvoid vListInsertEnd( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Remove an item from a list.  The list item has a pointer to the list that
N * it is in, so only the list item need be passed into the function.
N *
N * @param uxListRemove The item to be removed.  The item will remove itself from
N * the list pointed to by it's pxContainer parameter.
N * 
N * @return The number of items that remain in the list after the list item has
N * been removed.
N *
N * \page uxListRemove uxListRemove
N * \ingroup LinkedList
N */
Nunsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove );
Xunsigned long uxListRemove( xListItem *pxItemToRemove );
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
L 85 "..\free_rtos\task.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N#define tskKERNEL_VERSION_NUMBER "V7.4.2"
N
N/**
N * task. h
N *
N * Type by which tasks are referenced.  For example, a call to xTaskCreate
N * returns (via a pointer parameter) an xTaskHandle variable that can then
N * be used as a parameter to vTaskDelete to delete the task.
N *
N * \page xTaskHandle xTaskHandle
N * \ingroup Tasks
N */
Ntypedef void * xTaskHandle;
N
N/*
N * Used internally only.
N */
Ntypedef struct xTIME_OUT
N{
N	portBASE_TYPE xOverflowCount;
X	long xOverflowCount;
N	portTickType  xTimeOnEntering;
N} xTimeOutType;
N
N/*
N * Defines the memory ranges allocated to the task when an MPU is used.
N */
Ntypedef struct xMEMORY_REGION
N{
N	void *pvBaseAddress;
N	unsigned long ulLengthInBytes;
N	unsigned long ulParameters;
N} xMemoryRegion;
N
N/*
N * Parameters required to create an MPU protected task.
N */
Ntypedef struct xTASK_PARAMTERS
N{
N	pdTASK_CODE pvTaskCode;
N	const signed char * const pcName;
N	unsigned short usStackDepth;
N	void *pvParameters;
N	unsigned portBASE_TYPE uxPriority;
X	unsigned long uxPriority;
N	portSTACK_TYPE *puxStackBuffer;
X	unsigned long *puxStackBuffer;
N	xMemoryRegion xRegions[ portNUM_CONFIGURABLE_REGIONS ];
X	xMemoryRegion xRegions[ 1 ];
N} xTaskParameters;
N
N/* Task states returned by eTaskGetState. */
Ntypedef enum
N{
N	eRunning = 0,	/* A task is querying the state of itself, so must be running. */
N	eReady,			/* The task being queried is in a read or pending ready list. */
N	eBlocked,		/* The task being queried is in the Blocked state. */
N	eSuspended,		/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */
N	eDeleted		/* The task being queried has been deleted, but its TCB has not yet been freed. */
N} eTaskState;
N
N/* Possible return values for eTaskConfirmSleepModeStatus(). */
Ntypedef enum
N{
N	eAbortSleep = 0,		/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */
N	eStandardSleep,			/* Enter a sleep mode that will not last any longer than the expected idle time. */
N	eNoTasksWaitingTimeout	/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */
N} eSleepModeStatus;
N
N
N/*
N * Defines the priority used by the idle task.  This must not be modified.
N *
N * \ingroup TaskUtils
N */
N#define tskIDLE_PRIORITY			( ( unsigned portBASE_TYPE ) 0U )
N
N/**
N * task. h
N *
N * Macro for forcing a context switch.
N *
N * \page taskYIELD taskYIELD
N * \ingroup SchedulerControl
N */
N#define taskYIELD()					portYIELD()
N
N/**
N * task. h
N *
N * Macro to mark the start of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskENTER_CRITICAL taskENTER_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskENTER_CRITICAL()		portENTER_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to mark the end of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskEXIT_CRITICAL taskEXIT_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskEXIT_CRITICAL()			portEXIT_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to disable all maskable interrupts.
N *
N * \page taskDISABLE_INTERRUPTS taskDISABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskDISABLE_INTERRUPTS()	portDISABLE_INTERRUPTS()
N
N/**
N * task. h
N *
N * Macro to enable microcontroller interrupts.
N *
N * \page taskENABLE_INTERRUPTS taskENABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskENABLE_INTERRUPTS()		portENABLE_INTERRUPTS()
N
N/* Definitions returned by xTaskGetSchedulerState(). */
N#define taskSCHEDULER_NOT_STARTED	0
N#define taskSCHEDULER_RUNNING		1
N#define taskSCHEDULER_SUSPENDED		2
N
N/*-----------------------------------------------------------
N * TASK CREATION API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreate(
N							  pdTASK_CODE pvTaskCode,
N							  const char * const pcName,
N							  unsigned short usStackDepth,
N							  void *pvParameters,
N							  unsigned portBASE_TYPE uxPriority,
N							  xTaskHandle *pvCreatedTask
N						  );</pre>
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N *
N * xTaskCreate() can only be used to create a task that has unrestricted
N * access to the entire microcontroller memory map.  Systems that include MPU
N * support can alternatively create an MPU constrained task using
N * xTaskCreateRestricted().
N *
N * @param pvTaskCode Pointer to the task entry function.  Tasks
N * must be implemented to never return (i.e. continuous loop).
N *
N * @param pcName A descriptive name for the task.  This is mainly used to
N * facilitate debugging.  Max length defined by tskMAX_TASK_NAME_LEN - default
N * is 16.
N *
N * @param usStackDepth The size of the task stack specified as the number of
N * variables the stack can hold - not the number of bytes.  For example, if
N * the stack is 16 bits wide and usStackDepth is defined as 100, 200 bytes
N * will be allocated for stack storage.
N *
N * @param pvParameters Pointer that will be used as the parameter for the task
N * being created.
N *
N * @param uxPriority The priority at which the task should run.  Systems that
N * include MPU support can optionally create tasks in a privileged (system)
N * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For
N * example, to create a privileged task at priority 2 the uxPriority parameter
N * should be set to ( 2 | portPRIVILEGE_BIT ).
N *
N * @param pvCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N // Task to be created.
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N	 }
N }
N
N // Function that creates a task.
N void vOtherFunction( void )
N {
N static unsigned char ucParameterToPass;
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass
N	 // must exist for the lifetime of the task, so in this case is declared static.  If it was just an
N	 // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time
N	 // the new task attempts to access it.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, &ucParameterToPass, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup xTaskCreate xTaskCreate
N * \ingroup Tasks
N */
N#define xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask ) xTaskGenericCreate( ( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvParameters ), ( uxPriority ), ( pxCreatedTask ), ( NULL ), ( NULL ) )
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreateRestricted( xTaskParameters *pxTaskDefinition, xTaskHandle *pxCreatedTask );</pre>
N *
N * xTaskCreateRestricted() should only be used in systems that include an MPU
N * implementation.
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N * The function parameters define the memory regions and associated access
N * permissions allocated to the task.
N *
N * @param pxTaskDefinition Pointer to a structure that contains a member
N * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API
N * documentation) plus an optional stack buffer and the memory region
N * definitions.
N *
N * @param pxCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N// Create an xTaskParameters structure that defines the task to be created.
Nstatic const xTaskParameters xCheckTaskParameters =
N{
N	vATask,		// pvTaskCode - the function that implements the task.
N	"ATask",	// pcName - just a text name for the task to assist debugging.
N	100,		// usStackDepth	- the stack size DEFINED IN WORDS.
N	NULL,		// pvParameters - passed into the task function as the function parameters.
N	( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.
N	cStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.
N
N	// xRegions - Allocate up to three separate memory regions for access by
N	// the task, with appropriate access permissions.  Different processors have
N	// different memory alignment requirements - refer to the FreeRTOS documentation
N	// for full information.
N	{
N		// Base address					Length	Parameters
N        { cReadWriteArray,				32,		portMPU_REGION_READ_WRITE },
N        { cReadOnlyArray,				32,		portMPU_REGION_READ_ONLY },
N        { cPrivilegedOnlyAccessArray,	128,	portMPU_REGION_PRIVILEGED_READ_WRITE }
N	}
N};
N
Nint main( void )
N{
NxTaskHandle xHandle;
N
N	// Create a task from the const structure defined above.  The task handle
N	// is requested (the second parameter is not NULL) but in this case just for
N	// demonstration purposes as its not actually used.
N	xTaskCreateRestricted( &xRegTest1Parameters, &xHandle );
N
N	// Start the scheduler.
N	vTaskStartScheduler();
N
N	// Will only get here if there was insufficient memory to create the idle
N	// task.
N	for( ;; );
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
N#define xTaskCreateRestricted( x, pxCreatedTask ) xTaskGenericCreate( ((x)->pvTaskCode), ((x)->pcName), ((x)->usStackDepth), ((x)->pvParameters), ((x)->uxPriority), (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xRegions) )
N
N/**
N * task. h
N *<pre>
N void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions );</pre>
N *
N * Memory regions are assigned to a restricted task when the task is created by
N * a call to xTaskCreateRestricted().  These regions can be redefined using
N * vTaskAllocateMPURegions().
N *
N * @param xTask The handle of the task being updated.
N *
N * @param xRegions A pointer to an xMemoryRegion structure that contains the
N * new memory region definitions.
N *
N * Example usage:
N   <pre>
N// Define an array of xMemoryRegion structures that configures an MPU region
N// allowing read/write access for 1024 bytes starting at the beginning of the
N// ucOneKByte array.  The other two of the maximum 3 definable regions are
N// unused so set to zero.
Nstatic const xMemoryRegion xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =
N{
N	// Base address		Length		Parameters
N	{ ucOneKByte,		1024,		portMPU_REGION_READ_WRITE },
N	{ 0,				0,			0 },
N	{ 0,				0,			0 }
N};
N
Nvoid vATask( void *pvParameters )
N{
N	// This task was created such that it has access to certain regions of
N	// memory as defined by the MPU configuration.  At some point it is
N	// desired that these MPU regions are replaced with that defined in the
N	// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()
N	// for this purpose.  NULL is used as the task handle to indicate that this
N	// function should modify the MPU regions of the calling task.
N	vTaskAllocateMPURegions( NULL, xAltRegions );
N
N	// Now the task can continue its function, but from this point on can only
N	// access its stack and the ucOneKByte array (unless any other statically
N	// defined or shared regions have been declared elsewhere).
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
Nvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) PRIVILEGED_FUNCTION;
Xvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelete( xTaskHandle xTask );</pre>
N *
N * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Remove a task from the RTOS real time kernels management.  The task being
N * deleted will be removed from all ready, blocked, suspended and event lists.
N *
N * NOTE:  The idle task is responsible for freeing the kernel allocated
N * memory from tasks that have been deleted.  It is therefore important that
N * the idle task is not starved of microcontroller processing time if your
N * application makes any calls to vTaskDelete ().  Memory allocated by the
N * task code is not automatically freed, and should be freed before the task
N * is deleted.
N *
N * See the demo application file death.c for sample code that utilises
N * vTaskDelete ().
N *
N * @param xTask The handle of the task to be deleted.  Passing NULL will
N * cause the calling task to be deleted.
N *
N * Example usage:
N   <pre>
N void vOtherFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup vTaskDelete vTaskDelete
N * \ingroup Tasks
N */
Nvoid vTaskDelete( xTaskHandle xTaskToDelete ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelete( xTaskHandle xTaskToDelete ) ;
N
N/*-----------------------------------------------------------
N * TASK CONTROL API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskDelay( portTickType xTicksToDelay );</pre>
N *
N * Delay a task for a given number of ticks.  The actual time that the
N * task remains blocked depends on the tick rate.  The constant
N * portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N *
N * vTaskDelay() specifies a time at which the task wishes to unblock relative to
N * the time at which vTaskDelay() is called.  For example, specifying a block
N * period of 100 ticks will cause the task to unblock 100 ticks after
N * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method
N * of controlling the frequency of a cyclical task as the path taken through the
N * code, as well as other task and interrupt activity, will effect the frequency
N * at which vTaskDelay() gets called and therefore the time at which the task
N * next executes.  See vTaskDelayUntil() for an alternative API function designed
N * to facilitate fixed frequency execution.  It does this by specifying an
N * absolute time (rather than a relative time) at which the calling task should
N * unblock.
N *
N * @param xTicksToDelay The amount of time, in tick periods, that
N * the calling task should block.
N *
N * Example usage:
N
N void vTaskFunction( void * pvParameters )
N {
N void vTaskFunction( void * pvParameters )
N {
N // Block for 500ms.
N const portTickType xDelay = 500 / portTICK_RATE_MS;
N
N	 for( ;; )
N	 {
N		 // Simply toggle the LED every 500ms, blocking between each toggle.
N		 vToggleLED();
N		 vTaskDelay( xDelay );
N	 }
N }
N
N * \defgroup vTaskDelay vTaskDelay
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelay( portTickType xTicksToDelay ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelay( portTickType xTicksToDelay ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelayUntil( portTickType *pxPreviousWakeTime, portTickType xTimeIncrement );</pre>
N *
N * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Delay a task until a specified time.  This function can be used by cyclical
N * tasks to ensure a constant execution frequency.
N *
N * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will
N * cause a task to block for the specified number of ticks from the time vTaskDelay () is
N * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed
N * execution frequency as the time between a task starting to execute and that task
N * calling vTaskDelay () may not be fixed [the task may take a different path though the
N * code between calls, or may get interrupted or preempted a different number of times
N * each time it executes].
N *
N * Whereas vTaskDelay () specifies a wake time relative to the time at which the function
N * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to
N * unblock.
N *
N * The constant portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the
N * task was last unblocked.  The variable must be initialised with the current time
N * prior to its first use (see the example below).  Following this the variable is
N * automatically updated within vTaskDelayUntil ().
N *
N * @param xTimeIncrement The cycle time period.  The task will be unblocked at
N * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the
N * same xTimeIncrement parameter value will cause the task to execute with
N * a fixed interface period.
N *
N * Example usage:
N   <pre>
N // Perform an action every 10 ticks.
N void vTaskFunction( void * pvParameters )
N {
N portTickType xLastWakeTime;
N const portTickType xFrequency = 10;
N
N	 // Initialise the xLastWakeTime variable with the current time.
N	 xLastWakeTime = xTaskGetTickCount ();
N	 for( ;; )
N	 {
N		 // Wait for the next cycle.
N		 vTaskDelayUntil( &xLastWakeTime, xFrequency );
N
N		 // Perform action here.
N	 }
N }
N   </pre>
N * \defgroup vTaskDelayUntil vTaskDelayUntil
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;
N
N/**
N * task. h
N * <pre>unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask );</pre>
N *
N * INCLUDE_xTaskPriorityGet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the priority of any task.
N *
N * @param xTask Handle of the task to be queried.  Passing a NULL
N * handle results in the priority of the calling task being returned.
N *
N * @return The priority of xTask.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to obtain the priority of the created task.
N	 // It was created with tskIDLE_PRIORITY, but may have changed
N	 // it itself.
N	 if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )
N	 {
N		 // The task has changed it's priority.
N	 }
N
N	 // ...
N
N	 // Is our priority higher than the created task?
N	 if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )
N	 {
N		 // Our priority (obtained using NULL handle) is higher.
N	 }
N }
N   </pre>
N * \defgroup uxTaskPriorityGet uxTaskPriorityGet
N * \ingroup TaskCtrl
N */
Nunsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskPriorityGet( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>eTaskState eTaskGetState( xTaskHandle xTask );</pre>
N *
N * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the state of any task.  States are encoded by the eTaskState
N * enumerated type.
N *
N * @param xTask Handle of the task to be queried.
N *
N * @return The state of xTask at the time the function was called.  Note the
N * state of the task might change between the function being called, and the
N * functions return value being tested by the calling task.
N */
NeTaskState eTaskGetState( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
XeTaskState eTaskGetState( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority );</pre>
N *
N * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Set the priority of any task.
N *
N * A context switch will occur before the function returns if the priority
N * being set is higher than the currently executing task.
N *
N * @param xTask Handle to the task for which the priority is being set.
N * Passing a NULL handle results in the priority of the calling task being set.
N *
N * @param uxNewPriority The priority to which the task will be set.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to raise the priority of the created task.
N	 vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );
N
N	 // ...
N
N	 // Use a NULL handle to raise our priority to the same value.
N	 vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );
N }
N   </pre>
N * \defgroup vTaskPrioritySet vTaskPrioritySet
N * \ingroup TaskCtrl
N */
Nvoid vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority ) PRIVILEGED_FUNCTION;
Xvoid vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspend( xTaskHandle xTaskToSuspend );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Suspend any task.  When suspended a task will never get any microcontroller
N * processing time, no matter what its priority.
N *
N * Calls to vTaskSuspend are not accumulative -
N * i.e. calling vTaskSuspend () twice on the same task still only requires one
N * call to vTaskResume () to ready the suspended task.
N *
N * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL
N * handle will cause the calling task to be suspended.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Suspend ourselves.
N	 vTaskSuspend( NULL );
N
N	 // We cannot get here unless another task calls vTaskResume
N	 // with our handle as the parameter.
N }
N   </pre>
N * \defgroup vTaskSuspend vTaskSuspend
N * \ingroup TaskCtrl
N */
Nvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) ;
N
N/**
N * task. h
N * <pre>void vTaskResume( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Resumes a suspended task.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * vTaskResume ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Resume the suspended task ourselves.
N	 vTaskResume( xHandle );
N
N	 // The created task will once again get microcontroller processing
N	 // time in accordance with it priority within the system.
N }
N   </pre>
N * \defgroup vTaskResume vTaskResume
N * \ingroup TaskCtrl
N */
Nvoid vTaskResume( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xvoid vTaskResume( xTaskHandle xTaskToResume ) ;
N
N/**
N * task. h
N * <pre>void xTaskResumeFromISR( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * An implementation of vTaskResume() that can be called from within an ISR.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * xTaskResumeFromISR ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * \defgroup vTaskResumeFromISR vTaskResumeFromISR
N * \ingroup TaskCtrl
N */
NportBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xlong xTaskResumeFromISR( xTaskHandle xTaskToResume ) ;
N
N/*-----------------------------------------------------------
N * SCHEDULER CONTROL
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskStartScheduler( void );</pre>
N *
N * Starts the real time kernel tick processing.  After calling the kernel
N * has control over which tasks are executed and when.  This function
N * does not return until an executing task calls vTaskEndScheduler ().
N *
N * At least one task should be created via a call to xTaskCreate ()
N * before calling vTaskStartScheduler ().  The idle task is created
N * automatically when the first application task is created.
N *
N * See the demo application file main.c for an example of creating
N * tasks and starting the kernel.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will not get here unless a task calls vTaskEndScheduler ()
N }
N   </pre>
N *
N * \defgroup vTaskStartScheduler vTaskStartScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskStartScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskEndScheduler( void );</pre>
N *
N * Stops the real time kernel tick.  All created tasks will be automatically
N * deleted and multitasking (either preemptive or cooperative) will
N * stop.  Execution then resumes from the point where vTaskStartScheduler ()
N * was called, as if vTaskStartScheduler () had just returned.
N *
N * See the demo application file main. c in the demo/PC directory for an
N * example that uses vTaskEndScheduler ().
N *
N * vTaskEndScheduler () requires an exit function to be defined within the
N * portable layer (see vPortEndScheduler () in port. c for the PC port).  This
N * performs hardware specific operations such as stopping the kernel tick.
N *
N * vTaskEndScheduler () will cause all of the resources allocated by the
N * kernel to be freed - but will not free resources allocated by application
N * tasks.
N *
N * Example usage:
N   <pre>
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // At some point we want to end the real time kernel processing
N		 // so call ...
N		 vTaskEndScheduler ();
N	 }
N }
N
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will only get here when the vTaskCode () task has called
N	 // vTaskEndScheduler ().  When we get here we are back to single task
N	 // execution.
N }
N   </pre>
N *
N * \defgroup vTaskEndScheduler vTaskEndScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskEndScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspendAll( void );</pre>
N *
N * Suspends all real time kernel activity while keeping interrupts (including the
N * kernel tick) enabled.
N *
N * After calling vTaskSuspendAll () the calling task will continue to execute
N * without risk of being swapped out until a call to xTaskResumeAll () has been
N * made.
N *
N * API functions that have the potential to cause a context switch (for example,
N * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler
N * is suspended.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the kernel
N		 // tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.
N		 xTaskResumeAll ();
N	 }
N }
N   </pre>
N * \defgroup vTaskSuspendAll vTaskSuspendAll
N * \ingroup SchedulerControl
N */
Nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspendAll( void ) ;
N
N/**
N * task. h
N * <pre>char xTaskResumeAll( void );</pre>
N *
N * Resumes real time kernel activity following a call to vTaskSuspendAll ().
N * After a call to vTaskSuspendAll () the kernel will take control of which
N * task is executing at any time.
N *
N * @return If resuming the scheduler caused a context switch then pdTRUE is
N *		  returned, otherwise pdFALSE is returned.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the real
N		 // time kernel tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.  We want to force
N		 // a context switch - but there is no point if resuming the scheduler
N		 // caused a context switch already.
N		 if( !xTaskResumeAll () )
N		 {
N			  taskYIELD ();
N		 }
N	 }
N }
N   </pre>
N * \defgroup xTaskResumeAll xTaskResumeAll
N * \ingroup SchedulerControl
N */
Nsigned portBASE_TYPE xTaskResumeAll( void ) PRIVILEGED_FUNCTION;
Xsigned long xTaskResumeAll( void ) ;
N
N/**
N * task. h
N * <pre>signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask );</pre>
N *
N * Utility task that simply returns pdTRUE if the task referenced by xTask is
N * currently in the Suspended state, or pdFALSE if the task referenced by xTask
N * is in any other state.
N *
N */
Nsigned portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xsigned long xTaskIsTaskSuspended( xTaskHandle xTask ) ;
N
N/*-----------------------------------------------------------
N * TASK UTILITIES
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCount( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCount( void ) ;
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCountFromISR( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * This is a version of xTaskGetTickCount() that is safe to be called from an
N * ISR - provided that portTickType is the natural word size of the
N * microcontroller being used or interrupt nesting is either not supported or
N * not being used.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCountFromISR( void ) ;
N
N/**
N * task. h
N * <PRE>unsigned short uxTaskGetNumberOfTasks( void );</PRE>
N *
N * @return The number of tasks that the real time kernel is currently managing.
N * This includes all ready, blocked and suspended tasks.  A task that
N * has been deleted but not yet freed by the idle task will also be
N * included in the count.
N *
N * \page uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks
N * \ingroup TaskUtils
N */
Nunsigned portBASE_TYPE uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetNumberOfTasks( void ) ;
N
N/**
N * task. h
N * <PRE>signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );</PRE>
N *
N * @return The text (human readable) name of the task referenced by the handle
N * xTaskToQueury.  A task can query its own name by either passing in its own
N * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be
N * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.
N *
N * \page pcTaskGetTaskName pcTaskGetTaskName
N * \ingroup TaskUtils
N */
Nsigned char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
N
N/**
N * task. h
N * <PRE>void vTaskList( char *pcWriteBuffer );</PRE>
N *
N * configUSE_TRACE_FACILITY must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Lists all the current tasks, along with their current state and stack
N * usage high water mark.
N *
N * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or
N * suspended ('S').
N *
N * @param pcWriteBuffer A buffer into which the above mentioned details
N * will be written, in ascii form.  This buffer is assumed to be large
N * enough to contain the generated report.  Approximately 40 bytes per
N * task should be sufficient.
N *
N * \page vTaskList vTaskList
N * \ingroup TaskUtils
N */
Nvoid vTaskList( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskList( signed char *pcWriteBuffer ) ;
N
N/**
N * task. h
N * <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>
N *
N * configGENERATE_RUN_TIME_STATS must be defined as 1 for this function
N * to be available.  The application must also then provide definitions
N * for portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and
N * portGET_RUN_TIME_COUNTER_VALUE to configure a peripheral timer/counter
N * and return the timers current count value respectively.  The counter
N * should be at least 10 times the frequency of the tick count.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total
N * accumulated execution time being stored for each task.  The resolution
N * of the accumulated time value depends on the frequency of the timer
N * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.
N * Calling vTaskGetRunTimeStats() writes the total execution time of each
N * task into a buffer, both as an absolute count value and as a percentage
N * of the total system execution time.
N *
N * @param pcWriteBuffer A buffer into which the execution times will be
N * written, in ascii form.  This buffer is assumed to be large enough to
N * contain the generated report.  Approximately 40 bytes per task should
N * be sufficient.
N *
N * \page vTaskGetRunTimeStats vTaskGetRunTimeStats
N * \ingroup TaskUtils
N */
Nvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;
N
N/**
N * task.h
N * <PRE>unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask );</PRE>
N *
N * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for
N * this function to be available.
N *
N * Returns the high water mark of the stack associated with xTask.  That is,
N * the minimum free stack space there has been (in words, so on a 32 bit machine
N * a value of 1 means 4 bytes) since the task started.  The smaller the returned
N * number the closer the task has come to overflowing its stack.
N *
N * @param xTask Handle of the task associated with the stack to be checked.
N * Set xTask to NULL to check the stack of the calling task.
N *
N * @return The smallest amount of free stack space there has been (in bytes)
N * since the task referenced by xTask was created.
N */
Nunsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;
N
N/* When using trace macros it is sometimes necessary to include tasks.h before
NFreeRTOS.h.  When this is done pdTASK_HOOK_CODE will not yet have been defined,
Nso the following two prototypes will cause a compilation error.  This can be
Nfixed by simply guarding against the inclusion of these two prototypes unless
Nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration
Nconstant. */
N#ifdef configUSE_APPLICATION_TASK_TAG
N	#if configUSE_APPLICATION_TASK_TAG == 1
X	#if 0 == 1
S		/**
S		 * task.h
S		 * <pre>void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
S		 *
S		 * Sets pxHookFunction to be the task hook function used by the task xTask.
S		 * Passing xTask as NULL has the effect of setting the calling tasks hook
S		 * function.
S		 */
S		void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction ) PRIVILEGED_FUNCTION;
S
S		/**
S		 * task.h
S		 * <pre>void xTaskGetApplicationTaskTag( xTaskHandle xTask );</pre>
S		 *
S		 * Returns the pxHookFunction value assigned to the task xTask.
S		 */
S		pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
N	#endif /* configUSE_APPLICATION_TASK_TAG ==1 */
N#endif /* ifdef configUSE_APPLICATION_TASK_TAG */
N
N/**
N * task.h
N * <pre>portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
N *
N * Calls the hook function associated with xTask.  Passing xTask as NULL has
N * the effect of calling the Running tasks (the calling task) hook function.
N *
N * pvParameter is passed to the hook function for the task to interpret as it
N * wants.
N */
NportBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) PRIVILEGED_FUNCTION;
Xlong xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;
N
N/**
N * xTaskGetIdleTaskHandle() is only available if
N * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the idle task.  It is not valid to call
N * xTaskGetIdleTaskHandle() before the scheduler has been started.
N */
NxTaskHandle xTaskGetIdleTaskHandle( void );
N
N/*-----------------------------------------------------------
N * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
N *----------------------------------------------------------*/
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Called from the real time kernel tick (either preemptive or cooperative),
N * this increments the tick count and checks if any tasks that are blocked
N * for a finite period required removing from a blocked list and placing on
N * a ready list.
N */
Nvoid vTaskIncrementTick( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskIncrementTick( void ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes the calling task from the ready list and places it both
N * on the list of tasks waiting for a particular event, and the
N * list of delayed tasks.  The task will be removed from both lists
N * and replaced on the ready list should either the event occur (and
N * there be no higher priority tasks waiting on the same event) or
N * the delay period expires.
N *
N * @param pxEventList The list containing tasks that are blocked waiting
N * for the event to occur.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait
N * for the event to occur.  This is specified in kernel ticks,the constant
N * portTICK_RATE_MS can be used to convert kernel ticks into a real time
N * period.
N */
Nvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * This function performs nearly the same function as vTaskPlaceOnEventList().
N * The difference being that this function does not permit tasks to block
N * indefinitely, whereas vTaskPlaceOnEventList() does.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes a task from both the specified event list and the list of blocked
N * tasks, and places it on a ready queue.
N *
N * xTaskRemoveFromEventList () will be called if either an event occurs to
N * unblock a task, or the block timeout period expires.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nsigned portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList ) PRIVILEGED_FUNCTION;
Xsigned long xTaskRemoveFromEventList( const xList * const pxEventList ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Sets the pointer to the current TCB to the TCB of the highest priority task
N * that is ready to run.
N */
Nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSwitchContext( void ) ;
N
N/*
N * Return the handle of the calling task.
N */
NxTaskHandle xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;
XxTaskHandle xTaskGetCurrentTaskHandle( void ) ;
N
N/*
N * Capture the current time status for future reference.
N */
Nvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) PRIVILEGED_FUNCTION;
Xvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;
N
N/*
N * Compare the time status now with that previously captured to see if the
N * timeout has expired.
N */
NportBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) PRIVILEGED_FUNCTION;
Xlong xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;
N
N/*
N * Shortcut used by the queue implementation to prevent unnecessary call to
N * taskYIELD();
N */
Nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskMissedYield( void ) ;
N
N/*
N * Returns the scheduler state as taskSCHEDULER_RUNNING,
N * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.
N */
NportBASE_TYPE xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;
Xlong xTaskGetSchedulerState( void ) ;
N
N/*
N * Raises the priority of the mutex holder to that of the calling task should
N * the mutex holder have a priority less than the calling task.
N */
Nvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Set the priority of a task back to its proper priority in the case that it
N * inherited a higher priority while it was holding a semaphore.
N */
Nvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Generic version of the task creation function which is in turn called by the
N * xTaskCreate() and xTaskCreateRestricted() macros.
N */
Nsigned portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions ) PRIVILEGED_FUNCTION;
Xsigned long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;
N
N/*
N * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.
N */
Nunsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask );
Xunsigned long uxTaskGetTaskNumber( xTaskHandle xTask );
N
N/*
N * Set the uxTCBNumber of the task referenced by the xTask parameter to
N * ucHandle.
N */
Nvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle );
Xvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );
N
N/*
N * If tickless mode is being used, or a low power mode is implemented, then
N * the tick interrupt will not execute during idle periods.  When this is the
N * case, the tick count value maintained by the scheduler needs to be kept up
N * to date with the actual execution time by being skipped forward by the by
N * a time equal to the idle period.
N */
Nvoid vTaskStepTick( portTickType xTicksToJump );
N
N/*
N * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port
N * specific sleep function to determine if it is ok to proceed with the sleep,
N * and if it is ok to proceed, if it is ok to sleep indefinitely.
N *
N * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only
N * called with the scheduler suspended, not from within a critical section.  It
N * is therefore possible for an interrupt to request a context switch between
N * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being
N * entered.  eTaskConfirmSleepModeStatus() should be called from a short
N * critical section between the timer being stopped and the sleep mode being
N * entered to ensure it is ok to proceed into the sleep mode.
N */
NeSleepModeStatus eTaskConfirmSleepModeStatus( void );
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TASK_H */
N
N
N
L 88 "..\free_rtos\tasks.c" 2
N#include "timers.h"
L 1 "..\free_rtos\timers.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef TIMERS_H
N#define TIMERS_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include timers.h"
N#endif
N
N#include "portable.h"
N#include "list.h"
N#include "task.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* IDs for commands that can be sent/received on the timer queue.  These are to
Nbe used solely through the macros that make up the public software timer API,
Nas defined below. */
N#define tmrCOMMAND_START					0
N#define tmrCOMMAND_STOP						1
N#define tmrCOMMAND_CHANGE_PERIOD			2
N#define tmrCOMMAND_DELETE					3
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N /**
N * Type by which software timers are referenced.  For example, a call to
N * xTimerCreate() returns an xTimerHandle variable that can then be used to
N * reference the subject timer in calls to other software timer API functions
N * (for example, xTimerStart(), xTimerReset(), etc.).
N */
Ntypedef void * xTimerHandle;
N
N/* Define the prototype to which timer callback functions must conform. */
Ntypedef void (*tmrTIMER_CALLBACK)( xTimerHandle xTimer );
N
N/**
N * xTimerHandle xTimerCreate( 	const signed char *pcTimerName,
N * 								portTickType xTimerPeriodInTicks,
N * 								unsigned portBASE_TYPE uxAutoReload,
N * 								void * pvTimerID,
N * 								tmrTIMER_CALLBACK pxCallbackFunction );
N *
N * Creates a new software timer instance.  This allocates the storage required
N * by the new timer, initialises the new timers internal state, and returns a
N * handle by which the new timer can be referenced.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the
N * active state.
N *
N * @param pcTimerName A text name that is assigned to the timer.  This is done
N * purely to assist debugging.  The kernel itself only ever references a timer by
N * its handle, and never by its name.
N *
N * @param xTimerPeriodInTicks The timer period.  The time is defined in tick periods so
N * the constant portTICK_RATE_MS can be used to convert a time that has been
N * specified in milliseconds.  For example, if the timer must expire after 100
N * ticks, then xTimerPeriodInTicks should be set to 100.  Alternatively, if the timer
N * must expire after 500ms, then xPeriod can be set to ( 500 / portTICK_RATE_MS )
N * provided configTICK_RATE_HZ is less than or equal to 1000.
N *
N * @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will
N * expire repeatedly with a frequency set by the xTimerPeriodInTicks parameter.  If
N * uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and
N * enter the dormant state after it expires.
N *
N * @param pvTimerID An identifier that is assigned to the timer being created.
N * Typically this would be used in the timer callback function to identify which
N * timer expired when the same callback function is assigned to more than one
N * timer.
N *
N * @param pxCallbackFunction The function to call when the timer expires.
N * Callback functions must have the prototype defined by tmrTIMER_CALLBACK,
N * which is	"void vCallbackFunction( xTimerHandle xTimer );".
N *
N * @return If the timer is successfully create then a handle to the newly
N * created timer is returned.  If the timer cannot be created (because either
N * there is insufficient FreeRTOS heap remaining to allocate the timer
N * structures, or the timer period was set to 0) then 0 is returned.
N *
N * Example usage:
N *
N * #define NUM_TIMERS 5
N *
N * // An array to hold handles to the created timers.
N * xTimerHandle xTimers[ NUM_TIMERS ];
N *
N * // An array to hold a count of the number of times each timer expires.
N * long lExpireCounters[ NUM_TIMERS ] = { 0 };
N *
N * // Define a callback function that will be used by multiple timer instances.
N * // The callback function does nothing but count the number of times the
N * // associated timer expires, and stop the timer once the timer has expired
N * // 10 times.
N * void vTimerCallback( xTimerHandle pxTimer )
N * {
N * long lArrayIndex;
N * const long xMaxExpiryCountBeforeStopping = 10;
N *
N * 	   // Optionally do something if the pxTimer parameter is NULL.
N * 	   configASSERT( pxTimer );
N * 	
N *     // Which timer expired?
N *     lArrayIndex = ( long ) pvTimerGetTimerID( pxTimer );
N *
N *     // Increment the number of times that pxTimer has expired.
N *     lExpireCounters[ lArrayIndex ] += 1;
N *
N *     // If the timer has expired 10 times then stop it from running.
N *     if( lExpireCounters[ lArrayIndex ] == xMaxExpiryCountBeforeStopping )
N *     {
N *         // Do not use a block time if calling a timer API function from a
N *         // timer callback function, as doing so could cause a deadlock!
N *         xTimerStop( pxTimer, 0 );
N *     }
N * }
N *
N * void main( void )
N * {
N * long x;
N *
N *     // Create then start some timers.  Starting the timers before the scheduler
N *     // has been started means the timers will start running immediately that
N *     // the scheduler starts.
N *     for( x = 0; x < NUM_TIMERS; x++ )
N *     {
N *         xTimers[ x ] = xTimerCreate(     "Timer",         // Just a text name, not used by the kernel.
N *                                         ( 100 * x ),     // The timer period in ticks.
N *                                         pdTRUE,         // The timers will auto-reload themselves when they expire.
N *                                         ( void * ) x,     // Assign each timer a unique id equal to its array index.
N *                                         vTimerCallback     // Each timer calls the same callback when it expires.
N *                                     );
N *
N *         if( xTimers[ x ] == NULL )
N *         {
N *             // The timer was not created.
N *         }
N *         else
N *         {
N *             // Start the timer.  No block time is specified, and even if one was
N *             // it would be ignored because the scheduler has not yet been
N *             // started.
N *             if( xTimerStart( xTimers[ x ], 0 ) != pdPASS )
N *             {
N *                 // The timer could not be set into the Active state.
N *             }
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timers running as they have already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N */
NxTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ) PRIVILEGED_FUNCTION;
XxTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks, unsigned long uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ) ;
N
N/**
N * void *pvTimerGetTimerID( xTimerHandle xTimer );
N *
N * Returns the ID assigned to the timer.
N *
N * IDs are assigned to timers using the pvTimerID parameter of the call to
N * xTimerCreated() that was used to create the timer.
N *
N * If the same callback function is assigned to multiple timers then the timer
N * ID can be used within the callback function to identify which timer actually
N * expired.
N *
N * @param xTimer The timer being queried.
N *
N * @return The ID assigned to the timer being queried.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N */
Nvoid *pvTimerGetTimerID( xTimerHandle xTimer ) PRIVILEGED_FUNCTION;
Xvoid *pvTimerGetTimerID( xTimerHandle xTimer ) ;
N
N/**
N * portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer );
N *
N * Queries a timer to see if it is active or dormant.
N *
N * A timer will be dormant if:
N *     1) It has been created but not started, or
N *     2) It is an expired on-shot timer that has not been restarted.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the
N * active state.
N *
N * @param xTimer The timer being queried.
N *
N * @return pdFALSE will be returned if the timer is dormant.  A value other than
N * pdFALSE will be returned if the timer is active.
N *
N * Example usage:
N *
N * // This function assumes xTimer has already been created.
N * void vAFunction( xTimerHandle xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is active, do something.
N *     }
N *     else
N *     {
N *         // xTimer is not active, do something else.
N *     }
N * }
N */
NportBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer ) PRIVILEGED_FUNCTION;
Xlong xTimerIsTimerActive( xTimerHandle xTimer ) ;
N
N/**
N * xTimerGetTimerDaemonTaskHandle() is only available if 
N * INCLUDE_xTimerGetTimerDaemonTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the timer service/daemon task.  It it not valid
N * to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started.
N */
NxTaskHandle xTimerGetTimerDaemonTaskHandle( void );
N
N/**
N * portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStart() starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerStart() has equivalent functionality
N * to the xTimerReset() API function.
N *
N * Starting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerStart() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerStart() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerStart() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStart()
N * to be available.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the start command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStart() was called.  xBlockTime is ignored if xTimerStart() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStart( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStop() stops a timer that was previously started using either of the
N * The xTimerStart(), xTimerReset(), xTimerStartFromISR(), xTimerResetFromISR(),
N * xTimerChangePeriod() or xTimerChangePeriodFromISR() API functions.
N *
N * Stopping a timer ensures the timer is not in the active state.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStop()
N * to be available.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the stop command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStop() was called.  xBlockTime is ignored if xTimerStop() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStop( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerChangePeriod( 	xTimerHandle xTimer,
N *										portTickType xNewPeriod,
N *										portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerChangePeriod() changes the period of a timer that was previously
N * created using the xTimerCreate() API function.
N *
N * xTimerChangePeriod() can be called to change the period of an active or
N * dormant state timer.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerChangePeriod() to be available.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_RATE_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the change period command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerChangePeriod() was called.  xBlockTime is ignored if
N * xTimerChangePeriod() is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the change period command could not be
N * sent to the timer command queue even after xBlockTime ticks had passed.
N * pdPASS will be returned if the command was successfully sent to the timer
N * command queue.  When the command is actually processed will depend on the
N * priority of the timer service/daemon task relative to other tasks in the
N * system.  The timer service/daemon task priority is set by the
N * configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This function assumes xTimer has already been created.  If the timer
N * // referenced by xTimer is already active when it is called, then the timer
N * // is deleted.  If the timer referenced by xTimer is not active when it is
N * // called, then the period of the timer is set to 500ms and the timer is
N * // started.
N * void vAFunction( xTimerHandle xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is already active - delete it.
N *         xTimerDelete( xTimer );
N *     }
N *     else
N *     {
N *         // xTimer is not active, change its period to 500ms.  This will also
N *         // cause the timer to start.  Block for a maximum of 100 ticks if the
N *         // change period command cannot immediately be sent to the timer
N *         // command queue.
N *         if( xTimerChangePeriod( xTimer, 500 / portTICK_RATE_MS, 100 ) == pdPASS )
N *         {
N *             // The command was successfully sent.
N *         }
N *         else
N *         {
N *             // The command could not be sent, even after waiting for 100 ticks
N *             // to pass.  Take appropriate action here.
N *         }
N *     }
N * }
N */
N #define xTimerChangePeriod( xTimer, xNewPeriod, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerDelete() deletes a timer that was previously created using the
N * xTimerCreate() API function.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerDelete() to be available.
N *
N * @param xTimer The handle of the timer being deleted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the delete command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerDelete() was called.  xBlockTime is ignored if xTimerDelete()
N * is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the delete command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerChangePeriod() API function example usage scenario.
N */
N#define xTimerDelete( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerReset() re-starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerReset() will cause the timer to
N * re-evaluate its expiry time so that it is relative to when xTimerReset() was
N * called.  If the timer was in the dormant state then xTimerReset() has
N * equivalent functionality to the xTimerStart() API function.
N *
N * Resetting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerReset() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerReset() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerReset() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset()
N * to be available.
N *
N * @param xTimer The handle of the timer being reset/started/restarted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the reset command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerReset() was called.  xBlockTime is ignored if xTimerReset() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * // When a key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer.
N *
N * xTimerHandle xBacklightTimer = NULL;
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press event handler.
N * void vKeyPressEventHandler( char cKey )
N * {
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  Wait 10 ticks for the command to be successfully sent
N *     // if it cannot be sent immediately.
N *     vSetBacklightState( BACKLIGHT_ON );
N *     if( xTimerReset( xBacklightTimer, 100 ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N * }
N *
N * void main( void )
N * {
N * long x;
N *
N *     // Create then start the one-shot timer that is responsible for turning
N *     // the back-light off if no keys are pressed within a 5 second period.
N *     xBacklightTimer = xTimerCreate( "BacklightTimer",           // Just a text name, not used by the kernel.
N *                                     ( 5000 / portTICK_RATE_MS), // The timer period in ticks.
N *                                     pdFALSE,                    // The timer is a one-shot timer.
N *                                     0,                          // The id is not used by the callback so can take any value.
N *                                     vBacklightTimerCallback     // The callback function that switches the LCD back-light off.
N *                                   );
N *
N *     if( xBacklightTimer == NULL )
N *     {
N *         // The timer was not created.
N *     }
N *     else
N *     {
N *         // Start the timer.  No block time is specified, and even if one was
N *         // it would be ignored because the scheduler has not yet been
N *         // started.
N *         if( xTimerStart( xBacklightTimer, 0 ) != pdPASS )
N *         {
N *             // The timer could not be set into the Active state.
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timer running as it has already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N */
N#define xTimerReset( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerStartFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStart() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStartFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStartFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStartFromISR() function.  If
N * xTimerStartFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerStartFromISR() is actually called.  The timer service/daemon
N * task priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then restart the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerStartFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The start command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerStartFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerStopFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStop() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStopFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStopFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStopFromISR() function.  If
N * xTimerStopFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the timer should be simply stopped.
N *
N * // The interrupt service routine that stops the timer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - simply stop the timer.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerStopFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The stop command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerStopFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0, ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer,
N *											portTickType xNewPeriod,
N *											portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerChangePeriod() that can be called from an interrupt
N * service routine.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_RATE_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerChangePeriodFromISR() writes a message to the
N * timer command queue, so has the potential to transition the timer service/
N * daemon task out of the Blocked state.  If calling xTimerChangePeriodFromISR()
N * causes the timer service/daemon task to leave the Blocked state, and the
N * timer service/daemon task has a priority equal to or greater than the
N * currently executing task (the task that was interrupted), then
N * *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the
N * xTimerChangePeriodFromISR() function.  If xTimerChangePeriodFromISR() sets
N * this value to pdTRUE then a context switch should be performed before the
N * interrupt exits.
N *
N * @return pdFAIL will be returned if the command to change the timers period
N * could not be sent to the timer command queue.  pdPASS will be returned if the
N * command was successfully sent to the timer command queue.  When the command
N * is actually processed will depend on the priority of the timer service/daemon
N * task relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the period of xTimer should be changed to 500ms.
N *
N * // The interrupt service routine that changes the period of xTimer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - change the period of xTimer to 500ms.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerChangePeriodFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The command to change the timers period was not executed
N *         // successfully.  Take appropriate action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerChangePeriodFromISR( xTimer, xNewPeriod, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerResetFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerReset() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer that is to be started, reset, or
N * restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerResetFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerResetFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerResetFromISR() function.  If
N * xTimerResetFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerResetFromISR() is actually called.  The timer service/daemon
N * task priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerResetFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerResetFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/*
N * Functions beyond this part are not part of the public API and are intended
N * for use by the kernel only.
N */
NportBASE_TYPE xTimerCreateTimerTask( void ) PRIVILEGED_FUNCTION;
Xlong xTimerCreateTimerTask( void ) ;
NportBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime ) PRIVILEGED_FUNCTION;
Xlong xTimerGenericCommand( xTimerHandle xTimer, long xCommandID, portTickType xOptionalValue, signed long *pxHigherPriorityTaskWoken, portTickType xBlockTime ) ;
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TIMERS_H */
N
N
N
L 89 "..\free_rtos\tasks.c" 2
N#include "StackMacros.h"
L 1 "..\free_rtos\StackMacros.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef STACK_MACROS_H
N#define STACK_MACROS_H
N
N/*
N * Call the stack overflow hook function if the stack of the task being swapped
N * out is currently overflowed, or looks like it might have overflowed in the
N * past.
N *
N * Setting configCHECK_FOR_STACK_OVERFLOW to 1 will cause the macro to check
N * the current stack state only - comparing the current top of stack value to
N * the stack limit.  Setting configCHECK_FOR_STACK_OVERFLOW to greater than 1
N * will also cause the last few stack bytes to be checked to ensure the value
N * to which the bytes were set when the task was created have not been
N * overwritten.  Note this second test does not guarantee that an overflowed
N * stack will always be recognised.
N */
N
N/*-----------------------------------------------------------*/
N
N#if( configCHECK_FOR_STACK_OVERFLOW == 0 )
X#if( 0 == 0 )
N
N	/* FreeRTOSConfig.h is not set to check for stack overflows. */
N	#define taskFIRST_CHECK_FOR_STACK_OVERFLOW()
N	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()
N
N#endif /* configCHECK_FOR_STACK_OVERFLOW == 0 */
N/*-----------------------------------------------------------*/
N
N#if( configCHECK_FOR_STACK_OVERFLOW == 1 )
X#if( 0 == 1 )
S
S	/* FreeRTOSConfig.h is only set to use the first method of
S	overflow checking. */
S	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()
S
N#endif
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 0 ) && ( portSTACK_GROWTH < 0 ) )
X#if( ( 0 > 0 ) && ( ( -1 ) < 0 ) )
S
S	/* Only the current stack state is to be checked. */
S	#define taskFIRST_CHECK_FOR_STACK_OVERFLOW()														\
S	{																									\
S		/* Is the currently saved stack pointer within the stack limit? */								\
S		if( pxCurrentTCB->pxTopOfStack <= pxCurrentTCB->pxStack )										\
S		{																								\
S			vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
S		}																								\
S	}
X	#define taskFIRST_CHECK_FOR_STACK_OVERFLOW()															{																											 										if( pxCurrentTCB->pxTopOfStack <= pxCurrentTCB->pxStack )												{																											vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );			}																									}
S
N#endif /* configCHECK_FOR_STACK_OVERFLOW > 0 */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 0 ) && ( portSTACK_GROWTH > 0 ) )
X#if( ( 0 > 0 ) && ( ( -1 ) > 0 ) )
S
S	/* Only the current stack state is to be checked. */
S	#define taskFIRST_CHECK_FOR_STACK_OVERFLOW()														\
S	{																									\
S																										\
S		/* Is the currently saved stack pointer within the stack limit? */								\
S		if( pxCurrentTCB->pxTopOfStack >= pxCurrentTCB->pxEndOfStack )									\
S		{																								\
S			vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
S		}																								\
S	}
X	#define taskFIRST_CHECK_FOR_STACK_OVERFLOW()															{																																																					 										if( pxCurrentTCB->pxTopOfStack >= pxCurrentTCB->pxEndOfStack )											{																											vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );			}																									}
S
N#endif /* configCHECK_FOR_STACK_OVERFLOW == 1 */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) && ( portSTACK_GROWTH < 0 ) )
X#if( ( 0 > 1 ) && ( ( -1 ) < 0 ) )
S
S	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()																								\
S	{																																			\
S	static const unsigned char ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };	\
S																																				\
S																																				\
S		/* Has the extremity of the task stack ever been written over? */																		\
S		if( memcmp( ( void * ) pxCurrentTCB->pxStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )					\
S		{																																		\
S			vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );											\
S		}																																		\
S	}
X	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()																									{																																				static const unsigned char ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };																																																																											 																				if( memcmp( ( void * ) pxCurrentTCB->pxStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )							{																																					vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );													}																																			}
S
N#endif /* #if( configCHECK_FOR_STACK_OVERFLOW > 1 ) */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) && ( portSTACK_GROWTH > 0 ) )
X#if( ( 0 > 1 ) && ( ( -1 ) > 0 ) )
S
S	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()																								\
S	{																																			\
S	char *pcEndOfStack = ( char * ) pxCurrentTCB->pxEndOfStack;																					\
S	static const unsigned char ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };	\
S																																				\
S																																				\
S		pcEndOfStack -= sizeof( ucExpectedStackBytes );																							\
S																																				\
S		/* Has the extremity of the task stack ever been written over? */																		\
S		if( memcmp( ( void * ) pcEndOfStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )							\
S		{																																		\
S			vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );											\
S		}																																		\
S	}
X	#define taskSECOND_CHECK_FOR_STACK_OVERFLOW()																									{																																				char *pcEndOfStack = ( char * ) pxCurrentTCB->pxEndOfStack;																						static const unsigned char ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,																	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };																																																																											pcEndOfStack -= sizeof( ucExpectedStackBytes );																																																													 																				if( memcmp( ( void * ) pcEndOfStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )									{																																					vApplicationStackOverflowHook( ( xTaskHandle ) pxCurrentTCB, pxCurrentTCB->pcTaskName );													}																																			}
S
N#endif /* #if( configCHECK_FOR_STACK_OVERFLOW > 1 ) */
N/*-----------------------------------------------------------*/
N
N#endif /* STACK_MACROS_H */
N
L 90 "..\free_rtos\tasks.c" 2
N
N#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
N
N/* Sanity check the configuration. */
N#if configUSE_TICKLESS_IDLE != 0
X#if 0 != 0
S	#if INCLUDE_vTaskSuspend != 1
S		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
S	#endif /* INCLUDE_vTaskSuspend */
N#endif /* configUSE_TICKLESS_IDLE */
N
N/*
N * Defines the size, in words, of the stack allocated to the idle task.
N */
N#define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
N
N/*
N * Task control block.  A task control block (TCB) is allocated for each task,
N * and stores task state information, including a pointer to the task's context
N * (the task's run time environment, including register values)
N */
Ntypedef struct tskTaskControlBlock
N{
N	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB STRUCT. */
X	volatile unsigned long	*pxTopOfStack;		 
N
N	#if ( portUSING_MPU_WRAPPERS == 1 )
X	#if ( 0 == 1 )
S		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB STRUCT. */
N	#endif
N
N	xListItem				xGenericListItem;		/*< The list that the state list item of a task is reference from denotes the state of that task (Ready, Blocked, Suspended ). */
N	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
N	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
X	unsigned long	uxPriority;			 
N	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
X	unsigned long			*pxStack;			 
N	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.  Facilitates debugging only. */
X	signed char				pcTaskName[ ( 16 ) ]; 
N
N	#if ( portSTACK_GROWTH > 0 )
X	#if ( ( -1 ) > 0 )
S		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the stack grows up from low memory. */
N	#endif
N
N	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X	#if ( 0 == 1 )
S		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports that do not maintain their own count in the port layer. */
N	#endif
N
N	#if ( configUSE_TRACE_FACILITY == 1 )
X	#if ( 0 == 1 )
S		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task has been deleted and then recreated. */
S		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party trace code. */
N	#endif
N
N	#if ( configUSE_MUTEXES == 1 )
X	#if ( 0 == 1 )
S		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the priority inheritance mechanism. */
N	#endif
N
N	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X	#if ( 0 == 1 )
S		pdTASK_HOOK_CODE pxTaskTag;
N	#endif
N
N	#if ( configGENERATE_RUN_TIME_STATS == 1 )
X	#if ( 0 == 1 )
S		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running state. */
N	#endif
N
N} tskTCB;
N
N
N/*
N * Some kernel aware debuggers require the data the debugger needs access to to
N * be global, rather than file scope.
N */
N#ifdef portREMOVE_STATIC_QUALIFIER
S	#define static
N#endif
N
N/*lint -e956 */
NPRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
X tskTCB * volatile pxCurrentTCB = 0;
N
N/* Lists for ready and blocked tasks. --------------------*/
NPRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks. */
X static xList pxReadyTasksLists[ ( ( unsigned long ) 5 ) ];	 
NPRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
X static xList xDelayedTaskList1;							 
NPRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. */
X static xList xDelayedTaskList2;							 
NPRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list currently being used. */
X static xList * volatile pxDelayedTaskList ;				 
NPRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
X static xList * volatile pxOverflowDelayedTaskList;		 
NPRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready queue when the scheduler is resumed. */
X static xList xPendingReadyList;							 
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but the their memory not yet freed. */
X	 static xList xTasksWaitingTermination;				 
N	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0U;
X	 static volatile unsigned long uxTasksDeleted = ( unsigned long ) 0U;
N
N#endif
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
X	 static xList xSuspendedTaskList;					 
N
N#endif
N
N#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X#if ( 0 == 1 )
S
S	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task.  The idle task is created automatically when the scheduler is started. */
S
N#endif
N
N/* File private variables. --------------------------------*/
NPRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBASE_TYPE ) 0U;
X static volatile unsigned long uxCurrentNumberOfTasks 	= ( unsigned long ) 0U;
NPRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
X static volatile portTickType xTickCount 						= ( portTickType ) 0U;
NPRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
X static unsigned long uxTopUsedPriority	 				= ( ( unsigned long ) 0U );
NPRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
X static volatile unsigned long uxTopReadyPriority 		= ( ( unsigned long ) 0U );
NPRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
X static volatile signed long xSchedulerRunning 			= ( 0 );
NPRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE_TYPE ) pdFALSE;
X static volatile unsigned long uxSchedulerSuspended	 	= ( unsigned long ) ( 0 );
NPRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE ) 0U;
X static volatile unsigned long uxMissedTicks 			= ( unsigned long ) 0U;
NPRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
X static volatile long xMissedYield 						= ( long ) ( 0 );
NPRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
X static volatile long xNumOfOverflows 					= ( long ) 0;
NPRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
X static unsigned long uxTaskNumber 						= ( unsigned long ) 0U;
NPRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= ( portTickType ) portMAX_DELAY;
X static volatile portTickType xNextTaskUnblockTime				= ( portTickType ) ( portTickType ) 0xffffffff;
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
S	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter the last time a task was switched in. */
S	PRIVILEGED_DATA static unsigned long ulTotalRunTime = 0UL;				/*< Holds the total amount of execution time as defined by the run time counter clock. */
S	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTimeDiv100 ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/* Debugging and trace facilities private variables and macros. ------------*/
N
N/*
N * The value used to fill the stack of a task when the task is created.  This
N * is used purely for checking the high water mark for tasks.
N */
N#define tskSTACK_FILL_BYTE	( 0xa5U )
N
N/*
N * Macros used by vListTask to indicate which state a task is in.
N */
N#define tskBLOCKED_CHAR		( ( signed char ) 'B' )
N#define tskREADY_CHAR		( ( signed char ) 'R' )
N#define tskDELETED_CHAR		( ( signed char ) 'D' )
N#define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
N
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
X#if ( 0 == 0 )
N
N	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
N	performed in a generic way that is not optimised to any particular
N	microcontroller architecture. */
N
N	/* uxTopReadyPriority holds the priority of the highest priority ready
N	state task. */
N	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
N	{																													\
N		if( ( uxPriority ) > uxTopReadyPriority )																		\
N		{																												\
N			uxTopReadyPriority = ( uxPriority );																		\
N		}																												\
N	} /* taskRECORD_READY_PRIORITY */
X	#define taskRECORD_READY_PRIORITY( uxPriority )																			{																															if( ( uxPriority ) > uxTopReadyPriority )																				{																															uxTopReadyPriority = ( uxPriority );																				}																													}  
N
N	/*-----------------------------------------------------------*/
N
N	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
N	{																													\
N		/* Find the highest priority queue that contains ready tasks. */												\
N		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
N		{																												\
N			configASSERT( uxTopReadyPriority );																			\
N			--uxTopReadyPriority;																						\
N		}																												\
N																														\
N		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
N		the	same priority get an equal share of the processor time. */													\
N		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
N	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
X	#define taskSELECT_HIGHEST_PRIORITY_TASK()																				{																															 														while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )												{																															configASSERT( uxTopReadyPriority );																						--uxTopReadyPriority;																								}																																																												 															listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );							}  
N
N	/*-----------------------------------------------------------*/
N
N	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
N	they are only required when a port optimised method of task selection is
N	being used. */
N	#define taskRESET_READY_PRIORITY( uxPriority )
N	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
N
N#else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
S
S	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
S	performed in a way that is tailored to the particular microcontroller
S	architecture being used. */
S
S	/* A port optimised version is provided.  Call the port defined macros. */
S	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyPriority )
S
S	/*-----------------------------------------------------------*/
S
S	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
S	{																								\
S	unsigned portBASE_TYPE uxTopPriority;															\
S																									\
S		/* Find the highest priority queue that contains ready tasks. */							\
S		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
S		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
S		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
S	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
X	#define taskSELECT_HIGHEST_PRIORITY_TASK()															{																									unsigned portBASE_TYPE uxTopPriority;																																										 									portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );										configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );				listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			}  
S
S	/*-----------------------------------------------------------*/
S
S	/* A port optimised version is provided, call it only if the TCB being reset
S	is being referenced from a ready list.  If it is referenced from a delayed
S	or suspended list then it won't be in a ready list. */
S	#define taskRESET_READY_PRIORITY( uxPriority )													\
S	{																								\
S		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
S		{																							\
S			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
S		}																							\
S	}
X	#define taskRESET_READY_PRIORITY( uxPriority )														{																										if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )						{																										portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );								}																								}
S
N#endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
N
N/*
N * Place the task represented by pxTCB into the appropriate ready queue for
N * the task.  It is inserted at the end of the list.  One quirk of this is
N * that if the task being inserted is at the same priority as the currently
N * executing task, then it will only be rescheduled after the currently
N * executing task has been rescheduled.
N */
N#define prvAddTaskToReadyQueue( pxTCB )																				\
N	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
N	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
N	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) )
X#define prvAddTaskToReadyQueue( pxTCB )																					traceMOVED_TASK_TO_READY_STATE( pxTCB )																				taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) )
N/*-----------------------------------------------------------*/
N
N/*
N * Macro that looks at the list of tasks that are currently delayed to see if
N * any require waking.
N *
N * Tasks are stored in the queue in the order of their wake time - meaning
N * once one tasks has been found whose timer has not expired we need not look
N * any further down the list.
N */
N#define prvCheckDelayedTasks()															\
N{																						\
NportTickType xItemValue;																\
N																						\
N	/* Is the tick count greater than or equal to the wake time of the first			\
N	task referenced from the delayed tasks list? */										\
N	if( xTickCount >= xNextTaskUnblockTime )											\
N	{																					\
N		for( ;; )																		\
N		{																				\
N			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
N			{																			\
N				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
N				maximum possible value so it is extremely unlikely that the				\
N				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
N				time through. */														\
N				xNextTaskUnblockTime = portMAX_DELAY;									\
N				break;																	\
N			}																			\
N			else																		\
N			{																			\
N				/* The delayed list is not empty, get the value of the item at			\
N				the head of the delayed list.  This is the time at which the			\
N				task at the head of the delayed list should be removed from				\
N				the Blocked state. */													\
N				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
N				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
N																						\
N				if( xTickCount < xItemValue )											\
N				{																		\
N					/* It is not time to unblock this item yet, but the item			\
N					value is the time at which the task at the head of the				\
N					blocked list should be removed from the Blocked state -				\
N					so record the item value in xNextTaskUnblockTime. */				\
N					xNextTaskUnblockTime = xItemValue;									\
N					break;																\
N				}																		\
N																						\
N				/* It is time to remove the item from the Blocked state. */				\
N				uxListRemove( &( pxTCB->xGenericListItem ) );							\
N																						\
N				/* Is the task waiting on an event also? */								\
N				if( pxTCB->xEventListItem.pvContainer != NULL )							\
N				{																		\
N					uxListRemove( &( pxTCB->xEventListItem ) );							\
N				}																		\
N				prvAddTaskToReadyQueue( pxTCB );										\
N			}																			\
N		}																				\
N	}																					\
N}
X#define prvCheckDelayedTasks()															{																						portTickType xItemValue;																																							 											if( xTickCount >= xNextTaskUnblockTime )												{																							for( ;; )																				{																							if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )									{																							 																		xNextTaskUnblockTime = portMAX_DELAY;													break;																				}																						else																					{																							 																	pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );																											if( xTickCount < xItemValue )															{																							 									xNextTaskUnblockTime = xItemValue;														break;																				}																																												 								uxListRemove( &( pxTCB->xGenericListItem ) );																																	 												if( pxTCB->xEventListItem.pvContainer != NULL )											{																							uxListRemove( &( pxTCB->xEventListItem ) );											}																						prvAddTaskToReadyQueue( pxTCB );													}																					}																					}																					}
N/*-----------------------------------------------------------*/
N
N/*
N * Several functions take an xTaskHandle parameter that can optionally be NULL,
N * where NULL is used to indicate that the handle of the currently executing
N * task should be used in place of the parameter.  This macro simply checks to
N * see if the parameter is NULL and returns a pointer to the appropriate TCB.
N */
N#define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( pxHandle ) )
N
N/* Callback function prototypes. --------------------------*/
Nextern void vApplicationStackOverflowHook( xTaskHandle xTask, signed char *pcTaskName );
Nextern void vApplicationTickHook( void );
N
N/* File private functions. --------------------------------*/
N
N/*
N * Utility to ready a TCB for a given task.  Mainly just copies the parameters
N * into the TCB structure.
N */
Nstatic void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth ) PRIVILEGED_FUNCTION;
Xstatic void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned long uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth ) ;
N
N/*
N * Utility to ready all the lists used by the scheduler.  This is called
N * automatically upon the creation of the first task.
N */
Nstatic void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
Xstatic void prvInitialiseTaskLists( void ) ;
N
N/*
N * The idle task, which as all tasks is implemented as a never ending loop.
N * The idle task is automatically created and added to the ready lists upon
N * creation of the first user task.
N *
N * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
N * language extensions.  The equivalent prototype for this function is:
N *
N * void prvIdleTask( void *pvParameters );
N *
N */
Nstatic portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
Xstatic void prvIdleTask( void *pvParameters );
N
N/*
N * Utility to free all memory allocated by the scheduler to hold a TCB,
N * including the stack pointed to by the TCB.
N *
N * This does not free memory allocated by the task itself (i.e. memory
N * allocated by calls to pvPortMalloc from within the tasks application code).
N */
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
X	static void prvDeleteTCB( tskTCB *pxTCB ) ;
N
N#endif
N
N/*
N * Used only by the idle task.  This checks to see if anything has been placed
N * in the list of tasks waiting to be deleted.  If so the task is cleaned up
N * and its TCB deleted.
N */
Nstatic void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
Xstatic void prvCheckTasksWaitingTermination( void ) ;
N
N/*
N * The currently executing task is entering the Blocked state.  Add the task to
N * either the current or the overflow delayed task list.
N */
Nstatic void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
Xstatic void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) ;
N
N/*
N * Allocates memory from the heap for a TCB and associated stack.  Checks the
N * allocation was successful.
N */
Nstatic tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer ) PRIVILEGED_FUNCTION;
Xstatic tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, unsigned long *puxStackBuffer ) ;
N
N/*
N * Called from vTaskList.  vListTasks details all the tasks currently under
N * control of the scheduler.  The tasks may be in one of a number of lists.
N * prvListTaskWithinSingleList accepts a list and details the tasks from
N * within just that list.
N *
N * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
N * NORMAL APPLICATION CODE.
N */
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*
N * When a task is created, the stack of the task is filled with a known value.
N * This function determines the 'high water mark' of the task stack by
N * determining how much of the stack remains at the original preset value.
N */
N#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*
N * Return the amount of time, in ticks, that will pass before the kernel will
N * next move a task from the Blocked state to the Running state.
N *
N * This conditional compilation should use inequality to 0, not equality to 1.
N * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
N * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
N * set to a value other than 1.
N */
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*lint +e956 */
N
Nsigned portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
Xsigned long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions )
N{
Nsigned portBASE_TYPE xReturn;
Xsigned long xReturn;
NtskTCB * pxNewTCB;
N
N	configASSERT( pxTaskCode );
X	;
N	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
X	;
N
N	/* Allocate the memory required by the TCB and stack for the new task,
N	checking that the allocation was successful. */
N	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
N
N	if( pxNewTCB != NULL )
X	if( pxNewTCB != 0 )
N	{
N		portSTACK_TYPE *pxTopOfStack;
X		unsigned long *pxTopOfStack;
N
N		#if( portUSING_MPU_WRAPPERS == 1 )
X		#if( 0 == 1 )
S			/* Should the task be created in privileged mode? */
S			portBASE_TYPE xRunPrivileged;
S			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
S			{
S				xRunPrivileged = pdTRUE;
S			}
S			else
S			{
S				xRunPrivileged = pdFALSE;
S			}
S			uxPriority &= ~portPRIVILEGE_BIT;
N		#endif /* portUSING_MPU_WRAPPERS == 1 */
N
N		/* Calculate the top of stack address.  This depends on whether the
N		stack grows from high memory to low (as per the 80x86) or visa versa.
N		portSTACK_GROWTH is used to make the result positive or negative as
N		required by the port. */
N		#if( portSTACK_GROWTH < 0 )
X		#if( ( -1 ) < 0 )
N		{
N			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
N			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
X			pxTopOfStack = ( unsigned long * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~( 0x0007 )  ) );
N
N			/* Check the alignment of the calculated top of stack is correct. */
N			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
X			;
N		}
N		#else /* portSTACK_GROWTH */
S		{
S			pxTopOfStack = pxNewTCB->pxStack;
S
S			/* Check the alignment of the stack buffer is correct. */
S			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
S
S			/* If we want to use stack checking on architectures that use
S			a positive stack growth direction then we also need to store the
S			other extreme of the stack space. */
S			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
S		}
N		#endif /* portSTACK_GROWTH */
N
N		/* Setup the newly allocated TCB with the initial state of the task. */
N		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
N
N		/* Initialize the TCB stack to look as if the task was already running,
N		but had been interrupted by the scheduler.  The return address is set
N		to the start of the task function. Once the stack has been initialised
N		the	top of stack variable is updated. */
N		#if( portUSING_MPU_WRAPPERS == 1 )
X		#if( 0 == 1 )
S		{
S			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
S		}
N		#else /* portUSING_MPU_WRAPPERS */
N		{
N			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
N		}
N		#endif /* portUSING_MPU_WRAPPERS */
N
N		/* Check the alignment of the initialised stack. */
N		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
X		;
N
N		if( ( void * ) pxCreatedTask != NULL )
X		if( ( void * ) pxCreatedTask != 0 )
N		{
N			/* Pass the TCB out - in an anonymous way.  The calling function/
N			task can use this as a handle to delete the task later if
N			required.*/
N			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
N		}
N
N		/* We are going to manipulate the task queues to add this task to a
N		ready list, so must make sure no interrupts occur. */
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			uxCurrentNumberOfTasks++;
N			if( pxCurrentTCB == NULL )
X			if( pxCurrentTCB == 0 )
N			{
N				/* There are no other tasks, or all the other tasks are in
N				the suspended state - make this the current task. */
N				pxCurrentTCB =  pxNewTCB;
N
N				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
X				if( uxCurrentNumberOfTasks == ( unsigned long ) 1 )
N				{
N					/* This is the first task to be created so do the preliminary
N					initialisation required.  We will not recover if this call
N					fails, but we will report the failure. */
N					prvInitialiseTaskLists();
N				}
N			}
N			else
N			{
N				/* If the scheduler is not already running, make this task the
N				current task if it is the highest priority task to be created
N				so far. */
N				if( xSchedulerRunning == pdFALSE )
X				if( xSchedulerRunning == ( 0 ) )
N				{
N					if( pxCurrentTCB->uxPriority <= uxPriority )
N					{
N						pxCurrentTCB = pxNewTCB;
N					}
N				}
N			}
N
N			/* Remember the top priority to make context switching faster.  Use
N			the priority in pxNewTCB as this has been capped to a valid value. */
N			if( pxNewTCB->uxPriority > uxTopUsedPriority )
N			{
N				uxTopUsedPriority = pxNewTCB->uxPriority;
N			}
N
N			uxTaskNumber++;
N
N			#if ( configUSE_TRACE_FACILITY == 1 )
X			#if ( 0 == 1 )
S			{
S				/* Add a counter into the TCB for tracing only. */
S				pxNewTCB->uxTCBNumber = uxTaskNumber;
S			}
N			#endif /* configUSE_TRACE_FACILITY */
N			traceTASK_CREATE( pxNewTCB );
X			;
N
N			prvAddTaskToReadyQueue( pxNewTCB );
X			 { if( ( ( pxNewTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxNewTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxNewTCB )->uxPriority ] ), &( ( pxNewTCB )->xGenericListItem ) );
N
N			xReturn = pdPASS;
X			xReturn = ( 1 );
N			portSETUP_TCB( pxNewTCB );
X			( void ) pxNewTCB;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N	}
N	else
N	{
N		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
X		xReturn = ( -1 );
N		traceTASK_CREATE_FAILED();
X		;
N	}
N
N	if( xReturn == pdPASS )
X	if( xReturn == ( 1 ) )
N	{
N		if( xSchedulerRunning != pdFALSE )
X		if( xSchedulerRunning != ( 0 ) )
N		{
N			/* If the created task is of a higher priority than the current task
N			then it should run now. */
N			if( pxCurrentTCB->uxPriority < uxPriority )
N			{
N				portYIELD_WITHIN_API();
X				vPortYield();
N			}
N		}
N	}
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelete( xTaskHandle xTaskToDelete )
N	{
N	tskTCB *pxTCB;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* Ensure a yield is performed if the current task is being
N			deleted. */
N			if( xTaskToDelete == pxCurrentTCB )
N			{
N				xTaskToDelete = NULL;
X				xTaskToDelete = 0;
N			}
N
N			/* If null is passed in here then we are deleting ourselves. */
N			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
X			pxTCB = ( ( ( xTaskToDelete ) == 0 ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( xTaskToDelete ) );
N
N			/* Remove task from the ready list and place in the	termination list.
N			This will stop the task from be scheduled.  The idle task will check
N			the termination list and free up any memory allocated by the
N			scheduler for the TCB and stack. */
N			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
N			{
N				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X				;
N			}
N
N			/* Is the task waiting on an event also? */
N			if( pxTCB->xEventListItem.pvContainer != NULL )
X			if( pxTCB->xEventListItem.pvContainer != 0 )
N			{
N				uxListRemove( &( pxTCB->xEventListItem ) );
N			}
N
N			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
N
N			/* Increment the ucTasksDeleted variable so the idle task knows
N			there is a task that has been deleted and that it should therefore
N			check the xTasksWaitingTermination list. */
N			++uxTasksDeleted;
N
N			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
N			can detect that the task lists need re-generating. */
N			uxTaskNumber++;
N
N			traceTASK_DELETE( pxTCB );
X			;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		/* Force a reschedule if we have just deleted the current task. */
N		if( xSchedulerRunning != pdFALSE )
X		if( xSchedulerRunning != ( 0 ) )
N		{
N			if( ( void * ) xTaskToDelete == NULL )
X			if( ( void * ) xTaskToDelete == 0 )
N			{
N				portYIELD_WITHIN_API();
X				vPortYield();
N			}
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelete */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelayUntil == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
N	{
N	portTickType xTimeToWake;
N	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
X	long xAlreadyYielded, xShouldDelay = ( 0 );
N
N		configASSERT( pxPreviousWakeTime );
X		;
N		configASSERT( ( xTimeIncrement > 0U ) );
X		;
N
N		vTaskSuspendAll();
N		{
N			/* Generate the tick time at which the task wants to wake. */
N			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
N
N			if( xTickCount < *pxPreviousWakeTime )
N			{
N				/* The tick count has overflowed since this function was
N				lasted called.  In this case the only time we should ever
N				actually delay is if the wake time has also	overflowed,
N				and the wake time is greater than the tick time.  When this
N				is the case it is as if neither time had overflowed. */
N				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
N				{
N					xShouldDelay = pdTRUE;
X					xShouldDelay = ( 1 );
N				}
N			}
N			else
N			{
N				/* The tick time has not overflowed.  In this case we will
N				delay if either the wake time has overflowed, and/or the
N				tick time is less than the wake time. */
N				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
N				{
N					xShouldDelay = pdTRUE;
X					xShouldDelay = ( 1 );
N				}
N			}
N
N			/* Update the wake time ready for the next call. */
N			*pxPreviousWakeTime = xTimeToWake;
N
N			if( xShouldDelay != pdFALSE )
X			if( xShouldDelay != ( 0 ) )
N			{
N				traceTASK_DELAY_UNTIL();
X				;
N
N				/* We must remove ourselves from the ready list before adding
N				ourselves to the blocked list as the same list item is used for
N				both lists. */
N				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
N				{
N					/* The current task must be in a ready list, so there is
N					no need to check, and the port reset macro can be called
N					directly. */
N					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X					;
N				}
N
N				prvAddCurrentTaskToDelayedList( xTimeToWake );
N			}
N		}
N		xAlreadyYielded = xTaskResumeAll();
N
N		/* Force a reschedule if xTaskResumeAll has not already done so, we may
N		have put ourselves to sleep. */
N		if( xAlreadyYielded == pdFALSE )
X		if( xAlreadyYielded == ( 0 ) )
N		{
N			portYIELD_WITHIN_API();
X			vPortYield();
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelayUntil */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelay == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelay( portTickType xTicksToDelay )
N	{
N	portTickType xTimeToWake;
N	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
X	signed long xAlreadyYielded = ( 0 );
N
N		/* A delay time of zero just forces a reschedule. */
N		if( xTicksToDelay > ( portTickType ) 0U )
N		{
N			vTaskSuspendAll();
N			{
N				traceTASK_DELAY();
X				;
N
N				/* A task that is removed from the event list while the
N				scheduler is suspended will not get placed in the ready
N				list or removed from the blocked list until the scheduler
N				is resumed.
N
N				This task cannot be in an event list as it is the currently
N				executing task. */
N
N				/* Calculate the time to wake - this may overflow but this is
N				not a problem. */
N				xTimeToWake = xTickCount + xTicksToDelay;
N
N				/* We must remove ourselves from the ready list before adding
N				ourselves to the blocked list as the same list item is used for
N				both lists. */
N				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
N				{
N					/* The current task must be in a ready list, so there is
N					no need to check, and the port reset macro can be called
N					directly. */
N					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X					;
N				}
N				prvAddCurrentTaskToDelayedList( xTimeToWake );
N			}
N			xAlreadyYielded = xTaskResumeAll();
N		}
N
N		/* Force a reschedule if xTaskResumeAll has not already done so, we may
N		have put ourselves to sleep. */
N		if( xAlreadyYielded == pdFALSE )
X		if( xAlreadyYielded == ( 0 ) )
N		{
N			portYIELD_WITHIN_API();
X			vPortYield();
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelay */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_eTaskGetState == 1 )
X#if ( 0 == 1 )
S
S	eTaskState eTaskGetState( xTaskHandle xTask )
S	{
S	eTaskState eReturn;
S	xList *pxStateList;
S	tskTCB *pxTCB;
S
S		pxTCB = ( tskTCB * ) xTask;
S
S		if( pxTCB == pxCurrentTCB )
S		{
S			/* The task calling this function is querying its own state. */
S			eReturn = eRunning;
S		}
S		else
S		{
S			taskENTER_CRITICAL();
S			{
S				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
S			}
S			taskEXIT_CRITICAL();
S
S			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
S			{
S				/* The task being queried is referenced from one of the Blocked
S				lists. */
S				eReturn = eBlocked;
S			}
S
S			#if ( INCLUDE_vTaskSuspend == 1 )
S				else if( pxStateList == &xSuspendedTaskList )
S				{
S					/* The task being queried is referenced from the suspended
S					list. */
S					eReturn = eSuspended;
S				}
S			#endif
S
S			#if ( INCLUDE_vTaskDelete == 1 )
S				else if( pxStateList == &xTasksWaitingTermination )
S				{
S					/* The task being queried is referenced from the deleted
S					tasks list. */
S					eReturn = eDeleted;
S				}
S			#endif
S
S			else
S			{
S				/* If the task is not in any other state, it must be in the
S				Ready (including pending ready) state. */
S				eReturn = eReady;
S			}
S		}
S
S		return eReturn;
S	}
S
N#endif /* INCLUDE_eTaskGetState */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_uxTaskPriorityGet == 1 )
X#if ( 1 == 1 )
N
N	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask )
X	unsigned long uxTaskPriorityGet( xTaskHandle xTask )
N	{
N	tskTCB *pxTCB;
N	unsigned portBASE_TYPE uxReturn;
X	unsigned long uxReturn;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* If null is passed in here then we are changing the
N			priority of the calling function. */
N			pxTCB = prvGetTCBFromHandle( xTask );
X			pxTCB = ( ( ( xTask ) == 0 ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( xTask ) );
N			uxReturn = pxTCB->uxPriority;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return uxReturn;
N	}
N
N#endif /* INCLUDE_uxTaskPriorityGet */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskPrioritySet == 1 )
X#if ( 1 == 1 )
N
N	void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority )
X	void vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority )
N	{
N	tskTCB *pxTCB;
N	unsigned portBASE_TYPE uxCurrentPriority, uxPriorityUsedOnEntry;
X	unsigned long uxCurrentPriority, uxPriorityUsedOnEntry;
N	portBASE_TYPE xYieldRequired = pdFALSE;
X	long xYieldRequired = ( 0 );
N
N		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
X		;
N
N		/* Ensure the new priority is valid. */
N		if( uxNewPriority >= configMAX_PRIORITIES )
X		if( uxNewPriority >= ( ( unsigned long ) 5 ) )
N		{
N			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
X			uxNewPriority = ( ( unsigned long ) 5 ) - ( unsigned long ) 1U;
N		}
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			if( xTask == ( xTaskHandle ) pxCurrentTCB )
N			{
N				xTask = NULL;
X				xTask = 0;
N			}
N
N			/* If null is passed in here then we are changing the
N			priority of the calling function. */
N			pxTCB = prvGetTCBFromHandle( xTask );
X			pxTCB = ( ( ( xTask ) == 0 ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( xTask ) );
N
N			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
X			;
N
N			#if ( configUSE_MUTEXES == 1 )
X			#if ( 0 == 1 )
S			{
S				uxCurrentPriority = pxTCB->uxBasePriority;
S			}
N			#else
N			{
N				uxCurrentPriority = pxTCB->uxPriority;
N			}
N			#endif
N
N			if( uxCurrentPriority != uxNewPriority )
N			{
N				/* The priority change may have readied a task of higher
N				priority than the calling task. */
N				if( uxNewPriority > uxCurrentPriority )
N				{
N					if( xTask != NULL )
X					if( xTask != 0 )
N					{
N						/* The priority of another task is being raised.  If we
N						were raising the priority of the currently running task
N						there would be no need to switch as it must have already
N						been the highest priority task. */
N						xYieldRequired = pdTRUE;
X						xYieldRequired = ( 1 );
N					}
N				}
N				else if( xTask == NULL )
X				else if( xTask == 0 )
N				{
N					/* Setting our own priority down means there may now be another
N					task of higher priority that is ready to execute. */
N					xYieldRequired = pdTRUE;
X					xYieldRequired = ( 1 );
N				}
N
N				/* Remember the ready list the task might be referenced from
N				before its uxPriority member is changed so the
N				taskRESET_READY_PRIORITY() macro can function correctly. */
N				uxPriorityUsedOnEntry = pxTCB->uxPriority;
N
N				#if ( configUSE_MUTEXES == 1 )
X				#if ( 0 == 1 )
S				{
S					/* Only change the priority being used if the task is not
S					currently using an inherited priority. */
S					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
S					{
S						pxTCB->uxPriority = uxNewPriority;
S					}
S
S					/* The base priority gets set whatever. */
S					pxTCB->uxBasePriority = uxNewPriority;
S				}
N				#else
N				{
N					pxTCB->uxPriority = uxNewPriority;
N				}
N				#endif
N
N				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
X				( &( pxTCB->xEventListItem ) )->xItemValue = ( ( ( ( unsigned long ) 5 ) - ( portTickType ) uxNewPriority ) );
N
N				/* If the task is in the blocked or suspended list we need do
N				nothing more than change it's priority variable. However, if
N				the task is in a ready list it needs to be removed and placed
N				in the queue appropriate to its new priority. */
N				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
X				if( ( ( &( pxTCB->xGenericListItem ) )->pvContainer == ( void * ) ( &( pxReadyTasksLists[ uxCurrentPriority ] ) ) ) )
N				{
N					/* The task is currently in its ready list - remove before adding
N					it to it's new ready list.  As we are in a critical section we
N					can do this even if the scheduler is suspended. */
N					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
N					{
N						taskRESET_READY_PRIORITY( uxPriorityUsedOnEntry );
X						;
N					}
N					prvAddTaskToReadyQueue( pxTCB );
X					 { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N
N				if( xYieldRequired == pdTRUE )
X				if( xYieldRequired == ( 1 ) )
N				{
N					portYIELD_WITHIN_API();
X					vPortYield();
N				}
N
N				/* Remove compiler warning about unused variables when the port
N				optimised task selection is not being used. */
N				( void ) uxPriorityUsedOnEntry;
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N	}
N
N#endif /* INCLUDE_vTaskPrioritySet */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	void vTaskSuspend( xTaskHandle xTaskToSuspend )
N	{
N	tskTCB *pxTCB;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* Ensure a yield is performed if the current task is being
N			suspended. */
N			if( xTaskToSuspend == ( xTaskHandle ) pxCurrentTCB )
N			{
N				xTaskToSuspend = NULL;
X				xTaskToSuspend = 0;
N			}
N
N			/* If null is passed in here then we are suspending ourselves. */
N			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
X			pxTCB = ( ( ( xTaskToSuspend ) == 0 ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( xTaskToSuspend ) );
N
N			traceTASK_SUSPEND( pxTCB );
X			;
N
N			/* Remove task from the ready/delayed list and place in the	suspended list. */
N			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
N			{
N				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X				;
N			}
N
N			/* Is the task waiting on an event also? */
N			if( pxTCB->xEventListItem.pvContainer != NULL )
X			if( pxTCB->xEventListItem.pvContainer != 0 )
N			{
N				uxListRemove( &( pxTCB->xEventListItem ) );
N			}
N
N			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		if( ( void * ) xTaskToSuspend == NULL )
X		if( ( void * ) xTaskToSuspend == 0 )
N		{
N			if( xSchedulerRunning != pdFALSE )
X			if( xSchedulerRunning != ( 0 ) )
N			{
N				/* We have just suspended the current task. */
N				portYIELD_WITHIN_API();
X				vPortYield();
N			}
N			else
N			{
N				/* The scheduler is not running, but the task that was pointed
N				to by pxCurrentTCB has just been suspended and pxCurrentTCB
N				must be adjusted to point to a different task. */
N				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
X				if( ( ( &xSuspendedTaskList )->uxNumberOfItems ) == uxCurrentNumberOfTasks )
N				{
N					/* No other tasks are ready, so set pxCurrentTCB back to
N					NULL so when the next task is created pxCurrentTCB will
N					be set to point to it no matter what its relative priority
N					is. */
N					pxCurrentTCB = NULL;
X					pxCurrentTCB = 0;
N				}
N				else
N				{
N					vTaskSwitchContext();
N				}
N			}
N		}
N	}
N
N#endif /* INCLUDE_vTaskSuspend */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
X	signed long xTaskIsTaskSuspended( xTaskHandle xTask )
N	{
N	portBASE_TYPE xReturn = pdFALSE;
X	long xReturn = ( 0 );
N	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
N
N		/* It does not make sense to check if the calling task is suspended. */
N		configASSERT( xTask );
X		;
N
N		/* Is the task we are attempting to resume actually in the
N		suspended list? */
N		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
X		if( ( ( &( pxTCB->xGenericListItem ) )->pvContainer == ( void * ) ( &xSuspendedTaskList ) ) != ( 0 ) )
N		{
N			/* Has the task already been resumed from within an ISR? */
N			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
X			if( ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( void * ) ( &xPendingReadyList ) ) != ( 1 ) )
N			{
N				/* Is it in the suspended list because it is in the
N				Suspended state?  It is possible to be in the suspended
N				list because it is blocked on a task with no timeout
N				specified. */
N				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
X				if( ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( void * ) ( 0 ) ) == ( 1 ) )
N				{
N					xReturn = pdTRUE;
X					xReturn = ( 1 );
N				}
N			}
N		}
N
N		return xReturn;
N	}
N
N#endif /* INCLUDE_vTaskSuspend */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	void vTaskResume( xTaskHandle xTaskToResume )
N	{
N	tskTCB *pxTCB;
N
N		/* It does not make sense to resume the calling task. */
N		configASSERT( xTaskToResume );
X		;
N
N		/* Remove the task from whichever list it is currently in, and place
N		it in the ready list. */
N		pxTCB = ( tskTCB * ) xTaskToResume;
N
N		/* The parameter cannot be NULL as it is impossible to resume the
N		currently executing task. */
N		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
X		if( ( pxTCB != 0 ) && ( pxTCB != pxCurrentTCB ) )
N		{
N			taskENTER_CRITICAL();
X			vPortEnterCritical();
N			{
N				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
X				if( xTaskIsTaskSuspended( pxTCB ) == ( 1 ) )
N				{
N					traceTASK_RESUME( pxTCB );
X					;
N
N					/* As we are in a critical section we can access the ready
N					lists even if the scheduler is suspended. */
N					uxListRemove(  &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyQueue( pxTCB );
X					 { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N					/* We may have just resumed a higher priority task. */
N					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N					{
N						/* This yield may not cause the task just resumed to run, but
N						will leave the lists in the correct state for the next yield. */
N						portYIELD_WITHIN_API();
X						vPortYield();
N					}
N				}
N			}
N			taskEXIT_CRITICAL();
X			vPortExitCritical();
N		}
N	}
N
N#endif /* INCLUDE_vTaskSuspend */
N
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
X#if ( ( 1 == 1 ) && ( 1 == 1 ) )
N
N	portBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume )
X	long xTaskResumeFromISR( xTaskHandle xTaskToResume )
N	{
N	portBASE_TYPE xYieldRequired = pdFALSE;
X	long xYieldRequired = ( 0 );
N	tskTCB *pxTCB;
N	unsigned portBASE_TYPE uxSavedInterruptStatus;
X	unsigned long uxSavedInterruptStatus;
N
N		configASSERT( xTaskToResume );
X		;
N
N		pxTCB = ( tskTCB * ) xTaskToResume;
N
N		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
X		uxSavedInterruptStatus = ulPortSetInterruptMask();
N		{
N			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
X			if( xTaskIsTaskSuspended( pxTCB ) == ( 1 ) )
N			{
N				traceTASK_RESUME_FROM_ISR( pxTCB );
X				;
N
N				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
X				if( uxSchedulerSuspended == ( unsigned long ) ( 0 ) )
N				{
N					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
N					uxListRemove(  &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyQueue( pxTCB );
X					 { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					/* We cannot access the delayed or ready lists, so will hold this
N					task pending until the scheduler is resumed, at which point a
N					yield will be performed if necessary. */
N					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
N				}
N			}
N		}
N		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X		vPortClearInterruptMask(uxSavedInterruptStatus);
N
N		return xYieldRequired;
N	}
N
N#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
N/*-----------------------------------------------------------*/
N
Nvoid vTaskStartScheduler( void )
N{
NportBASE_TYPE xReturn;
Xlong xReturn;
N
N	/* Add the idle task at the lowest priority. */
N	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X	#if ( 0 == 1 )
S	{
S		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
S		be returned by the xTaskGetIdleTaskHandle() function. */
S		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
S	}
N	#else
N	{
N		/* Create the idle task without storing its handle. */
N		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
X		xReturn = xTaskGenericCreate( ( prvIdleTask ), ( ( signed char * ) "IDLE" ), ( ( ( unsigned short ) 128 ) ), ( ( void * ) 0 ), ( ( ( ( unsigned long ) 0U ) | ( ( unsigned long ) 0x00 ) ) ), ( 0 ), ( 0 ), ( 0 ) );
N	}
N	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
N
N	#if ( configUSE_TIMERS == 1 )
X	#if ( 0 == 1 )
S	{
S		if( xReturn == pdPASS )
S		{
S			xReturn = xTimerCreateTimerTask();
S		}
S	}
N	#endif /* configUSE_TIMERS */
N
N	if( xReturn == pdPASS )
X	if( xReturn == ( 1 ) )
N	{
N		/* Interrupts are turned off here, to ensure a tick does not occur
N		before or during the call to xPortStartScheduler().  The stacks of
N		the created tasks contain a status word with interrupts switched on
N		so interrupts will automatically get re-enabled when the first task
N		starts to run.
N
N		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
N		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
N		portDISABLE_INTERRUPTS();
X		ulPortSetInterruptMask();
N
N		xSchedulerRunning = pdTRUE;
X		xSchedulerRunning = ( 1 );
N		xTickCount = ( portTickType ) 0U;
N
N		/* If configGENERATE_RUN_TIME_STATS is defined then the following
N		macro must be defined to configure the timer/counter used to generate
N		the run time counter time base. */
N		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
X		;
N
N		/* Setting up the timer tick is hardware specific and thus in the
N		portable interface. */
N		if( xPortStartScheduler() != pdFALSE )
X		if( xPortStartScheduler() != ( 0 ) )
N		{
N			/* Should not reach here as if the scheduler is running the
N			function will not return. */
N		}
N		else
N		{
N			/* Should only reach here if a task calls xTaskEndScheduler(). */
N		}
N	}
N	else
N	{
N		/* This line will only be reached if the kernel could not be started,
N		because there was not enough FreeRTOS heap to create the idle task
N		or the timer task. */
N		configASSERT( xReturn );
X		;
N	}
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskEndScheduler( void )
N{
N	/* Stop the scheduler interrupts and call the portable scheduler end
N	routine so the original ISRs can be restored if necessary.  The port
N	layer must ensure interrupts enable	bit is left in the correct state. */
N	portDISABLE_INTERRUPTS();
X	ulPortSetInterruptMask();
N	xSchedulerRunning = pdFALSE;
X	xSchedulerRunning = ( 0 );
N	vPortEndScheduler();
N}
N/*----------------------------------------------------------*/
N
Nvoid vTaskSuspendAll( void )
N{
N	/* A critical section is not required as the variable is of type
N	portBASE_TYPE. */
N	++uxSchedulerSuspended;
N}
N/*----------------------------------------------------------*/
N
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	static portTickType prvGetExpectedIdleTime( void )
S	{
S	portTickType xReturn;
S
S		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
S		{
S			xReturn = 0;
S		}
S		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
S		{
S			/* There are other idle priority tasks in the ready state.  If
S			time slicing is used then the very next tick interrupt must be
S			processed. */
S			xReturn = 0;
S		}
S		else
S		{
S			xReturn = xNextTaskUnblockTime - xTickCount;
S		}
S
S		return xReturn;
S	}
S
N#endif /* configUSE_TICKLESS_IDLE */
N/*----------------------------------------------------------*/
N
Nsigned portBASE_TYPE xTaskResumeAll( void )
Xsigned long xTaskResumeAll( void )
N{
Nregister tskTCB *pxTCB;
Nsigned portBASE_TYPE xAlreadyYielded = pdFALSE;
Xsigned long xAlreadyYielded = ( 0 );
N
N	/* If uxSchedulerSuspended is zero then this function does not match a
N	previous call to vTaskSuspendAll(). */
N	configASSERT( uxSchedulerSuspended );
X	;
N
N	/* It is possible that an ISR caused a task to be removed from an event
N	list while the scheduler was suspended.  If this was the case then the
N	removed task will have been added to the xPendingReadyList.  Once the
N	scheduler has been resumed it is safe to move all the pending ready
N	tasks from this list into their appropriate ready list. */
N	taskENTER_CRITICAL();
X	vPortEnterCritical();
N	{
N		--uxSchedulerSuspended;
N
N		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
X		if( uxSchedulerSuspended == ( unsigned long ) ( 0 ) )
N		{
N			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
X			if( uxCurrentNumberOfTasks > ( unsigned long ) 0U )
N			{
N				portBASE_TYPE xYieldRequired = pdFALSE;
X				long xYieldRequired = ( 0 );
N
N				/* Move any readied tasks from the pending list into the
N				appropriate ready list. */
N				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
X				while( ( ( ( xList * ) &xPendingReadyList )->uxNumberOfItems == ( unsigned long ) 0 ) == ( 0 ) )
N				{
N					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
X					pxTCB = ( tskTCB * ) ( (&( ( ( ( xList * ) &xPendingReadyList ) )->xListEnd ))->pxNext->pvOwner );
N					uxListRemove( &( pxTCB->xEventListItem ) );
N					uxListRemove( &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyQueue( pxTCB );
X					 { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N					/* If we have moved a task that has a priority higher than
N					the current task then we should yield. */
N					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N					{
N						xYieldRequired = pdTRUE;
X						xYieldRequired = ( 1 );
N					}
N				}
N
N				/* If any ticks occurred while the scheduler was suspended then
N				they should be processed now.  This ensures the tick count does not
N				slip, and that any delayed tasks are resumed at the correct time. */
N				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
X				if( uxMissedTicks > ( unsigned long ) 0U )
N				{
N					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
X					while( uxMissedTicks > ( unsigned long ) 0U )
N					{
N						vTaskIncrementTick();
N						--uxMissedTicks;
N					}
N
N					/* As we have processed some ticks it is appropriate to yield
N					to ensure the highest priority task that is ready to run is
N					the task actually running. */
N					#if configUSE_PREEMPTION == 1
X					#if 1 == 1
N					{
N						xYieldRequired = pdTRUE;
X						xYieldRequired = ( 1 );
N					}
N					#endif
N				}
N
N				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
X				if( ( xYieldRequired == ( 1 ) ) || ( xMissedYield == ( 1 ) ) )
N				{
N					xAlreadyYielded = pdTRUE;
X					xAlreadyYielded = ( 1 );
N					xMissedYield = pdFALSE;
X					xMissedYield = ( 0 );
N					portYIELD_WITHIN_API();
X					vPortYield();
N				}
N			}
N		}
N	}
N	taskEXIT_CRITICAL();
X	vPortExitCritical();
N
N	return xAlreadyYielded;
N}
N/*-----------------------------------------------------------*/
N
NportTickType xTaskGetTickCount( void )
N{
NportTickType xTicks;
N
N	/* Critical section required if running on a 16 bit processor. */
N	taskENTER_CRITICAL();
X	vPortEnterCritical();
N	{
N		xTicks = xTickCount;
N	}
N	taskEXIT_CRITICAL();
X	vPortExitCritical();
N
N	return xTicks;
N}
N/*-----------------------------------------------------------*/
N
NportTickType xTaskGetTickCountFromISR( void )
N{
NportTickType xReturn;
Nunsigned portBASE_TYPE uxSavedInterruptStatus;
Xunsigned long uxSavedInterruptStatus;
N
N	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
X	uxSavedInterruptStatus = ulPortSetInterruptMask();
N	xReturn = xTickCount;
N	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X	vPortClearInterruptMask(uxSavedInterruptStatus);
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nunsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
Xunsigned long uxTaskGetNumberOfTasks( void )
N{
N	/* A critical section is not required because the variables are of type
N	portBASE_TYPE. */
N	return uxCurrentNumberOfTasks;
N}
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_pcTaskGetTaskName == 1 )
X#if ( 0 == 1 )
S
S	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
S	{
S	tskTCB *pxTCB;
S
S		/* If null is passed in here then the name of the calling task is being queried. */
S		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
S		configASSERT( pxTCB );
S		return &( pxTCB->pcTaskName[ 0 ] );
S	}
S
N#endif /* INCLUDE_pcTaskGetTaskName */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	void vTaskList( signed char *pcWriteBuffer )
S	{
S	unsigned portBASE_TYPE uxQueue;
S
S		/* This is a VERY costly function that should be used for debug only.
S		It leaves interrupts disabled for a LONG time. */
S
S		vTaskSuspendAll();
S		{
S			/* Run through all the lists that could potentially contain a TCB and
S			report the task name, state and stack high water mark. */
S
S			*pcWriteBuffer = ( signed char ) 0x00;
S			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
S
S			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
S
S			do
S			{
S				uxQueue--;
S
S				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
S				{
S					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
S				}
S			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
S
S			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
S			{
S				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
S			}
S
S			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
S			{
S				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
S			}
S
S			#if( INCLUDE_vTaskDelete == 1 )
S			{
S				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
S				{
S					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
S				}
S			}
S			#endif
S
S			#if ( INCLUDE_vTaskSuspend == 1 )
S			{
S				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
S				{
S					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
S				}
S			}
S			#endif
S		}
S		xTaskResumeAll();
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*----------------------------------------------------------*/
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
S	{
S	unsigned portBASE_TYPE uxQueue;
S	unsigned long ulTotalRunTimeDiv100;
S
S		/* This is a VERY costly function that should be used for debug only.
S		It leaves interrupts disabled for a LONG time. */
S
S		vTaskSuspendAll();
S		{
S			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
S				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
S			#else
S				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
S			#endif
S
S			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
S			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
S			ulTotalRunTimeDiv100 = ulTotalRunTime / 100UL;
S
S			/* Run through all the lists that could potentially contain a TCB,
S			generating a table of run timer percentages in the provided
S			buffer. */
S
S			*pcWriteBuffer = ( signed char ) 0x00;
S			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
S
S			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
S
S			do
S			{
S				uxQueue--;
S
S				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
S				{
S					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTimeDiv100 );
S				}
S			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
S
S			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
S			{
S				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTimeDiv100 );
S			}
S
S			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
S			{
S				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTimeDiv100 );
S			}
S
S			#if ( INCLUDE_vTaskDelete == 1 )
S			{
S				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
S				{
S					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTimeDiv100 );
S				}
S			}
S			#endif
S
S			#if ( INCLUDE_vTaskSuspend == 1 )
S			{
S				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
S				{
S					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTimeDiv100 );
S				}
S			}
S			#endif
S		}
S		xTaskResumeAll();
S	}
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N/*----------------------------------------------------------*/
N
N#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X#if ( 0 == 1 )
S
S	xTaskHandle xTaskGetIdleTaskHandle( void )
S	{
S		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
S		started, then xIdleTaskHandle will be NULL. */
S		configASSERT( ( xIdleTaskHandle != NULL ) );
S		return xIdleTaskHandle;
S	}
S
N#endif /* INCLUDE_xTaskGetIdleTaskHandle */
N/*----------------------------------------------------------*/
N
N/* This conditional compilation should use inequality to 0, not equality to 1.
NThis is to ensure vTaskStepTick() is available when user defined low power mode
Nimplementations require configUSE_TICKLESS_IDLE to be set to a value other than
N1. */
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	void vTaskStepTick( portTickType xTicksToJump )
S	{
S		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
S		xTickCount += xTicksToJump;
S	}
S
N#endif /* configUSE_TICKLESS_IDLE */
N/*----------------------------------------------------------*/
N
Nvoid vTaskIncrementTick( void )
N{
NtskTCB * pxTCB;
N
N	/* Called by the portable layer each time a tick interrupt occurs.
N	Increments the tick then checks to see if the new tick value will cause any
N	tasks to be unblocked. */
N	traceTASK_INCREMENT_TICK( xTickCount );
X	;
N	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
X	if( uxSchedulerSuspended == ( unsigned long ) ( 0 ) )
N	{
N		++xTickCount;
N		if( xTickCount == ( portTickType ) 0U )
N		{
N			xList *pxTemp;
N
N			/* Tick count has overflowed so we need to swap the delay lists.
N			If there are any items in pxDelayedTaskList here then there is
N			an error! */
N			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
X			;
N
N			pxTemp = pxDelayedTaskList;
N			pxDelayedTaskList = pxOverflowDelayedTaskList;
N			pxOverflowDelayedTaskList = pxTemp;
N			xNumOfOverflows++;
N
N			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
X			if( ( ( pxDelayedTaskList )->uxNumberOfItems == ( unsigned long ) 0 ) != ( 0 ) )
N			{
N				/* The new current delayed list is empty.  Set
N				xNextTaskUnblockTime to the maximum possible value so it is
N				extremely unlikely that the
N				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
N				there is an item in the delayed list. */
N				xNextTaskUnblockTime = portMAX_DELAY;
X				xNextTaskUnblockTime = ( portTickType ) 0xffffffff;
N			}
N			else
N			{
N				/* The new current delayed list is not empty, get the value of
N				the item at the head of the delayed list.  This is the time at
N				which the task at the head of the delayed list should be removed
N				from the Blocked state. */
N				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
X				pxTCB = ( tskTCB * ) ( (&( ( pxDelayedTaskList )->xListEnd ))->pxNext->pvOwner );
N				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
X				xNextTaskUnblockTime = ( ( &( pxTCB->xGenericListItem ) )->xItemValue );
N			}
N		}
N
N		/* See if this tick has made a timeout expire. */
N		prvCheckDelayedTasks();
X		{ portTickType xItemValue; if( xTickCount >= xNextTaskUnblockTime ) { for( ;; ) { if( ( ( pxDelayedTaskList )->uxNumberOfItems == ( unsigned long ) 0 ) != ( 0 ) ) { xNextTaskUnblockTime = ( portTickType ) 0xffffffff; break; } else { pxTCB = ( tskTCB * ) ( (&( ( pxDelayedTaskList )->xListEnd ))->pxNext->pvOwner ); xItemValue = ( ( &( pxTCB->xGenericListItem ) )->xItemValue ); if( xTickCount < xItemValue ) { xNextTaskUnblockTime = xItemValue; break; } uxListRemove( &( pxTCB->xGenericListItem ) ); if( pxTCB->xEventListItem . pvContainer != 0 ) { uxListRemove( &( pxTCB->xEventListItem ) ); }  { if( ( ( pxTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) ); } } } };
N	}
N	else
N	{
N		++uxMissedTicks;
N
N		/* The tick hook gets called at regular intervals, even if the
N		scheduler is locked. */
N		#if ( configUSE_TICK_HOOK == 1 )
X		#if ( 0 == 1 )
S		{
S			vApplicationTickHook();
S		}
N		#endif
N	}
N
N	#if ( configUSE_TICK_HOOK == 1 )
X	#if ( 0 == 1 )
S	{
S		/* Guard against the tick hook being called when the missed tick
S		count is being unwound (when the scheduler is being unlocked. */
S		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
S		{
S			vApplicationTickHook();
S		}
S	}
N	#endif /* configUSE_TICK_HOOK */
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
S	{
S	tskTCB *xTCB;
S
S		/* If xTask is NULL then we are setting our own task hook. */
S		if( xTask == NULL )
S		{
S			xTCB = ( tskTCB * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( tskTCB * ) xTask;
S		}
S
S		/* Save the hook function in the TCB.  A critical section is required as
S		the value can be accessed from an interrupt. */
S		taskENTER_CRITICAL();
S			xTCB->pxTaskTag = pxHookFunction;
S		taskEXIT_CRITICAL();
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
S	{
S	tskTCB *xTCB;
S	pdTASK_HOOK_CODE xReturn;
S
S		/* If xTask is NULL then we are setting our own task hook. */
S		if( xTask == NULL )
S		{
S			xTCB = ( tskTCB * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( tskTCB * ) xTask;
S		}
S
S		/* Save the hook function in the TCB.  A critical section is required as
S		the value can be accessed from an interrupt. */
S		taskENTER_CRITICAL();
S			xReturn = xTCB->pxTaskTag;
S		taskEXIT_CRITICAL();
S
S		return xReturn;
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
S	{
S	tskTCB *xTCB;
S	portBASE_TYPE xReturn;
S
S		/* If xTask is NULL then we are calling our own task hook. */
S		if( xTask == NULL )
S		{
S			xTCB = ( tskTCB * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( tskTCB * ) xTask;
S		}
S
S		if( xTCB->pxTaskTag != NULL )
S		{
S			xReturn = xTCB->pxTaskTag( pvParameter );
S		}
S		else
S		{
S			xReturn = pdFAIL;
S		}
S
S		return xReturn;
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
Nvoid vTaskSwitchContext( void )
N{
N	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
X	if( uxSchedulerSuspended != ( unsigned long ) ( 0 ) )
N	{
N		/* The scheduler is currently suspended - do not allow a context
N		switch. */
N		xMissedYield = pdTRUE;
X		xMissedYield = ( 1 );
N	}
N	else
N	{
N		traceTASK_SWITCHED_OUT();
X		;
N
N		#if ( configGENERATE_RUN_TIME_STATS == 1 )
X		#if ( 0 == 1 )
S		{
S				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
S					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
S				#else
S					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
S				#endif
S
S				/* Add the amount of time the task has been running to the accumulated
S				time so far.  The time the task started running was stored in
S				ulTaskSwitchedInTime.  Note that there is no overflow protection here
S				so count values are only valid until the timer overflows.  Generally
S				this will be about 1 hour assuming a 1uS timer increment. */
S				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
S				ulTaskSwitchedInTime = ulTotalRunTime;
S		}
N		#endif /* configGENERATE_RUN_TIME_STATS */
N
N		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
X		;
N		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
X		;
N
N		taskSELECT_HIGHEST_PRIORITY_TASK();
X		{ while( ( ( &( pxReadyTasksLists[ uxTopReadyPriority ] ) )->uxNumberOfItems == ( unsigned long ) 0 ) ) { ; --uxTopReadyPriority; } { xList * const pxConstList = ( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxCurrentTCB ) = ( pxConstList )->pxIndex->pvOwner; }; };
N
N		traceTASK_SWITCHED_IN();
X		;
N	}
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
N{
NportTickType xTimeToWake;
N
N	configASSERT( pxEventList );
X	;
N
N	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
N	SCHEDULER SUSPENDED. */
N
N	/* Place the event list item of the TCB in the appropriate event list.
N	This is placed in the list in priority order so the highest priority task
N	is the first to be woken by the event. */
N	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
N
N	/* We must remove ourselves from the ready list before adding ourselves
N	to the blocked list as the same list item is used for both lists.  We have
N	exclusive access to the ready lists as the scheduler is locked. */
N	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
N	{
N		/* The current task must be in a ready list, so there is no need to
N		check, and the port reset macro can be called directly. */
N		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X		;
N	}
N
N	#if ( INCLUDE_vTaskSuspend == 1 )
X	#if ( 1 == 1 )
N	{
N		if( xTicksToWait == portMAX_DELAY )
X		if( xTicksToWait == ( portTickType ) 0xffffffff )
N		{
N			/* Add ourselves to the suspended task list instead of a delayed task
N			list to ensure we are not woken by a timing event.  We will block
N			indefinitely. */
N			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
N		}
N		else
N		{
N			/* Calculate the time at which the task should be woken if the event does
N			not occur.  This may overflow but this doesn't matter. */
N			xTimeToWake = xTickCount + xTicksToWait;
N			prvAddCurrentTaskToDelayedList( xTimeToWake );
N		}
N	}
N	#else /* INCLUDE_vTaskSuspend */
S	{
S			/* Calculate the time at which the task should be woken if the event does
S			not occur.  This may overflow but this doesn't matter. */
S			xTimeToWake = xTickCount + xTicksToWait;
S			prvAddCurrentTaskToDelayedList( xTimeToWake );
S	}
N	#endif /* INCLUDE_vTaskSuspend */
N}
N/*-----------------------------------------------------------*/
N
N#if configUSE_TIMERS == 1
X#if 0 == 1
S
S	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
S	{
S	portTickType xTimeToWake;
S
S		configASSERT( pxEventList );
S
S		/* This function should not be called by application code hence the
S		'Restricted' in its name.  It is not part of the public API.  It is
S		designed for use by kernel code, and has special calling requirements -
S		it should be called from a critical section. */
S
S
S		/* Place the event list item of the TCB in the appropriate event list.
S		In this case it is assume that this is the only task that is going to
S		be waiting on this event list, so the faster vListInsertEnd() function
S		can be used in place of vListInsert. */
S		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
S
S		/* We must remove this task from the ready list before adding it to the
S		blocked list as the same list item is used for both lists.  This
S		function is called form a critical section. */
S		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
S		{
S			/* The current task must be in a ready list, so there is no need to
S			check, and the port reset macro can be called directly. */
S			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
S		}
S
S		/* Calculate the time at which the task should be woken if the event does
S		not occur.  This may overflow but this doesn't matter. */
S		xTimeToWake = xTickCount + xTicksToWait;
S
S		traceTASK_DELAY_UNTIL();
S		prvAddCurrentTaskToDelayedList( xTimeToWake );
S	}
S
N#endif /* configUSE_TIMERS */
N/*-----------------------------------------------------------*/
N
Nsigned portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
Xsigned long xTaskRemoveFromEventList( const xList * const pxEventList )
N{
NtskTCB *pxUnblockedTCB;
NportBASE_TYPE xReturn;
Xlong xReturn;
N
N	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
N	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
N
N	/* The event list is sorted in priority order, so we can remove the
N	first in the list, remove the TCB from the delayed list, and add
N	it to the ready list.
N
N	If an event is for a queue that is locked then this function will never
N	get called - the lock count on the queue will get modified instead.  This
N	means we can always expect exclusive access to the event list here.
N
N	This function assumes that a check has already been made to ensure that
N	pxEventList is not empty. */
N	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
X	pxUnblockedTCB = ( tskTCB * ) ( (&( ( pxEventList )->xListEnd ))->pxNext->pvOwner );
N	configASSERT( pxUnblockedTCB );
X	;
N	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
N
N	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
X	if( uxSchedulerSuspended == ( unsigned long ) ( 0 ) )
N	{
N		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
N		prvAddTaskToReadyQueue( pxUnblockedTCB );
X		 { if( ( ( pxUnblockedTCB )->uxPriority ) > uxTopReadyPriority ) { uxTopReadyPriority = ( ( pxUnblockedTCB )->uxPriority ); } }; vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ), &( ( pxUnblockedTCB )->xGenericListItem ) );
N	}
N	else
N	{
N		/* We cannot access the delayed or ready lists, so will hold this
N		task pending until the scheduler is resumed. */
N		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
N	}
N
N	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
N	{
N		/* Return true if the task removed from the event list has
N		a higher priority than the calling task.  This allows
N		the calling task to know if it should force a context
N		switch now. */
N		xReturn = pdTRUE;
X		xReturn = ( 1 );
N	}
N	else
N	{
N		xReturn = pdFALSE;
X		xReturn = ( 0 );
N	}
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
N{
N	configASSERT( pxTimeOut );
X	;
N	pxTimeOut->xOverflowCount = xNumOfOverflows;
N	pxTimeOut->xTimeOnEntering = xTickCount;
N}
N/*-----------------------------------------------------------*/
N
NportBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
Xlong xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
N{
NportBASE_TYPE xReturn;
Xlong xReturn;
N
N	configASSERT( pxTimeOut );
X	;
N	configASSERT( pxTicksToWait );
X	;
N
N	taskENTER_CRITICAL();
X	vPortEnterCritical();
N	{
N		#if ( INCLUDE_vTaskSuspend == 1 )
X		#if ( 1 == 1 )
N			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
N			the maximum block time then the task should block indefinitely, and
N			therefore never time out. */
N			if( *pxTicksToWait == portMAX_DELAY )
X			if( *pxTicksToWait == ( portTickType ) 0xffffffff )
N			{
N				xReturn = pdFALSE;
X				xReturn = ( 0 );
N			}
N			else /* We are not blocking indefinitely, perform the checks below. */
N		#endif
N
N		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
N		{
N			/* The tick count is greater than the time at which vTaskSetTimeout()
N			was called, but has also overflowed since vTaskSetTimeOut() was called.
N			It must have wrapped all the way around and gone past us again. This
N			passed since vTaskSetTimeout() was called. */
N			xReturn = pdTRUE;
X			xReturn = ( 1 );
N		}
N		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
N		{
N			/* Not a genuine timeout. Adjust parameters for time remaining. */
N			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
N			vTaskSetTimeOutState( pxTimeOut );
N			xReturn = pdFALSE;
X			xReturn = ( 0 );
N		}
N		else
N		{
N			xReturn = pdTRUE;
X			xReturn = ( 1 );
N		}
N	}
N	taskEXIT_CRITICAL();
X	vPortExitCritical();
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskMissedYield( void )
N{
N	xMissedYield = pdTRUE;
X	xMissedYield = ( 1 );
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
S	{
S	unsigned portBASE_TYPE uxReturn;
S	tskTCB *pxTCB;
S
S		if( xTask != NULL )
S		{
S			pxTCB = ( tskTCB * ) xTask;
S			uxReturn = pxTCB->uxTaskNumber;
S		}
S		else
S		{
S			uxReturn = 0U;
S		}
S
S		return uxReturn;
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
S	{
S	tskTCB *pxTCB;
S
S		if( xTask != NULL )
S		{
S			pxTCB = ( tskTCB * ) xTask;
S			pxTCB->uxTaskNumber = uxHandle;
S		}
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N
N/*
N * -----------------------------------------------------------
N * The Idle task.
N * ----------------------------------------------------------
N *
N * The portTASK_FUNCTION() macro is used to allow port/compiler specific
N * language extensions.  The equivalent prototype for this function is:
N *
N * void prvIdleTask( void *pvParameters );
N *
N */
Nstatic portTASK_FUNCTION( prvIdleTask, pvParameters )
Xstatic void prvIdleTask( void *pvParameters )
N{
N	/* Stop warnings. */
N	( void ) pvParameters;
N
N	for( ;; )
N	{
N		/* See if any tasks have been deleted. */
N		prvCheckTasksWaitingTermination();
N
N		#if ( configUSE_PREEMPTION == 0 )
X		#if ( 1 == 0 )
S		{
S			/* If we are not using preemption we keep forcing a task switch to
S			see if any other task has become available.  If we are using
S			preemption we don't need to do this as any task becoming available
S			will automatically get the processor anyway. */
S			taskYIELD();
S		}
N		#endif /* configUSE_PREEMPTION */
N
N		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
X		#if ( ( 1 == 1 ) && ( 1 == 1 ) )
N		{
N			/* When using preemption tasks of equal priority will be
N			timesliced.  If a task that is sharing the idle priority is ready
N			to run then the idle task should yield before the end of the
N			timeslice.
N
N			A critical region is not required here as we are just reading from
N			the list, and an occasional incorrect value will not matter.  If
N			the ready list at the idle priority contains more than one task
N			then a task other than the idle task is ready to execute. */
N			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
X			if( ( ( &( pxReadyTasksLists[ ( ( unsigned long ) 0U ) ] ) )->uxNumberOfItems ) > ( unsigned long ) 1 )
N			{
N				taskYIELD();
X				vPortYield();
N			}
N		}
N		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
N
N		#if ( configUSE_IDLE_HOOK == 1 )
X		#if ( 0 == 1 )
S		{
S			extern void vApplicationIdleHook( void );
S
S			/* Call the user defined function from within the idle task.  This
S			allows the application designer to add background functionality
S			without the overhead of a separate task.
S			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
S			CALL A FUNCTION THAT MIGHT BLOCK. */
S			vApplicationIdleHook();
S		}
N		#endif /* configUSE_IDLE_HOOK */
N
N		/* This conditional compilation should use inequality to 0, not equality
N		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
N		user defined low power mode	implementations require
N		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
N		#if ( configUSE_TICKLESS_IDLE != 0 )
X		#if ( 0 != 0 )
S		{
S		portTickType xExpectedIdleTime;
S
S			/* It is not desirable to suspend then resume the scheduler on
S			each iteration of the idle task.  Therefore, a preliminary
S			test of the expected idle time is performed without the
S			scheduler suspended.  The result here is not necessarily
S			valid. */
S			xExpectedIdleTime = prvGetExpectedIdleTime();
S
S			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
S			{
S				vTaskSuspendAll();
S				{
S					/* Now the scheduler is suspended, the expected idle
S					time can be sampled again, and this time its value can
S					be used. */
S					configASSERT( xNextTaskUnblockTime >= xTickCount );
S					xExpectedIdleTime = prvGetExpectedIdleTime();
S
S					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
S					{
S						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
S					}
S				}
S				xTaskResumeAll();
S			}
S		}
N		#endif /* configUSE_TICKLESS_IDLE */
N	}
N} /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
N/*-----------------------------------------------------------*/
N
N#if configUSE_TICKLESS_IDLE != 0
X#if 0 != 0
S
S	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
S	{
S	eSleepModeStatus eReturn = eStandardSleep;
S
S		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
S		{
S			/* A task was made ready while the scheduler was suspended. */
S			eReturn = eAbortSleep;
S		}
S		else if( xMissedYield != pdFALSE )
S		{
S			/* A yield was pended while the scheduler was suspended. */
S			eReturn = eAbortSleep;
S		}
S		else
S		{
S			#if configUSE_TIMERS == 0
S			{
S				/* The idle task exists in addition to the application tasks. */
S				const unsigned portBASE_TYPE uxNonApplicationTasks = 1;
S
S				/* If timers are not being used and all the tasks are in the
S				suspended list (which might mean they have an infinite block
S				time rather than actually being suspended) then it is safe to
S				turn all clocks off and just wait for external interrupts. */
S				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
S				{
S					eReturn = eNoTasksWaitingTimeout;
S				}
S			}
S			#endif /* configUSE_TIMERS */
S		}
S
S		return eReturn;
S	}
N#endif /* configUSE_TICKLESS_IDLE */
N/*-----------------------------------------------------------*/
N
Nstatic void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
Xstatic void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned long uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
N{
N	/* Store the function name in the TCB. */
N	#if configMAX_TASK_NAME_LEN > 1
X	#if ( 16 ) > 1
N	{
N		/* Don't bring strncpy into the build unnecessarily. */
N		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
X		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) ( 16 ) );
N	}
N	#endif /* configMAX_TASK_NAME_LEN */
N	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
X	pxTCB->pcTaskName[ ( unsigned short ) ( 16 ) - ( unsigned short ) 1 ] = ( signed char ) '\0';
N
N	/* This is used as an array index so must ensure it's not too large.  First
N	remove the privilege bit if one is present. */
N	if( uxPriority >= configMAX_PRIORITIES )
X	if( uxPriority >= ( ( unsigned long ) 5 ) )
N	{
N		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
X		uxPriority = ( ( unsigned long ) 5 ) - ( unsigned long ) 1U;
N	}
N
N	pxTCB->uxPriority = uxPriority;
N	#if ( configUSE_MUTEXES == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->uxBasePriority = uxPriority;
S	}
N	#endif /* configUSE_MUTEXES */
N
N	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
N	vListInitialiseItem( &( pxTCB->xEventListItem ) );
N
N	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
N	back to	the containing TCB from a generic item in a list. */
N	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
X	( &( pxTCB->xGenericListItem ) )->pvOwner = ( void * ) ( pxTCB );
N
N	/* Event lists are always in priority order. */
N	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
X	( &( pxTCB->xEventListItem ) )->xItemValue = ( ( ( unsigned long ) 5 ) - ( portTickType ) uxPriority );
N	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
X	( &( pxTCB->xEventListItem ) )->pvOwner = ( void * ) ( pxTCB );
N
N	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
S	}
N	#endif /* portCRITICAL_NESTING_IN_TCB */
N
N	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->pxTaskTag = NULL;
S	}
N	#endif /* configUSE_APPLICATION_TASK_TAG */
N
N	#if ( configGENERATE_RUN_TIME_STATS == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->ulRunTimeCounter = 0UL;
S	}
N	#endif /* configGENERATE_RUN_TIME_STATS */
N
N	#if ( portUSING_MPU_WRAPPERS == 1 )
X	#if ( 0 == 1 )
S	{
S		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
S	}
N	#else /* portUSING_MPU_WRAPPERS */
N	{
N		( void ) xRegions;
N		( void ) usStackDepth;
N	}
N	#endif /* portUSING_MPU_WRAPPERS */
N}
N/*-----------------------------------------------------------*/
N
N#if ( portUSING_MPU_WRAPPERS == 1 )
X#if ( 0 == 1 )
S
S	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
S	{
S	tskTCB *pxTCB;
S
S		if( xTaskToModify == pxCurrentTCB )
S		{
S			xTaskToModify = NULL;
S		}
S
S		/* If null is passed in here then we are deleting ourselves. */
S		pxTCB = prvGetTCBFromHandle( xTaskToModify );
S
S        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
S	}
S
N#endif /* portUSING_MPU_WRAPPERS */
N/*-----------------------------------------------------------*/
N
Nstatic void prvInitialiseTaskLists( void )
N{
Nunsigned portBASE_TYPE uxPriority;
Xunsigned long uxPriority;
N
N	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
X	for( uxPriority = ( unsigned long ) 0U; uxPriority < ( ( unsigned long ) 5 ); uxPriority++ )
N	{
N		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
N	}
N
N	vListInitialise( ( xList * ) &xDelayedTaskList1 );
N	vListInitialise( ( xList * ) &xDelayedTaskList2 );
N	vListInitialise( ( xList * ) &xPendingReadyList );
N
N	#if ( INCLUDE_vTaskDelete == 1 )
X	#if ( 1 == 1 )
N	{
N		vListInitialise( ( xList * ) &xTasksWaitingTermination );
N	}
N	#endif /* INCLUDE_vTaskDelete */
N
N	#if ( INCLUDE_vTaskSuspend == 1 )
X	#if ( 1 == 1 )
N	{
N		vListInitialise( ( xList * ) &xSuspendedTaskList );
N	}
N	#endif /* INCLUDE_vTaskSuspend */
N
N	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
N	using list2. */
N	pxDelayedTaskList = &xDelayedTaskList1;
N	pxOverflowDelayedTaskList = &xDelayedTaskList2;
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvCheckTasksWaitingTermination( void )
N{
N	#if ( INCLUDE_vTaskDelete == 1 )
X	#if ( 1 == 1 )
N	{
N		portBASE_TYPE xListIsEmpty;
X		long xListIsEmpty;
N
N		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
N		too often in the idle task. */
N		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
X		while( uxTasksDeleted > ( unsigned long ) 0U )
N		{
N			vTaskSuspendAll();
N				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
X				xListIsEmpty = ( ( &xTasksWaitingTermination )->uxNumberOfItems == ( unsigned long ) 0 );
N			xTaskResumeAll();
N
N			if( xListIsEmpty == pdFALSE )
X			if( xListIsEmpty == ( 0 ) )
N			{
N				tskTCB *pxTCB;
N
N				taskENTER_CRITICAL();
X				vPortEnterCritical();
N				{
N					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
X					pxTCB = ( tskTCB * ) ( (&( ( ( ( xList * ) &xTasksWaitingTermination ) )->xListEnd ))->pxNext->pvOwner );
N					uxListRemove( &( pxTCB->xGenericListItem ) );
N					--uxCurrentNumberOfTasks;
N					--uxTasksDeleted;
N				}
N				taskEXIT_CRITICAL();
X				vPortExitCritical();
N
N				prvDeleteTCB( pxTCB );
N			}
N		}
N	}
N	#endif /* vTaskDelete */
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
N{
N	/* The list item will be inserted in wake time order. */
N	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
X	( &( pxCurrentTCB->xGenericListItem ) )->xItemValue = ( xTimeToWake );
N
N	if( xTimeToWake < xTickCount )
N	{
N		/* Wake time has overflowed.  Place this item in the overflow list. */
N		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
N	}
N	else
N	{
N		/* The wake time has not overflowed, so we can use the current block list. */
N		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
N
N		/* If the task entering the blocked state was placed at the head of the
N		list of blocked tasks then xNextTaskUnblockTime needs to be updated
N		too. */
N		if( xTimeToWake < xNextTaskUnblockTime )
N		{
N			xNextTaskUnblockTime = xTimeToWake;
N		}
N	}
N}
N/*-----------------------------------------------------------*/
N
Nstatic tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
Xstatic tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, unsigned long *puxStackBuffer )
N{
NtskTCB *pxNewTCB;
N
N	/* Allocate space for the TCB.  Where the memory comes from depends on
N	the implementation of the port malloc function. */
N	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
N
N	if( pxNewTCB != NULL )
X	if( pxNewTCB != 0 )
N	{
N		/* Allocate space for the stack used by the task being created.
N		The base of the stack memory stored in the TCB so the task can
N		be deleted later if required. */
N		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
X		pxNewTCB->pxStack = ( unsigned long * ) ( ( ( puxStackBuffer ) == 0 ) ? ( pvPortMalloc( ( ( ( ( size_t )usStackDepth ) * sizeof( unsigned long ) ) ) ) ) : ( puxStackBuffer ) );
N
N		if( pxNewTCB->pxStack == NULL )
X		if( pxNewTCB->pxStack == 0 )
N		{
N			/* Could not allocate the stack.  Delete the allocated TCB. */
N			vPortFree( pxNewTCB );
N			pxNewTCB = NULL;
X			pxNewTCB = 0;
N		}
N		else
N		{
N			/* Just to help debugging. */
N			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
X			memset( pxNewTCB->pxStack, ( int ) ( 0xa5U ), ( size_t ) usStackDepth * sizeof( unsigned long ) );
N		}
N	}
N
N	return pxNewTCB;
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
S	{
S	volatile tskTCB *pxNextTCB, *pxFirstTCB;
S	unsigned short usStackRemaining;
S	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];
S
S		/* Write the details of all the TCB's in pxList into the buffer. */
S		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
S		do
S		{
S			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
S			#if ( portSTACK_GROWTH > 0 )
S			{
S				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
S			}
S			#else
S			{
S				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
S			}
S			#endif
S
S			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, ( unsigned int ) usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
S			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
S
S		} while( pxNextTCB != pxFirstTCB );
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*-----------------------------------------------------------*/
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTimeDiv100 )
S	{
S	volatile tskTCB *pxNextTCB, *pxFirstTCB;
S	unsigned long ulStatsAsPercentage;
S
S		/* Write the run time stats of all the TCB's in pxList into the buffer. */
S		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
S		do
S		{
S			/* Get next TCB in from the list. */
S			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
S
S			/* Divide by zero check. */
S			if( ulTotalRunTimeDiv100 > 0UL )
S			{
S				/* Has the task run at all? */
S				if( pxNextTCB->ulRunTimeCounter == 0UL )
S				{
S					/* The task has used no CPU time at all. */
S					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
S				}
S				else
S				{
S					/* What percentage of the total run time has the task used?
S					This will always be rounded down to the nearest integer.
S					ulTotalRunTimeDiv100 has already been divided by 100. */
S					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTimeDiv100;
S
S					if( ulStatsAsPercentage > 0UL )
S					{
S						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
S						{
S							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTCB->ulRunTimeCounter, ulStatsAsPercentage );
S						}
S						#else
S						{
S							/* sizeof( int ) == sizeof( long ) so a smaller
S							printf() library can be used. */
S							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
S						}
S						#endif
S					}
S					else
S					{
S						/* If the percentage is zero here then the task has
S						consumed less than 1% of the total run time. */
S						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
S						{
S							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB->ulRunTimeCounter );
S						}
S						#else
S						{
S							/* sizeof( int ) == sizeof( long ) so a smaller
S							printf() library can be used. */
S							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter );
S						}
S						#endif
S					}
S				}
S
S				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
S			}
S
S		} while( pxNextTCB != pxFirstTCB );
S	}
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N/*-----------------------------------------------------------*/
N
N#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
S	{
S	register unsigned short usCount = 0U;
S
S		while( *pucStackByte == tskSTACK_FILL_BYTE )
S		{
S			pucStackByte -= portSTACK_GROWTH;
S			usCount++;
S		}
S
S		usCount /= sizeof( portSTACK_TYPE );
S
S		return usCount;
S	}
S
N#endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
X#if ( 0 == 1 )
S
S	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
S	{
S	tskTCB *pxTCB;
S	unsigned char *pcEndOfStack;
S	unsigned portBASE_TYPE uxReturn;
S
S		pxTCB = prvGetTCBFromHandle( xTask );
S
S		#if portSTACK_GROWTH < 0
S		{
S			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
S		}
S		#else
S		{
S			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
S		}
S		#endif
S
S		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
S
S		return uxReturn;
S	}
S
N#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	static void prvDeleteTCB( tskTCB *pxTCB )
N	{
N		/* This call is required specifically for the TriCore port.  It must be
N		above the vPortFree() calls.  The call is also used by ports/demos that
N		want to allocate and clean RAM statically. */
N		portCLEAN_UP_TCB( pxTCB );
X		( void ) pxTCB;
N
N		/* Free up the memory allocated by the scheduler for the task.  It is up to
N		the task to free any memory allocated at the application level. */
N		vPortFreeAligned( pxTCB->pxStack );
X		vPortFree( pxTCB->pxStack );
N		vPortFree( pxTCB );
N	}
N
N#endif /* INCLUDE_vTaskDelete */
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	xTaskHandle xTaskGetCurrentTaskHandle( void )
S	{
S	xTaskHandle xReturn;
S
S		/* A critical section is not required as this is not called from
S		an interrupt and the current TCB will always be the same for any
S		individual execution thread. */
S		xReturn = pxCurrentTCB;
S
S		return xReturn;
S	}
S
N#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	portBASE_TYPE xTaskGetSchedulerState( void )
S	{
S	portBASE_TYPE xReturn;
S
S		if( xSchedulerRunning == pdFALSE )
S		{
S			xReturn = taskSCHEDULER_NOT_STARTED;
S		}
S		else
S		{
S			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
S			{
S				xReturn = taskSCHEDULER_RUNNING;
S			}
S			else
S			{
S				xReturn = taskSCHEDULER_SUSPENDED;
S			}
S		}
S
S		return xReturn;
S	}
S
N#endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_MUTEXES == 1 )
X#if ( 0 == 1 )
S
S	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
S	{
S	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
S
S		/* If the mutex was given back by an interrupt while the queue was
S		locked then the mutex holder might now be NULL. */
S		if( pxMutexHolder != NULL )
S		{
S			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
S			{
S				/* Adjust the mutex holder state to account for its new priority. */
S				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
S
S				/* If the task being modified is in the ready state it will need to
S				be moved into a new list. */
S				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
S				{
S					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
S					{
S						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
S					}
S
S					/* Inherit the priority before being moved into the new list. */
S					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
S					prvAddTaskToReadyQueue( pxTCB );
S				}
S				else
S				{
S					/* Just inherit the priority. */
S					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
S				}
S
S				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
S			}
S		}
S	}
S
N#endif /* configUSE_MUTEXES */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_MUTEXES == 1 )
X#if ( 0 == 1 )
S
S	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
S	{
S	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
S
S		if( pxMutexHolder != NULL )
S		{
S			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
S			{
S				/* We must be the running task to be able to give the mutex back.
S				Remove ourselves from the ready list we currently appear in. */
S				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
S				{
S					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
S				}
S
S				/* Disinherit the priority before adding the task into the new
S				ready list. */
S				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
S				pxTCB->uxPriority = pxTCB->uxBasePriority;
S				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
S				prvAddTaskToReadyQueue( pxTCB );
S			}
S		}
S	}
S
N#endif /* configUSE_MUTEXES */
N/*-----------------------------------------------------------*/
N
N#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X#if ( 0 == 1 )
S
S	void vTaskEnterCritical( void )
S	{
S		portDISABLE_INTERRUPTS();
S
S		if( xSchedulerRunning != pdFALSE )
S		{
S			( pxCurrentTCB->uxCriticalNesting )++;
S		}
S	}
S
N#endif /* portCRITICAL_NESTING_IN_TCB */
N/*-----------------------------------------------------------*/
N
N#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X#if ( 0 == 1 )
S
S	void vTaskExitCritical( void )
S	{
S		if( xSchedulerRunning != pdFALSE )
S		{
S			if( pxCurrentTCB->uxCriticalNesting > 0U )
S			{
S				( pxCurrentTCB->uxCriticalNesting )--;
S
S				if( pxCurrentTCB->uxCriticalNesting == 0U )
S				{
S					portENABLE_INTERRUPTS();
S				}
S			}
S		}
S	}
S
N#endif /* portCRITICAL_NESTING_IN_TCB */
N/*-----------------------------------------------------------*/
N
N
N
N
