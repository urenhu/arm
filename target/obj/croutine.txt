; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\croutine.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\croutine.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\croutine.crf ..\free_rtos\croutine.c]
                          THUMB

                          AREA ||i.prvCheckDelayedList||, CODE, READONLY, ALIGN=2

                  prvCheckDelayedList PROC
;;;263    
;;;264    static void prvCheckDelayedList( void )
000000  b570              PUSH     {r4-r6,lr}
;;;265    {
;;;266    corCRCB *pxCRCB;
;;;267    
;;;268    	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
000002  f7fffffe          BL       xTaskGetTickCount
000006  4d1d              LDR      r5,|L1.124|
000008  68e9              LDR      r1,[r5,#0xc]  ; xLastTickCount
00000a  1a40              SUBS     r0,r0,r1
;;;269    	while( xPassedTicks )
00000c  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
00000e  e02f              B        |L1.112|
                  |L1.16|
;;;270    	{
;;;271    		xCoRoutineTickCount++;
000010  68a9              LDR      r1,[r5,#8]  ; xCoRoutineTickCount
000012  f1a00001          SUB      r0,r0,#1
000016  1c49              ADDS     r1,r1,#1
;;;272    		xPassedTicks--;
;;;273    
;;;274    		/* If the tick count has overflowed we need to swap the ready lists. */
;;;275    		if( xCoRoutineTickCount == 0 )
000018  60a9              STR      r1,[r5,#8]  ; xCoRoutineTickCount
00001a  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
00001c  d103              BNE      |L1.38|
00001e  e9d51005          LDRD     r1,r0,[r5,#0x14]
000022  e9c50105          STRD     r0,r1,[r5,#0x14]
                  |L1.38|
;;;276    		{
;;;277    			xList * pxTemp;
;;;278    
;;;279    			/* Tick count has overflowed so we need to swap the delay lists.  If there are
;;;280    			any items in pxDelayedCoRoutineList here then there is an error! */
;;;281    			pxTemp = pxDelayedCoRoutineList;
;;;282    			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
;;;283    			pxOverflowDelayedCoRoutineList = pxTemp;
;;;284    		}
;;;285    
;;;286    		/* See if this tick has made a timeout expire. */
;;;287    		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
;;;288    		{
;;;289    			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
;;;290    
;;;291    			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
;;;292    			{
;;;293    				/* Timeout not yet expired. */
;;;294    				break;
;;;295    			}
;;;296    
;;;297    			portDISABLE_INTERRUPTS();
;;;298    			{
;;;299    				/* The event could have occurred just before this critical
;;;300    				section.  If this is the case then the generic list item will
;;;301    				have been moved to the pending ready list and the following
;;;302    				line is still valid.  Also the pvContainer parameter will have
;;;303    				been set to NULL so the following lines are also valid. */
;;;304    				uxListRemove( &( pxCRCB->xGenericListItem ) );
;;;305    
;;;306    				/* Is the co-routine waiting on an event also? */
;;;307    				if( pxCRCB->xEventListItem.pvContainer )
;;;308    				{
;;;309    					uxListRemove( &( pxCRCB->xEventListItem ) );
;;;310    				}
;;;311    			}
;;;312    			portENABLE_INTERRUPTS();
;;;313    
;;;314    			prvAddCoRoutineToReadyQueue( pxCRCB );
000026  4e16              LDR      r6,|L1.128|
                  |L1.40|
000028  6968              LDR      r0,[r5,#0x14]         ;287  ; pxDelayedCoRoutineList
00002a  6801              LDR      r1,[r0,#0]            ;287
00002c  b301              CBZ      r1,|L1.112|
00002e  68c0              LDR      r0,[r0,#0xc]          ;289
000030  68c4              LDR      r4,[r0,#0xc]          ;289
000032  68a8              LDR      r0,[r5,#8]            ;291  ; xCoRoutineTickCount
000034  6861              LDR      r1,[r4,#4]            ;291
000036  4281              CMP      r1,r0                 ;291
000038  d81a              BHI      |L1.112|
00003a  f7fffffe          BL       ulPortSetInterruptMask
00003e  1d20              ADDS     r0,r4,#4              ;304
000040  f7fffffe          BL       uxListRemove
000044  6aa0              LDR      r0,[r4,#0x28]         ;307
000046  b118              CBZ      r0,|L1.80|
000048  f1040018          ADD      r0,r4,#0x18           ;309
00004c  f7fffffe          BL       uxListRemove
                  |L1.80|
000050  2000              MOVS     r0,#0                 ;312
000052  f7fffffe          BL       vPortClearInterruptMask
000056  6ae0              LDR      r0,[r4,#0x2c]
000058  6869              LDR      r1,[r5,#4]  ; uxTopCoRoutineReadyPriority
00005a  4288              CMP      r0,r1
00005c  d900              BLS      |L1.96|
00005e  6068              STR      r0,[r5,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.96|
000060  eb000080          ADD      r0,r0,r0,LSL #2
000064  eb060080          ADD      r0,r6,r0,LSL #2
000068  1d21              ADDS     r1,r4,#4
00006a  f7fffffe          BL       vListInsertEnd
00006e  e7db              B        |L1.40|
                  |L1.112|
000070  6928              LDR      r0,[r5,#0x10]         ;269  ; xPassedTicks
000072  2800              CMP      r0,#0                 ;269
000074  d1cc              BNE      |L1.16|
;;;315    		}
;;;316    	}
;;;317    
;;;318    	xLastTickCount = xCoRoutineTickCount;
000076  68a8              LDR      r0,[r5,#8]  ; xCoRoutineTickCount
000078  60e8              STR      r0,[r5,#0xc]  ; xLastTickCount
;;;319    }
00007a  bd70              POP      {r4-r6,pc}
;;;320    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      ||.bss||

                          AREA ||i.vCoRoutineAddToDelayedList||, CODE, READONLY, ALIGN=2

                  vCoRoutineAddToDelayedList PROC
;;;202    
;;;203    void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;204    {
;;;205    portTickType xTimeToWake;
;;;206    
;;;207    	/* Calculate the time to wake - this may overflow but this is
;;;208    	not a problem. */
;;;209    	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
000002  4c0e              LDR      r4,|L2.60|
000004  460e              MOV      r6,r1                 ;204
000006  68a1              LDR      r1,[r4,#8]  ; xCoRoutineTickCount
000008  180d              ADDS     r5,r1,r0
;;;210    
;;;211    	/* We must remove ourselves from the ready list before adding
;;;212    	ourselves to the blocked list as the same list item is used for
;;;213    	both lists. */
;;;214    	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
00000a  6820              LDR      r0,[r4,#0]  ; pxCurrentCoRoutine
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       uxListRemove
;;;215    
;;;216    	/* The list item will be inserted in wake time order. */
;;;217    	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
000012  6821              LDR      r1,[r4,#0]  ; pxCurrentCoRoutine
;;;218    
;;;219    	if( xTimeToWake < xCoRoutineTickCount )
000014  604d              STR      r5,[r1,#4]
000016  68a0              LDR      r0,[r4,#8]  ; xCoRoutineTickCount
000018  4285              CMP      r5,r0
00001a  d201              BCS      |L2.32|
;;;220    	{
;;;221    		/* Wake time has overflowed.  Place this item in the
;;;222    		overflow list. */
;;;223    		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
00001c  69a0              LDR      r0,[r4,#0x18]  ; pxOverflowDelayedCoRoutineList
00001e  e000              B        |L2.34|
                  |L2.32|
;;;224    	}
;;;225    	else
;;;226    	{
;;;227    		/* The wake time has not overflowed, so we can use the
;;;228    		current block list. */
;;;229    		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
000020  6960              LDR      r0,[r4,#0x14]  ; pxDelayedCoRoutineList
                  |L2.34|
000022  1d09              ADDS     r1,r1,#4
000024  f7fffffe          BL       vListInsert
000028  2e00              CMP      r6,#0
00002a  d006              BEQ      |L2.58|
;;;230    	}
;;;231    
;;;232    	if( pxEventList )
;;;233    	{
;;;234    		/* Also add the co-routine to an event list.  If this is done then the
;;;235    		function must be called with interrupts disabled. */
;;;236    		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
00002c  6821              LDR      r1,[r4,#0]  ; pxCurrentCoRoutine
00002e  4630              MOV      r0,r6
000030  e8bd4070          POP      {r4-r6,lr}
000034  3118              ADDS     r1,r1,#0x18
000036  f7ffbffe          B.W      vListInsert
                  |L2.58|
;;;237    	}
;;;238    }
00003a  bd70              POP      {r4-r6,pc}
;;;239    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.vCoRoutineSchedule||, CODE, READONLY, ALIGN=2

                  vCoRoutineSchedule PROC
;;;321    
;;;322    void vCoRoutineSchedule( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;323    {
000004  4f23              LDR      r7,|L3.148|
000006  4c24              LDR      r4,|L3.152|
000008  f1a70650          SUB      r6,r7,#0x50
00000c  e01a              B        |L3.68|
00000e  bf00              NOP      
                  |L3.16|
000010  f7fffffe          BL       ulPortSetInterruptMask
000014  68f8              LDR      r0,[r7,#0xc]  ; xPendingReadyCoRoutineList
000016  68c5              LDR      r5,[r0,#0xc]
000018  f1050018          ADD      r0,r5,#0x18
00001c  f7fffffe          BL       uxListRemove
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       vPortClearInterruptMask
000026  1d28              ADDS     r0,r5,#4
000028  f7fffffe          BL       uxListRemove
00002c  6ae8              LDR      r0,[r5,#0x2c]
00002e  6861              LDR      r1,[r4,#4]  ; uxTopCoRoutineReadyPriority
000030  4288              CMP      r0,r1
000032  d900              BLS      |L3.54|
000034  6060              STR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
                  |L3.54|
000036  eb000080          ADD      r0,r0,r0,LSL #2
00003a  eb060080          ADD      r0,r6,r0,LSL #2
00003e  1d29              ADDS     r1,r5,#4
000040  f7fffffe          BL       vListInsertEnd
                  |L3.68|
000044  6838              LDR      r0,[r7,#0]  ; xPendingReadyCoRoutineList
000046  2800              CMP      r0,#0
000048  d1e2              BNE      |L3.16|
;;;324    	/* See if any co-routines readied by events need moving to the ready lists. */
;;;325    	prvCheckPendingReadyList();
;;;326    
;;;327    	/* See if any delayed co-routines have timed out. */
;;;328    	prvCheckDelayedList();
00004a  f7fffffe          BL       prvCheckDelayedList
;;;329    
;;;330    	/* Find the highest priority queue that contains ready co-routines. */
;;;331    	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
00004e  6860              LDR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
000050  e003              B        |L3.90|
                  |L3.82|
;;;332    	{
;;;333    		if( uxTopCoRoutineReadyPriority == 0 )
000052  2800              CMP      r0,#0
000054  d01b              BEQ      |L3.142|
000056  1e40              SUBS     r0,r0,#1
;;;334    		{
;;;335    			/* No more co-routines to check. */
;;;336    			return;
;;;337    		}
;;;338    		--uxTopCoRoutineReadyPriority;
000058  6060              STR      r0,[r4,#4]  ; uxTopCoRoutineReadyPriority
                  |L3.90|
00005a  eb000180          ADD      r1,r0,r0,LSL #2       ;331
00005e  f8561021          LDR      r1,[r6,r1,LSL #2]     ;331
000062  2900              CMP      r1,#0                 ;331
000064  d0f5              BEQ      |L3.82|
;;;339    	}
;;;340    
;;;341    	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
;;;342    	 of the	same priority get an equal share of the processor time. */
;;;343    	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
000066  eb000080          ADD      r0,r0,r0,LSL #2
00006a  eb060080          ADD      r0,r6,r0,LSL #2
00006e  6841              LDR      r1,[r0,#4]
000070  6849              LDR      r1,[r1,#4]
000072  f1000208          ADD      r2,r0,#8
000076  6041              STR      r1,[r0,#4]
000078  4291              CMP      r1,r2
00007a  d101              BNE      |L3.128|
00007c  6849              LDR      r1,[r1,#4]
00007e  6041              STR      r1,[r0,#4]
                  |L3.128|
000080  68c8              LDR      r0,[r1,#0xc]
;;;344    
;;;345    	/* Call the co-routine. */
;;;346    	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
000082  6020              STR      r0,[r4,#0]  ; pxCurrentCoRoutine
000084  6802              LDR      r2,[r0,#0]
000086  6b01              LDR      r1,[r0,#0x30]
000088  e8bd41f0          POP      {r4-r8,lr}
00008c  4710              BX       r2
                  |L3.142|
;;;347    
;;;348    	return;
;;;349    }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;350    /*-----------------------------------------------------------*/
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      ||.bss||+0x50
                  |L3.152|
                          DCD      ||.data||

                          AREA ||i.xCoRoutineCreate||, CODE, READONLY, ALIGN=2

                  xCoRoutineCreate PROC
;;;145    
;;;146    signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;147    {
000004  4682              MOV      r10,r0
000006  4691              MOV      r9,r2
000008  460f              MOV      r7,r1
;;;148    signed portBASE_TYPE xReturn;
;;;149    corCRCB *pxCoRoutine;
;;;150    
;;;151    	/* Allocate the memory that will store the co-routine control block. */
;;;152    	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       pvPortMalloc
000010  0004              MOVS     r4,r0
;;;153    	if( pxCoRoutine )
000012  d045              BEQ      |L4.160|
;;;154    	{
;;;155    		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
;;;156    		be created and the co-routine data structures need initialising. */
;;;157    		if( pxCurrentCoRoutine == NULL )
000014  4d24              LDR      r5,|L4.168|
000016  f8df8094          LDR      r8,|L4.172|
00001a  6828              LDR      r0,[r5,#0]  ; pxCurrentCoRoutine
00001c  b9e0              CBNZ     r0,|L4.88|
00001e  2600              MOVS     r6,#0
000020  f8c54000          STR.W    r4,[r5,#0]
                  |L4.36|
000024  eb060186          ADD      r1,r6,r6,LSL #2
000028  eb080081          ADD      r0,r8,r1,LSL #2
00002c  f7fffffe          BL       vListInitialise
000030  1c76              ADDS     r6,r6,#1
000032  2e02              CMP      r6,#2
000034  d3f6              BCC      |L4.36|
000036  481d              LDR      r0,|L4.172|
000038  3028              ADDS     r0,r0,#0x28
00003a  f7fffffe          BL       vListInitialise
00003e  481b              LDR      r0,|L4.172|
000040  303c              ADDS     r0,r0,#0x3c
000042  f7fffffe          BL       vListInitialise
000046  4819              LDR      r0,|L4.172|
000048  3050              ADDS     r0,r0,#0x50
00004a  f7fffffe          BL       vListInitialise
00004e  4817              LDR      r0,|L4.172|
000050  3028              ADDS     r0,r0,#0x28
000052  6168              STR      r0,[r5,#0x14]  ; pxDelayedCoRoutineList
000054  3014              ADDS     r0,r0,#0x14
000056  61a8              STR      r0,[r5,#0x18]  ; pxOverflowDelayedCoRoutineList
                  |L4.88|
;;;158    		{
;;;159    			pxCurrentCoRoutine = pxCoRoutine;
;;;160    			prvInitialiseCoRoutineLists();
;;;161    		}
;;;162    
;;;163    		/* Check the priority is within limits. */
;;;164    		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
000058  2f02              CMP      r7,#2
00005a  d300              BCC      |L4.94|
;;;165    		{
;;;166    			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
00005c  2701              MOVS     r7,#1
                  |L4.94|
;;;167    		}
;;;168    
;;;169    		/* Fill out the co-routine control block from the function parameters. */
;;;170    		pxCoRoutine->uxState = corINITIAL_STATE;
00005e  2000              MOVS     r0,#0
000060  86a0              STRH     r0,[r4,#0x34]
;;;171    		pxCoRoutine->uxPriority = uxPriority;
;;;172    		pxCoRoutine->uxIndex = uxIndex;
;;;173    		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
;;;174    
;;;175    		/* Initialise all the other co-routine control block parameters. */
;;;176    		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
000062  f8c4a000          STR      r10,[r4,#0]
000066  e9c4790b          STRD     r7,r9,[r4,#0x2c]
00006a  1d20              ADDS     r0,r4,#4
00006c  f7fffffe          BL       vListInitialiseItem
;;;177    		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
000070  f1040018          ADD      r0,r4,#0x18
000074  f7fffffe          BL       vListInitialiseItem
;;;178    
;;;179    		/* Set the co-routine control block as a link back from the xListItem.
;;;180    		This is so we can get back to the containing CRCB from a generic item
;;;181    		in a list. */
;;;182    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
000078  6124              STR      r4,[r4,#0x10]
;;;183    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
00007a  6264              STR      r4,[r4,#0x24]
;;;184    
;;;185    		/* Event lists are always in priority order. */
;;;186    		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
00007c  f1c70005          RSB      r0,r7,#5
;;;187    
;;;188    		/* Now the co-routine has been initialised it can be added to the ready
;;;189    		list at the correct priority. */
;;;190    		prvAddCoRoutineToReadyQueue( pxCoRoutine );
000080  61a0              STR      r0,[r4,#0x18]
000082  6ae0              LDR      r0,[r4,#0x2c]
000084  6869              LDR      r1,[r5,#4]  ; uxTopCoRoutineReadyPriority
000086  4288              CMP      r0,r1
000088  d900              BLS      |L4.140|
00008a  6068              STR      r0,[r5,#4]  ; uxTopCoRoutineReadyPriority
                  |L4.140|
00008c  eb000180          ADD      r1,r0,r0,LSL #2
000090  eb080081          ADD      r0,r8,r1,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
;;;191    
;;;192    		xReturn = pdPASS;
00009a  2001              MOVS     r0,#1
                  |L4.156|
;;;193    	}
;;;194    	else
;;;195    	{
;;;196    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;197    	}
;;;198    
;;;199    	return xReturn;
;;;200    }
00009c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.160|
0000a0  f04f30ff          MOV      r0,#0xffffffff        ;196
0000a4  e7fa              B        |L4.156|
;;;201    /*-----------------------------------------------------------*/
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      ||.data||
                  |L4.172|
                          DCD      ||.bss||

                          AREA ||i.xCoRoutineRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xCoRoutineRemoveFromEventList PROC
;;;371    
;;;372    signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;373    {
;;;374    corCRCB *pxUnblockedCRCB;
;;;375    signed portBASE_TYPE xReturn;
;;;376    
;;;377    	/* This function is called from within an interrupt.  It can only access
;;;378    	event lists and the pending ready list.  This function assumes that a
;;;379    	check has already been made to ensure pxEventList is not empty. */
;;;380    	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000002  68c0              LDR      r0,[r0,#0xc]
000004  68c4              LDR      r4,[r0,#0xc]
;;;381    	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
000006  f1040018          ADD      r0,r4,#0x18
00000a  4605              MOV      r5,r0
00000c  f7fffffe          BL       uxListRemove
000010  4629              MOV      r1,r5
;;;382    	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
000012  4806              LDR      r0,|L5.44|
000014  f7fffffe          BL       vListInsertEnd
;;;383    
;;;384    	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
000018  4905              LDR      r1,|L5.48|
00001a  6ae0              LDR      r0,[r4,#0x2c]
00001c  6809              LDR      r1,[r1,#0]  ; pxCurrentCoRoutine
00001e  6ac9              LDR      r1,[r1,#0x2c]
000020  4288              CMP      r0,r1
000022  d301              BCC      |L5.40|
;;;385    	{
;;;386    		xReturn = pdTRUE;
000024  2001              MOVS     r0,#1
;;;387    	}
;;;388    	else
;;;389    	{
;;;390    		xReturn = pdFALSE;
;;;391    	}
;;;392    
;;;393    	return xReturn;
;;;394    }
000026  bd70              POP      {r4-r6,pc}
                  |L5.40|
000028  2000              MOVS     r0,#0                 ;390
00002a  bd70              POP      {r4-r6,pc}
;;;395    
                          ENDP

                  |L5.44|
                          DCD      ||.bss||+0x50
                  |L5.48|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyCoRoutineLists
                          %        40
                  xDelayedCoRoutineList1
                          %        20
                  xDelayedCoRoutineList2
                          %        20
                  xPendingReadyCoRoutineList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentCoRoutine
                          DCD      0x00000000
                  uxTopCoRoutineReadyPriority
                          DCD      0x00000000
                  xCoRoutineTickCount
                          DCD      0x00000000
                  xLastTickCount
                          DCD      0x00000000
                  xPassedTicks
                          DCD      0x00000000
                  pxDelayedCoRoutineList
                          DCD      0x00000000
                  pxOverflowDelayedCoRoutineList
                          DCD      0x00000000
