; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\heap_2.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\heap_2.crf ..\free_rtos\heap_2.c]
                          THUMB

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;153    
;;;154    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;155    {
000004  4604              MOV      r4,r0
;;;156    xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;157    static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
;;;158    void *pvReturn = NULL;
000006  2500              MOVS     r5,#0
;;;159    
;;;160    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;161    	{
;;;162    		/* If this is the first call to malloc then the heap will require
;;;163    		initialisation to setup the list of free blocks. */
;;;164    		if( xHeapHasBeenInitialised == pdFALSE )
00000c  4a27              LDR      r2,|L1.172|
00000e  f1020108          ADD      r1,r2,#8
000012  6850              LDR      r0,[r2,#4]  ; xHeapHasBeenInitialised
000014  f1010308          ADD      r3,r1,#8
000018  b968              CBNZ     r0,|L1.54|
00001a  4825              LDR      r0,|L1.176|
00001c  2700              MOVS     r7,#0
00001e  f0200007          BIC      r0,r0,#7
000022  e9c10700          STRD     r0,r7,[r1,#0]
000026  f24436f8          MOV      r6,#0x43f8
00002a  e9c37600          STRD     r7,r6,[r3,#0]
00002e  e9c03600          STRD     r3,r6,[r0,#0]
;;;165    		{
;;;166    			prvHeapInit();
;;;167    			xHeapHasBeenInitialised = pdTRUE;
000032  2001              MOVS     r0,#1
000034  6050              STR      r0,[r2,#4]  ; xHeapHasBeenInitialised
                  |L1.54|
;;;168    		}
;;;169    
;;;170    		/* The wanted size is increased so it can contain a xBlockLink
;;;171    		structure in addition to the requested amount of bytes. */
;;;172    		if( xWantedSize > 0 )
;;;173    		{
;;;174    			xWantedSize += heapSTRUCT_SIZE;
;;;175    
;;;176    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;177    			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
;;;178    			{
;;;179    				/* Byte alignment required. */
;;;180    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
;;;181    			}
;;;182    		}
;;;183    
;;;184    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
000036  f24430f7          MOV      r0,#0x43f7
00003a  b394              CBZ      r4,|L1.162|
00003c  3410              ADDS     r4,r4,#0x10           ;172
00003e  0766              LSLS     r6,r4,#29             ;177
000040  d004              BEQ      |L1.76|
000042  f0040607          AND      r6,r4,#7              ;180
000046  f1c60608          RSB      r6,r6,#8              ;180
00004a  4434              ADD      r4,r4,r6              ;180
                  |L1.76|
00004c  1e66              SUBS     r6,r4,#1
00004e  4286              CMP      r6,r0
000050  d227              BCS      |L1.162|
;;;185    		{
;;;186    			/* Blocks are stored in byte order - traverse the list from the start
;;;187    			(smallest) block until one of adequate size is found. */
;;;188    			pxPreviousBlock = &xStart;
000052  4816              LDR      r0,|L1.172|
;;;189    			pxBlock = xStart.pxNextFreeBlock;
000054  6809              LDR      r1,[r1,#0]  ; xStart
000056  3008              ADDS     r0,r0,#8              ;188
;;;190    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000058  e001              B        |L1.94|
                  |L1.90|
;;;191    			{
;;;192    				pxPreviousBlock = pxBlock;
00005a  4608              MOV      r0,r1
00005c  4631              MOV      r1,r6
                  |L1.94|
00005e  684e              LDR      r6,[r1,#4]            ;190
000060  42a6              CMP      r6,r4                 ;190
000062  d202              BCS      |L1.106|
000064  680e              LDR      r6,[r1,#0]            ;190
000066  2e00              CMP      r6,#0                 ;190
000068  d1f7              BNE      |L1.90|
                  |L1.106|
;;;193    				pxBlock = pxBlock->pxNextFreeBlock;
;;;194    			}
;;;195    
;;;196    			/* If we found the end marker then a block of adequate size was not found. */
;;;197    			if( pxBlock != &xEnd )
00006a  4299              CMP      r1,r3
00006c  d019              BEQ      |L1.162|
;;;198    			{
;;;199    				/* Return the memory space - jumping over the xBlockLink structure
;;;200    				at its start. */
;;;201    				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
;;;202    
;;;203    				/* This block is being returned for use so must be taken out of the
;;;204    				list of free blocks. */
;;;205    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00006e  6805              LDR      r5,[r0,#0]
000070  680b              LDR      r3,[r1,#0]
;;;206    
;;;207    				/* If the block is larger than required it can be split into two. */
;;;208    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000072  6003              STR      r3,[r0,#0]
000074  6848              LDR      r0,[r1,#4]
000076  3510              ADDS     r5,r5,#0x10
000078  1b00              SUBS     r0,r0,r4
00007a  2820              CMP      r0,#0x20
00007c  d90d              BLS      |L1.154|
;;;209    				{
;;;210    					/* This block is to be split into two.  Create a new block
;;;211    					following the number of bytes requested. The void cast is
;;;212    					used to prevent byte alignment warnings from the compiler. */
;;;213    					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
00007e  190b              ADDS     r3,r1,r4
;;;214    
;;;215    					/* Calculate the sizes of two blocks split from the single
;;;216    					block. */
;;;217    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;218    					pxBlock->xBlockSize = xWantedSize;
000080  6058              STR      r0,[r3,#4]
;;;219    
;;;220    					/* Insert the new block into the list of free blocks. */
;;;221    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
000082  480a              LDR      r0,|L1.172|
000084  604c              STR      r4,[r1,#4]
000086  3008              ADDS     r0,r0,#8
000088  685e              LDR      r6,[r3,#4]
00008a  e000              B        |L1.142|
                  |L1.140|
00008c  4620              MOV      r0,r4
                  |L1.142|
00008e  6804              LDR      r4,[r0,#0]
000090  6867              LDR      r7,[r4,#4]
000092  42b7              CMP      r7,r6
000094  d3fa              BCC      |L1.140|
000096  601c              STR      r4,[r3,#0]
000098  6003              STR      r3,[r0,#0]
                  |L1.154|
;;;222    				}
;;;223    
;;;224    				xFreeBytesRemaining -= pxBlock->xBlockSize;
00009a  6848              LDR      r0,[r1,#4]
00009c  6811              LDR      r1,[r2,#0]  ; xFreeBytesRemaining
00009e  1a08              SUBS     r0,r1,r0
0000a0  6010              STR      r0,[r2,#0]  ; xFreeBytesRemaining
                  |L1.162|
;;;225    			}
;;;226    		}
;;;227    	}
;;;228    	xTaskResumeAll();
0000a2  f7fffffe          BL       xTaskResumeAll
;;;229    
;;;230    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;231    	{
;;;232    		if( pvReturn == NULL )
;;;233    		{
;;;234    			extern void vApplicationMallocFailedHook( void );
;;;235    			vApplicationMallocFailedHook();
;;;236    		}
;;;237    	}
;;;238    	#endif
;;;239    
;;;240    	return pvReturn;
0000a6  4628              MOV      r0,r5
;;;241    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;242    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.172|
                          DCD      ||.data||
                  |L1.176|
                          DCD      ||.bss||+0x8

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;243    
;;;244    void vPortFree( void *pv )
000000  b510              PUSH     {r4,lr}
;;;245    {
000002  2800              CMP      r0,#0
000004  d017              BEQ      |L2.54|
000006  f1a00410          SUB      r4,r0,#0x10
;;;246    unsigned char *puc = ( unsigned char * ) pv;
;;;247    xBlockLink *pxLink;
;;;248    
;;;249    	if( pv != NULL )
;;;250    	{
;;;251    		/* The memory being freed will have an xBlockLink structure immediately
;;;252    		before it. */
;;;253    		puc -= heapSTRUCT_SIZE;
;;;254    
;;;255    		/* This unexpected casting is to keep some compilers from issuing 
;;;256    		byte alignment warnings. */
;;;257    		pxLink = ( void * ) puc;
;;;258    
;;;259    		vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;260    		{
;;;261    			/* Add this block to the list of free blocks. */
;;;262    			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
00000e  480a              LDR      r0,|L2.56|
000010  6861              LDR      r1,[r4,#4]
000012  e000              B        |L2.22|
                  |L2.20|
000014  4610              MOV      r0,r2
                  |L2.22|
000016  6802              LDR      r2,[r0,#0]
000018  6853              LDR      r3,[r2,#4]
00001a  428b              CMP      r3,r1
00001c  d3fa              BCC      |L2.20|
00001e  6022              STR      r2,[r4,#0]
;;;263    			xFreeBytesRemaining += pxLink->xBlockSize;
000020  6004              STR      r4,[r0,#0]
000022  4805              LDR      r0,|L2.56|
000024  6861              LDR      r1,[r4,#4]
000026  3808              SUBS     r0,r0,#8
000028  6802              LDR      r2,[r0,#0]  ; xFreeBytesRemaining
00002a  4411              ADD      r1,r1,r2
;;;264    		}
;;;265    		xTaskResumeAll();
00002c  6001              STR      r1,[r0,#0]  ; xFreeBytesRemaining
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      xTaskResumeAll
                  |L2.54|
;;;266    	}
;;;267    }
000036  bd10              POP      {r4,pc}
;;;268    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.56|
                          DCD      ||.data||+0x8

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;275    
;;;276    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;277    {
;;;278    	/* This just exists to keep the linker quiet. */
;;;279    }
;;;280    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;269    
;;;270    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L4.8|
;;;271    {
;;;272    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;273    }
000004  4770              BX       lr
;;;274    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x000043f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
