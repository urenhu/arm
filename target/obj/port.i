#line 1 "..\\free_rtos\\port.c"








































































 



 

 
#line 1 "..\\free_rtos\\FreeRTOS.h"








































































 







 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"
 






 

 
 
 





 





#line 34 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"




  typedef signed int ptrdiff_t;



  



    typedef unsigned int size_t;    
#line 57 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



   



      typedef unsigned short wchar_t;  
#line 82 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



    




   




  typedef long double max_align_t;









#line 114 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



 

#line 83 "..\\free_rtos\\FreeRTOS.h"

 
#line 1 "..\\free_rtos\\projdefs.h"








































































 




 
typedef void (*pdTASK_CODE)( void * );









 









#line 86 "..\\free_rtos\\FreeRTOS.h"

 
#line 1 "..\\free_rtos\\FreeRTOSConfig.h"








































































 














 

#line 102 "..\\free_rtos\\FreeRTOSConfig.h"

 




 

#line 117 "..\\free_rtos\\FreeRTOSConfig.h"


 


 






 




#line 89 "..\\free_rtos\\FreeRTOS.h"


 




 
#line 1 "..\\free_rtos\\portable.h"








































































 



 




 


























































	



































	







	



























	








































#line 261 "..\\free_rtos\\portable.h"

#line 269 "..\\free_rtos\\portable.h"







#line 283 "..\\free_rtos\\portable.h"

































	



	





 
#line 1 "..\\free_rtos\\portmacro.h"








































































 

















 

 
#line 101 "..\\free_rtos\\portmacro.h"





	typedef unsigned long                 portTickType;


 
 



 
 
extern void                        vPortYield( void );




 
 
extern unsigned long   ulPortSetInterruptMask( void );
extern void            vPortClearInterruptMask( unsigned long ulNewMask );
extern void            vPortEnterCritical( void );
extern void            vPortExitCritical( void );

#line 134 "..\\free_rtos\\portmacro.h"
 

 

	extern void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime );


 

 
#line 156 "..\\free_rtos\\portmacro.h"
 


 



 
 






#line 329 "..\\free_rtos\\portable.h"

	




























#line 1 "..\\free_rtos\\mpu_wrappers.h"








































































 





 
#line 152 "..\\free_rtos\\mpu_wrappers.h"










#line 360 "..\\free_rtos\\portable.h"






 



	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );




 
void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;




 
long xPortStartScheduler( void ) ;





 
void vPortEndScheduler( void ) ;







 











#line 98 "..\\free_rtos\\FreeRTOS.h"



 
typedef long (*pdTASK_HOOK_CODE)( void * );









 





























































































































 
#line 254 "..\\free_rtos\\FreeRTOS.h"







































 

	
 




	
 




	
 




	
 




	



 




	


 




	


 




	


 







 





















































































































































#line 518 "..\\free_rtos\\FreeRTOS.h"





















































 




#line 81 "..\\free_rtos\\port.c"
#line 1 "..\\free_rtos\\task.h"








































































 









#line 84 "..\\free_rtos\\task.h"
#line 1 "..\\free_rtos\\list.h"








































































 



























 










 
struct xLIST_ITEM
{
	portTickType xItemValue;				 
	volatile struct xLIST_ITEM * pxNext;	 
	volatile struct xLIST_ITEM * pxPrevious; 
	void * pvOwner;							 
	void * pvContainer;						 
};
typedef struct xLIST_ITEM xListItem;		 

struct xMINI_LIST_ITEM
{
	portTickType xItemValue;
	volatile struct xLIST_ITEM *pxNext;
	volatile struct xLIST_ITEM *pxPrevious;
};
typedef struct xMINI_LIST_ITEM xMiniListItem;



 
typedef struct xLIST
{
	volatile unsigned long uxNumberOfItems;
	volatile xListItem * pxIndex;			 
	volatile xMiniListItem xListEnd;		 
} xList;







 








 








 









 








 








 




 




















 
#line 232 "..\\free_rtos\\list.h"

















 











 







 






 











 
void vListInitialise( xList *pxList );









 
void vListInitialiseItem( xListItem *pxItem );











 
void vListInsert( xList *pxList, xListItem *pxNewListItem );



















 
void vListInsertEnd( xList *pxList, xListItem *pxNewListItem );













 
unsigned long uxListRemove( xListItem *pxItemToRemove );







#line 85 "..\\free_rtos\\task.h"







 












 
typedef void * xTaskHandle;



 
typedef struct xTIME_OUT
{
	long xOverflowCount;
	portTickType  xTimeOnEntering;
} xTimeOutType;



 
typedef struct xMEMORY_REGION
{
	void *pvBaseAddress;
	unsigned long ulLengthInBytes;
	unsigned long ulParameters;
} xMemoryRegion;



 
typedef struct xTASK_PARAMTERS
{
	pdTASK_CODE pvTaskCode;
	const signed char * const pcName;
	unsigned short usStackDepth;
	void *pvParameters;
	unsigned long uxPriority;
	unsigned long *puxStackBuffer;
	xMemoryRegion xRegions[ 1 ];
} xTaskParameters;

 
typedef enum
{
	eRunning = 0,	 
	eReady,			 
	eBlocked,		 
	eSuspended,		 
	eDeleted		 
} eTaskState;

 
typedef enum
{
	eAbortSleep = 0,		 
	eStandardSleep,			 
	eNoTasksWaitingTimeout	 
} eSleepModeStatus;






 









 













 













 









 









 


 






 












































































 




































































 















































 
void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;







































 
void vTaskDelete( xTaskHandle xTaskToDelete ) ;



 
















































 
void vTaskDelay( portTickType xTicksToDelay ) ;

























































 
void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;













































 
unsigned long uxTaskPriorityGet( xTaskHandle xTask ) ;
















 
eTaskState eTaskGetState( xTaskHandle xTask ) ;








































 
void vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority ) ;

















































 
void vTaskSuspend( xTaskHandle xTaskToSuspend ) ;















































 
void vTaskResume( xTaskHandle xTaskToResume ) ;


















 
long xTaskResumeFromISR( xTaskHandle xTaskToResume ) ;



 
































 
void vTaskStartScheduler( void ) ;



















































 
void vTaskEndScheduler( void ) ;

















































 
void vTaskSuspendAll( void ) ;


















































 
signed long xTaskResumeAll( void ) ;









 
signed long xTaskIsTaskSuspended( xTaskHandle xTask ) ;



 









 
portTickType xTaskGetTickCount( void ) ;














 
portTickType xTaskGetTickCountFromISR( void ) ;












 
unsigned long uxTaskGetNumberOfTasks( void ) ;












 
signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
























 
void vTaskList( signed char *pcWriteBuffer ) ;






























 
void vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;


















 
unsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;






 
#line 1179 "..\\free_rtos\\task.h"










 
long xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;







 
xTaskHandle xTaskGetIdleTaskHandle( void );



 










 
void vTaskIncrementTick( void ) ;





















 
void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;













 
void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;















 
signed long xTaskRemoveFromEventList( const xList * const pxEventList ) ;








 
void vTaskSwitchContext( void ) ;



 
xTaskHandle xTaskGetCurrentTaskHandle( void ) ;



 
void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;




 
long xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;




 
void vTaskMissedYield( void ) ;




 
long xTaskGetSchedulerState( void ) ;




 
void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;




 
void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;




 
signed long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;



 
unsigned long uxTaskGetTaskNumber( xTaskHandle xTask );




 
void vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );







 
void vTaskStepTick( portTickType xTicksToJump );













 
eSleepModeStatus eTaskConfirmSleepModeStatus( void );








#line 82 "..\\free_rtos\\port.c"

















 




 




 
#line 116 "..\\free_rtos\\port.c"




 


 



 
static unsigned long uxCriticalNesting = 0xaaaaaaaa;





 
void vPortSetupTimerInterrupt( void );



 
void xPortPendSVHandler( void );
void xPortSysTickHandler( void );
void vPortSVCHandler( void );



 
static void prvStartFirstTask( void );

 



 







 







 




 



 
unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	
 
	pxTopOfStack--;  
	*pxTopOfStack = ( 0x01000000 );	 
	pxTopOfStack--;
	*pxTopOfStack = ( unsigned long ) pxCode;	 
	pxTopOfStack--;
	*pxTopOfStack = 0;	 
	pxTopOfStack -= 5;	 
	*pxTopOfStack = ( unsigned long ) pvParameters;	 
	pxTopOfStack -= 8;	 

	return pxTopOfStack;
}
 

__asm void vPortSVCHandler( void )
{
	PRESERVE8

	ldr	r3, =pxCurrentTCB	 
	ldr r1, [r3]			 
	ldr r0, [r1]			 
	ldmia r0!, {r4-r11}		 
	msr psp, r0				 
	mov r0, #0
	msr	basepri, r0
	orr r14, #0xd
	bx r14
}
 

__asm void prvStartFirstTask( void )
{
	PRESERVE8

	 
	ldr r0, =0xE000ED08
	ldr r0, [r0]
	ldr r0, [r0]
	 
	msr msp, r0
	 
	cpsie i
	 
	svc 0
	nop
}
 



 
long xPortStartScheduler( void )
{
	 
	( * ( ( volatile unsigned long * ) 0xe000ed20 ) ) |= ( ( ( unsigned long ) 255 ) << 16 );
	( * ( ( volatile unsigned long * ) 0xe000ed20 ) ) |= ( ( ( unsigned long ) 255 ) << 24 );

	
 
	vPortSetupTimerInterrupt();

	 
	uxCriticalNesting = 0;

	 
	prvStartFirstTask();

	 
	return 0;
}
 

void vPortEndScheduler( void )
{
	
 
}
 

void vPortYield( void )
{
	 
	( * ( ( volatile unsigned long * ) 0xe000ed04 ) ) = ( 1UL << 28UL );

	
 
	__dsb( ( 15 ) );
	__isb( ( 15 ) );
}
 

void vPortEnterCritical( void )
{
	ulPortSetInterruptMask();
	uxCriticalNesting++;
	__dsb( ( 15 ) );
	__isb( ( 15 ) );
}
 

void vPortExitCritical( void )
{
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		vPortClearInterruptMask( 0 );
	}
}
 

__asm void xPortPendSVHandler( void )
{
	extern uxCriticalNesting;
	extern pxCurrentTCB;
	extern vTaskSwitchContext;

	PRESERVE8

	mrs r0, psp

	ldr	r3, =pxCurrentTCB		 
	ldr	r2, [r3]

	stmdb r0!, {r4-r11}			 
	str r0, [r2]				 

	stmdb sp!, {r3, r14}
	mov r0, #191
	msr basepri, r0
	bl vTaskSwitchContext
	mov r0, #0
	msr basepri, r0
	ldmia sp!, {r3, r14}

	ldr r1, [r3]
	ldr r0, [r1]				 
	ldmia r0!, {r4-r11}			 
	msr psp, r0
	bx r14
	nop
}
 

void xPortSysTickHandler( void )
{

	{
		 
		( * ( ( volatile unsigned long * ) 0xe000ed04 ) ) = ( 1UL << 28UL );
	}


	


 




	( void ) ulPortSetInterruptMask();
	{
		vTaskIncrementTick();
	}
	vPortClearInterruptMask(0);
}
 

#line 477 "..\\free_rtos\\port.c"

 




 


	void vPortSetupTimerInterrupt( void )
	{
		 
#line 496 "..\\free_rtos\\port.c"

		 
		( * ( ( volatile unsigned long * ) 0xe000e014 ) ) = ( ( ( unsigned long ) 72000000 ) / ( ( portTickType ) 1000 ) ) - 1UL;;
		( * ( ( volatile unsigned long * ) 0xe000e010 ) ) = ( 1UL << 2UL ) | ( 1UL << 1UL ) | ( 1UL << 0UL );
	}


 

__asm unsigned long ulPortSetInterruptMask( void )
{
	PRESERVE8

	mrs r0, basepri
	mov r1, #191
	msr basepri, r1
	bx r14
}
 

__asm void vPortClearInterruptMask( unsigned long ulNewMask )
{
	PRESERVE8

	msr basepri, r0
	bx r14
}
