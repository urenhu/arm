; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\queue.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\queue.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\queue.crf ..\usr_lib\queue.c]
                          THUMB

                          AREA ||i.deQueue||, CODE, READONLY, ALIGN=1

                  deQueue PROC
;;;57     *******************************/
;;;58     int deQueue   (QUEUE *q, unsigned char *data) 
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         int ret = 0;
000002  e9d04304          LDRD     r4,r3,[r0,#0x10]
000006  2200              MOVS     r2,#0
;;;61     
;;;62         if (q->in != q->out){   
000008  429c              CMP      r4,r3
00000a  d007              BEQ      |L1.28|
;;;63             *data  = q->queue[q->out];
00000c  5cc3              LDRB     r3,[r0,r3]
00000e  700b              STRB     r3,[r1,#0]
;;;64           	q->out++;
000010  7d01              LDRB     r1,[r0,#0x14]
000012  1c49              ADDS     r1,r1,#1
;;;65     				q->out &= QUEUE_MASK;
000014  f001010f          AND      r1,r1,#0xf
000018  6141              STR      r1,[r0,#0x14]
00001a  e001              B        |L1.32|
                  |L1.28|
;;;66         } else { // queu empty!
;;;67             ret = -1;
00001c  f04f32ff          MOV      r2,#0xffffffff
                  |L1.32|
;;;68         }
;;;69     		return ret;
000020  4610              MOV      r0,r2
;;;70     }
000022  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.enQueue||, CODE, READONLY, ALIGN=1

                  enQueue PROC
;;;34     *******************************/
;;;35     int  enQueue   (QUEUE *q, unsigned char  data) 
000000  b530              PUSH     {r4,r5,lr}
;;;36     {
;;;37         int  ret = 0; 
;;;38     	  int  inpos = 0;
;;;39         
;;;40     	  inpos =  (q->in+1) & QUEUE_MASK; 
000002  6903              LDR      r3,[r0,#0x10]
;;;41         if ( inpos != q->out) {
000004  6945              LDR      r5,[r0,#0x14]
000006  1c5c              ADDS     r4,r3,#1              ;40
000008  2200              MOVS     r2,#0                 ;37
00000a  f004040f          AND      r4,r4,#0xf            ;40
00000e  42a5              CMP      r5,r4
000010  d006              BEQ      |L2.32|
;;;42             q->queue[q->in] = data ;
000012  54c1              STRB     r1,[r0,r3]
;;;43             q->in++;
000014  7c01              LDRB     r1,[r0,#0x10]
000016  1c49              ADDS     r1,r1,#1
;;;44             q->in &= QUEUE_MASK;
000018  f001010f          AND      r1,r1,#0xf
00001c  6101              STR      r1,[r0,#0x10]
00001e  e001              B        |L2.36|
                  |L2.32|
;;;45         } else { // queu empty!
;;;46             ret = -1;
000020  f04f32ff          MOV      r2,#0xffffffff
                  |L2.36|
;;;47         }
;;;48       	return ret;
000024  4610              MOV      r0,r2
;;;49     }
000026  bd30              POP      {r4,r5,pc}
;;;50     
                          ENDP


                          AREA ||i.initQueue||, CODE, READONLY, ALIGN=1

                  initQueue PROC
;;;16     *******************************/
;;;17     void initQueue (QUEUE *q)
000000  2100              MOVS     r1,#0
;;;18     {
;;;19         int i = 0;
;;;20     
;;;21         q->in = q->out = 0;
000002  6141              STR      r1,[r0,#0x14]
;;;22         q->flag = 0;
000004  6101              STR      r1,[r0,#0x10]
000006  460a              MOV      r2,r1                 ;21
000008  6181              STR      r1,[r0,#0x18]
                  |L3.10|
;;;23         for (i=0; i<QUEUE_SIZE; i++){
;;;24           q->queue[i] = 0;
00000a  5442              STRB     r2,[r0,r1]
00000c  1c49              ADDS     r1,r1,#1
00000e  2910              CMP      r1,#0x10              ;23
000010  dbfb              BLT      |L3.10|
;;;25         }
;;;26     }
000012  4770              BX       lr
;;;27     
                          ENDP

