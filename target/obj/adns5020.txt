; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adns5020.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\adns5020.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\adns5020.crf ..\sensor\adns5020.c]
                          THUMB

                          AREA ||i.adns5020_config||, CODE, READONLY, ALIGN=1

                  adns5020_config PROC
;;;86     //-------------Config----------------------------//
;;;87     int adns5020_config()
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89         u8  conf = read(ADNS5020_MOR);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       read
;;;90         return (conf==0) ? 500 : 1000;
000008  b110              CBZ      r0,|L1.16|
00000a  f44f707a          MOV      r0,#0x3e8
;;;91     }
00000e  bd10              POP      {r4,pc}
                  |L1.16|
000010  f44f70fa          MOV      r0,#0x1f4             ;90
000014  bd10              POP      {r4,pc}
;;;92     
                          ENDP


                          AREA ||i.adns5020_dx||, CODE, READONLY, ALIGN=1

                  adns5020_dx PROC
;;;100    //-------------Dx--------------------------------//
;;;101    u8  adns5020_dx() 
000000  2003              MOVS     r0,#3
;;;102    {
;;;103        u8  dx_raw = read(ADNS5020_DXR);
000002  f7ffbffe          B.W      read
;;;104        return dx_raw;
;;;105    }
;;;106    
                          ENDP


                          AREA ||i.adns5020_dy||, CODE, READONLY, ALIGN=1

                  adns5020_dy PROC
;;;107    //-------------Dy--------------------------------//
;;;108    u8 adns5020_dy() {
000000  2004              MOVS     r0,#4
;;;109        u8  dy_raw = read(ADNS5020_DYR);
000002  f7ffbffe          B.W      read
;;;110        return dy_raw;
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.adns5020_init||, CODE, READONLY, ALIGN=2

                  adns5020_init PROC
;;;135    
;;;136    void adns5020_init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;137    {   
;;;138        GPIO_InitTypeDef     GPIO_InitStructure;
;;;139        RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB, ENABLE );
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;140    
;;;141        GPIO_InitStructure.GPIO_Pin    = GPIO_Pin_0 | GPIO_Pin_1;  // PB12 ==> CS ADNS5020_nReset
00000a  2403              MOVS     r4,#3
00000c  f8ad4000          STRH     r4,[sp,#0]
;;;142        GPIO_InitStructure.GPIO_Mode   = GPIO_Mode_Out_PP;  
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;143        GPIO_InitStructure.GPIO_Speed  = GPIO_Speed_50MHz;
;;;144        GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  4d12              LDR      r5,|L4.96|
000018  f88d4002          STRB     r4,[sp,#2]            ;143
00001c  4669              MOV      r1,sp
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       GPIO_Init
;;;145        GPIO_SetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 );
000024  2103              MOVS     r1,#3
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_SetBits
;;;146    
;;;147    		GPIO_InitStructure.GPIO_Pin    = GPIO_Pin_3;  // PB3 input PB
00002c  2008              MOVS     r0,#8
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;148        GPIO_InitStructure.GPIO_Mode   = GPIO_Mode_IPD; // GPIO_Mode_Out_PP;  
000032  2028              MOVS     r0,#0x28
000034  f88d0003          STRB     r0,[sp,#3]
;;;149        GPIO_InitStructure.GPIO_Speed  = GPIO_Speed_50MHz;
000038  f88d4002          STRB     r4,[sp,#2]
;;;150        GPIO_Init(GPIOB, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GPIO_Init
;;;151    
;;;152        usrspi2_init(1, 0, 3);        
000044  2203              MOVS     r2,#3
000046  2100              MOVS     r1,#0
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       usrspi2_init
;;;153        usrspi2_setspeed(SPI_BaudRatePrescaler_256);
00004e  2038              MOVS     r0,#0x38
000050  f7fffffe          BL       usrspi2_setspeed
;;;154    	
;;;155    	  write (ADNS5020_RST,0x0); //reset chip
000054  2100              MOVS     r1,#0
000056  203a              MOVS     r0,#0x3a
000058  f7fffffe          BL       write
;;;156    }  
00005c  bd38              POP      {r3-r5,pc}
;;;157    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      0x40010c00

                          AREA ||i.adns5020_pixels||, CODE, READONLY, ALIGN=1

                  adns5020_pixels PROC
;;;123    //-------------Pixels----------------------------//
;;;124    void adns5020_pixels(u8* buffer ) 
000000  b570              PUSH     {r4-r6,lr}
;;;125    {
000002  4605              MOV      r5,r0
;;;126        u8 pixel_count = 0;
000004  2400              MOVS     r4,#0
;;;127        u8   data    = 0 ;
;;;128    	  u8   opcode  = 0;
;;;129    
;;;130    		write(ADNS5020_PXR, 0x00);   // reset grab counte
000006  4621              MOV      r1,r4
000008  200b              MOVS     r0,#0xb
00000a  f7fffffe          BL       write
                  |L5.14|
;;;131      	for(pixel_count = 0; pixel_count < ADNS5020_MAX_PIX;  pixel_count++ ) {
;;;132            buffer[pixel_count] = read(ADNS5020_PXR);
00000e  200b              MOVS     r0,#0xb
000010  f7fffffe          BL       read
000014  5528              STRB     r0,[r5,r4]
000016  1c64              ADDS     r4,r4,#1
000018  b2e4              UXTB     r4,r4                 ;131
00001a  2ce1              CMP      r4,#0xe1              ;131
00001c  d3f7              BCC      |L5.14|
;;;133        }
;;;134    }
00001e  bd70              POP      {r4-r6,pc}
;;;135    
                          ENDP


                          AREA ||i.adns5020_reg_read||, CODE, READONLY, ALIGN=1

                  adns5020_reg_read PROC
;;;117    
;;;118    u8 adns5020_reg_read(u8 reg) {
000000  f7ffbffe          B.W      read
;;;119        return read(reg);
;;;120    }
;;;121    
                          ENDP


                          AREA ||i.adns5020_reset||, CODE, READONLY, ALIGN=2

                  adns5020_reset PROC
;;;75     //--------------Reset----------------------------//
;;;76     void adns5020_reset() 
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
;;;78         ADNS5020_nReset = 0;  // GPIO_ResetBits(ADNS5020_PORT, ADNS5020_nReset);
000002  4c09              LDR      r4,|L7.40|
000004  2000              MOVS     r0,#0
000006  f8c40184          STR      r0,[r4,#0x184]
;;;79         delay_us(750);
00000a  f24025ee          MOV      r5,#0x2ee
00000e  4628              MOV      r0,r5
000010  f50474c2          ADD      r4,r4,#0x184
000014  f7fffffe          BL       delay_us
;;;80     
;;;81         ADNS5020_nReset = 1; //GPIO_SetBits(ADNS5020_PORT, ADNS5020_nReset);  
000018  2001              MOVS     r0,#1
00001a  6020              STR      r0,[r4,#0]
;;;82         delay_us(750);
00001c  4628              MOV      r0,r5
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      delay_us
;;;83     
;;;84     }
;;;85     
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0x42218000

                          AREA ||i.adns5020_squal||, CODE, READONLY, ALIGN=1

                  adns5020_squal PROC
;;;113    //-------------Squal-----------------------------//
;;;114    u8 adns5020_squal() {
000000  2005              MOVS     r0,#5
;;;115        return read(ADNS5020_SQR);
000002  f7ffbffe          B.W      read
;;;116    }
;;;117    
                          ENDP


                          AREA ||i.read||, CODE, READONLY, ALIGN=2

                  read PROC
;;;56     //--------------Read------------------------------//
;;;57     static u8 read(u8 address)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
;;;59         u8   data    = 0 ;
;;;60     	  u8   opcode  = 0;
;;;61         
;;;62     	  opcode = address & 0x7f;
;;;63     
;;;64     		ADNS5020_nCS = 0; //GPIO_ResetBits(ADNS5020_PORT, ADNS5020_nCS);  
000002  4c0b              LDR      r4,|L9.48|
000004  2100              MOVS     r1,#0
000006  f000007f          AND      r0,r0,#0x7f           ;62
00000a  f8c41180          STR      r1,[r4,#0x180]
00000e  f50474c0          ADD      r4,r4,#0x180
;;;65         usrspi2_SendByte3Wire(opcode);
000012  f7fffffe          BL       usrspi2_SendByte3Wire
;;;66         delay_us(5);
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       delay_us
;;;67         data = usrspi2_ReadByte3Wire();
00001c  f7fffffe          BL       usrspi2_ReadByte3Wire
000020  4605              MOV      r5,r0
;;;68         ADNS5020_nCS = 1; //GPIO_ResetBits(ADNS5020_PORT, ADNS5020_nCS);  
000022  2001              MOVS     r0,#1
000024  6020              STR      r0,[r4,#0]
;;;69     
;;;70         delay_us(4); // T_srad=4us
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       delay_us
;;;71     		return data;
00002c  4628              MOV      r0,r5
;;;72     }
00002e  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP

                  |L9.48|
                          DCD      0x42218000

                          AREA ||i.write||, CODE, READONLY, ALIGN=2

                  write PROC
;;;40     //--------------Write------------------------------//
;;;41     static void write(u8 address, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
;;;43     	  u8   opcode = 0;
;;;44     
;;;45       	ADNS5020_nCS = 0; //GPIO_ResetBits(ADNS5020_PORT, ADNS5020_nCS);  
000002  4c0c              LDR      r4,|L10.52|
000004  460d              MOV      r5,r1                 ;42
000006  2100              MOVS     r1,#0
000008  f8c41180          STR      r1,[r4,#0x180]
;;;46     	  opcode = address | 0x80;
00000c  f0400080          ORR      r0,r0,#0x80
000010  f50474c0          ADD      r4,r4,#0x180
;;;47         usrspi2_SendByte3Wire(opcode);
000014  f7fffffe          BL       usrspi2_SendByte3Wire
;;;48         delay_us(5);
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       delay_us
;;;49         usrspi2_SendByte3Wire(data);
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       usrspi2_SendByte3Wire
;;;50     		ADNS5020_nCS = 1; //GPIO_SetBits(ADNS5020_PORT, ADNS5020_nCS);  
000024  2001              MOVS     r0,#1
000026  6020              STR      r0,[r4,#0]
;;;51     
;;;52     	delay_us(30);
000028  e8bd4070          POP      {r4-r6,lr}
00002c  201e              MOVS     r0,#0x1e
00002e  f7ffbffe          B.W      delay_us
;;;53     }
;;;54     
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      0x42218000
