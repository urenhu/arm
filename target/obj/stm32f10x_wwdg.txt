; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_wwdg.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\stm32f10x_wwdg.crf ..\STM32F10x_StdPeriph\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;206      */
;;;207    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;208    {
;;;209      WWDG->SR = (uint32_t)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;210    }
000006  4770              BX       lr
;;;211    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;184      */
;;;185    void WWDG_Enable(uint8_t Counter)
000000  4902              LDR      r1,|L3.12|
;;;186    {
;;;187      /* Check the parameters */
;;;188      assert_param(IS_WWDG_COUNTER(Counter));
;;;189      WWDG->CR = CR_WDGA_Set | Counter;
000002  f0400080          ORR      r0,r0,#0x80
000006  6008              STR      r0,[r1,#0]
;;;190    }
000008  4770              BX       lr
;;;191    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;158      */
;;;159    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;160    {
;;;161      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;162    }
000008  4770              BX       lr
;;;163    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;196      */
;;;197    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;198    {
;;;199      return (FlagStatus)(WWDG->SR);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;200    }
000006  4770              BX       lr
;;;201    
                          ENDP

                  |L5.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;169      */
;;;170    void WWDG_SetCounter(uint8_t Counter)
000000  4902              LDR      r1,|L6.12|
;;;171    {
;;;172      /* Check the parameters */
;;;173      assert_param(IS_WWDG_COUNTER(Counter));
;;;174      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;175         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;176      WWDG->CR = Counter & BIT_Mask;
000002  f000007f          AND      r0,r0,#0x7f
000006  6008              STR      r0,[r1,#0]
;;;177    }
000008  4770              BX       lr
;;;178    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  4a03              LDR      r2,|L7.16|
;;;119    {
;;;120      uint32_t tmpreg = 0;
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  6811              LDR      r1,[r2,#0]
000004  f42171c0          BIC      r1,r1,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
000008  4301              ORRS     r1,r1,r0
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;129    }
00000c  4770              BX       lr
;;;130    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;136      */
;;;137    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  4905              LDR      r1,|L8.24|
;;;138    {
000002  b508              PUSH     {r3,lr}
;;;139      __IO uint32_t tmpreg = 0;
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;143      /* Clear W[6:0] bits */
;;;144    
;;;145      tmpreg = WWDG->CFR & CFR_W_Mask;
000004  680a              LDR      r2,[r1,#0]
;;;146    
;;;147      /* Set W[6:0] bits according to WindowValue value */
;;;148      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
000006  f000007f          AND      r0,r0,#0x7f
00000a  f022027f          BIC      r2,r2,#0x7f           ;145
00000e  4310              ORRS     r0,r0,r2
;;;149    
;;;150      /* Store the new value */
;;;151      WWDG->CFR = tmpreg;
000010  9000              STR      r0,[sp,#0]
000012  6008              STR      r0,[r1,#0]
;;;152    }
000014  bd08              POP      {r3,pc}
;;;153    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04
