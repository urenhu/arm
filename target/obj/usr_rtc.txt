; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usr_rtc.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\usr_rtc.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\usr_rtc.crf ..\usr_lib\usr_rtc.c]
                          THUMB

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTC_IRQHandler PROC
;;;79     // every 1 second occurs ! 
;;;80     void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;81     {		 
;;;82     	if (RTC_GetITStatus(RTC_IT_SEC) != RESET){							
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RTC_GetITStatus
000008  b108              CBZ      r0,|L1.14|
;;;83     		usrrtc_get();  
00000a  f7fffffe          BL       usrrtc_get
                  |L1.14|
;;;84      	}
;;;85     	if(RTC_GetITStatus(RTC_IT_ALR)!= RESET)	{ // alarm 
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RTC_GetITStatus
000014  b110              CBZ      r0,|L1.28|
;;;86     		RTC_ClearITPendingBit(RTC_IT_ALR);			  	   
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       RTC_ClearITPendingBit
                  |L1.28|
;;;87       	} 				  								 
;;;88     	RTC_ClearITPendingBit(RTC_IT_SEC|RTC_IT_OW);
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       RTC_ClearITPendingBit
;;;89     	RTC_WaitForLastTask();	  	    						 	   	 
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      RTC_WaitForLastTask
;;;90     }
;;;91     
                          ENDP


                          AREA ||i.is_leap_year||, CODE, READONLY, ALIGN=1

                  is_leap_year PROC
;;;92     
;;;93     static u8 is_leap_year(u16 year)
000000  0781              LSLS     r1,r0,#30
;;;94     {			  
000002  d10c              BNE      |L2.30|
;;;95     	if(year%4==0){ 
;;;96     		if(year%100==0) { 
000004  2164              MOVS     r1,#0x64
000006  fbb0f2f1          UDIV     r2,r0,r1
00000a  fb010112          MLS      r1,r1,r2,r0
00000e  b941              CBNZ     r1,|L2.34|
;;;97     			if(year%400==0) {
000010  f44f71c8          MOV      r1,#0x190
000014  fbb0f2f1          UDIV     r2,r0,r1
000018  fb010012          MLS      r0,r1,r2,r0
00001c  b108              CBZ      r0,|L2.34|
                  |L2.30|
;;;98     				return 1;   
;;;99     			} else {  
;;;100    				return 0;
;;;101    			}				
;;;102    		} else  {
;;;103    			return 1;
;;;104    		}			
;;;105    	} else { 
;;;106    		return 0;
00001e  2000              MOVS     r0,#0
;;;107    	}		
;;;108    }	 		
000020  4770              BX       lr
                  |L2.34|
000022  2001              MOVS     r0,#1                 ;103
000024  4770              BX       lr
;;;109    
                          ENDP


                          AREA ||i.usrrtc_get||, CODE, READONLY, ALIGN=2

                  usrrtc_get PROC
;;;140    
;;;141    u8 usrrtc_get(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;142    {
;;;143    	static u16 daycnt=0;
;;;144    	u32 timecount=0; 
;;;145    	u32 temp=0;
;;;146    	u16 temp1=0;	  
;;;147     	
;;;148    	timecount = RTC->CNTH;
000004  4846              LDR      r0,|L3.288|
000006  8800              LDRH     r0,[r0,#0]
;;;149    	timecount<<=16;
;;;150    	timecount += RTC->CNTL;			 
000008  4945              LDR      r1,|L3.288|
00000a  1d09              ADDS     r1,r1,#4
00000c  8809              LDRH     r1,[r1,#0]
;;;151     	temp=timecount/86400;
00000e  f8df8114          LDR      r8,|L3.292|
000012  eb014700          ADD      r7,r1,r0,LSL #16      ;150
000016  fbb7f4f8          UDIV     r4,r7,r8
;;;152    	if(daycnt!=temp){	  
00001a  4843              LDR      r0,|L3.296|
;;;153    		daycnt=temp;
;;;154    		temp1=1970;	
;;;155    		while(temp>=365){				 
;;;156    			if(is_leap_year(temp1))	{
;;;157    				if(temp>=366) {
;;;158    					temp-=366;
;;;159    				} else {
;;;160    					temp1++;
;;;161    					break;
;;;162    				}  
;;;163    			} else {
;;;164    				temp-=365;	   
;;;165    			}
;;;166    			temp1++;  
;;;167    		}   
;;;168    		calendar.w_year=temp1; 
00001c  4d43              LDR      r5,|L3.300|
00001e  8801              LDRH     r1,[r0,#0]            ;152  ; daycnt
000020  42a1              CMP      r1,r4                 ;152
000022  d031              BEQ      |L3.136|
000024  8004              STRH     r4,[r0,#0]            ;153
000026  f24076b2          MOV      r6,#0x7b2             ;154
00002a  f44f7ab7          MOV      r10,#0x16e            ;157
00002e  f44f79b6          MOV      r9,#0x16c             ;155
000032  e00f              B        |L3.84|
                  |L3.52|
000034  4630              MOV      r0,r6                 ;156
000036  f7fffffe          BL       is_leap_year
00003a  b138              CBZ      r0,|L3.76|
00003c  4554              CMP      r4,r10                ;157
00003e  d302              BCC      |L3.70|
000040  f5a474b7          SUB      r4,r4,#0x16e          ;157
000044  e004              B        |L3.80|
                  |L3.70|
000046  1c76              ADDS     r6,r6,#1              ;158
000048  b2b6              UXTH     r6,r6                 ;160
00004a  e005              B        |L3.88|
                  |L3.76|
00004c  f2a4146d          SUB      r4,r4,#0x16d          ;161
                  |L3.80|
000050  1c76              ADDS     r6,r6,#1              ;161
000052  b2b6              UXTH     r6,r6                 ;166
                  |L3.84|
000054  454c              CMP      r4,r9                 ;155
000056  d8ed              BHI      |L3.52|
                  |L3.88|
000058  80ae              STRH     r6,[r5,#4]
;;;169    		temp1=0;
00005a  2600              MOVS     r6,#0
;;;170    		while(temp>=28){
;;;171    			if(is_leap_year(calendar.w_year)&&temp1==1){
;;;172    				if(temp>=29)temp-=29;
;;;173    				else 
;;;174    					break; 
;;;175    			}else{ 
;;;176    				if(temp>=mon_table[temp1])
00005c  f8df90d0          LDR      r9,|L3.304|
000060  e00c              B        |L3.124|
                  |L3.98|
000062  88a8              LDRH     r0,[r5,#4]            ;171  ; calendar
000064  f7fffffe          BL       is_leap_year
000068  b108              CBZ      r0,|L3.110|
00006a  2e01              CMP      r6,#1                 ;171
00006c  d047              BEQ      |L3.254|
                  |L3.110|
00006e  f8190006          LDRB     r0,[r9,r6]
000072  42a0              CMP      r0,r4
000074  d804              BHI      |L3.128|
;;;177    					temp-=mon_table[temp1];
000076  1a24              SUBS     r4,r4,r0
                  |L3.120|
000078  1c76              ADDS     r6,r6,#1
;;;178    				else 
;;;179    					break;
;;;180    			}
;;;181    			temp1++;  
00007a  b2b6              UXTH     r6,r6
                  |L3.124|
00007c  2c1c              CMP      r4,#0x1c              ;170
00007e  d2f0              BCS      |L3.98|
                  |L3.128|
000080  1c76              ADDS     r6,r6,#1              ;170
;;;182    		}
;;;183    		calendar.w_month=temp1+1;
000082  71ae              STRB     r6,[r5,#6]
000084  1c64              ADDS     r4,r4,#1
;;;184    		calendar.w_date=temp+1; 
000086  71ec              STRB     r4,[r5,#7]
                  |L3.136|
;;;185    	}
;;;186    	temp=timecount%86400; 
000088  fbb7f1f8          UDIV     r1,r7,r8
00008c  fb087011          MLS      r0,r8,r1,r7
;;;187    	calendar.hour=temp/3600;     	
000090  f44f6161          MOV      r1,#0xe10
000094  fbb0f2f1          UDIV     r2,r0,r1
000098  702a              STRB     r2,[r5,#0]
;;;188    	calendar.min=(temp%3600)/60; 		
00009a  fbb0f2f1          UDIV     r2,r0,r1
00009e  fb010312          MLS      r3,r1,r2,r0
0000a2  223c              MOVS     r2,#0x3c
0000a4  fbb3f3f2          UDIV     r3,r3,r2
0000a8  706b              STRB     r3,[r5,#1]
;;;189    	calendar.sec=(temp%3600)%60; 	
0000aa  fbb0f3f1          UDIV     r3,r0,r1
0000ae  fb010113          MLS      r1,r1,r3,r0
0000b2  fbb1f0f2          UDIV     r0,r1,r2
0000b6  fb021010          MLS      r0,r2,r0,r1
0000ba  70a8              STRB     r0,[r5,#2]
;;;190    	calendar.week=get_week(calendar.w_year,calendar.w_month,calendar.w_date);    
0000bc  88a8              LDRH     r0,[r5,#4]  ; calendar
0000be  79aa              LDRB     r2,[r5,#6]  ; calendar
0000c0  79eb              LDRB     r3,[r5,#7]  ; calendar
0000c2  2464              MOVS     r4,#0x64
0000c4  fbb0f1f4          UDIV     r1,r0,r4
0000c8  fbb0f6f4          UDIV     r6,r0,r4
0000cc  b2c9              UXTB     r1,r1
0000ce  fb040016          MLS      r0,r4,r6,r0
0000d2  2913              CMP      r1,#0x13
0000d4  d901              BLS      |L3.218|
0000d6  3064              ADDS     r0,r0,#0x64
0000d8  b2c0              UXTB     r0,r0
                  |L3.218|
0000da  eb000190          ADD      r1,r0,r0,LSR #2
0000de  2407              MOVS     r4,#7
0000e0  fbb1f6f4          UDIV     r6,r1,r4
0000e4  fb041116          MLS      r1,r4,r6,r1
0000e8  4e11              LDR      r6,|L3.304|
0000ea  4419              ADD      r1,r1,r3
0000ec  3e0c              SUBS     r6,r6,#0xc
0000ee  4416              ADD      r6,r6,r2
0000f0  0780              LSLS     r0,r0,#30
0000f2  f8166c01          LDRB     r6,[r6,#-1]
0000f6  4431              ADD      r1,r1,r6
0000f8  b289              UXTH     r1,r1
0000fa  d004              BEQ      |L3.262|
0000fc  e007              B        |L3.270|
                  |L3.254|
0000fe  2c1d              CMP      r4,#0x1d              ;172
000100  d3be              BCC      |L3.128|
000102  3c1d              SUBS     r4,r4,#0x1d           ;172
000104  e7b8              B        |L3.120|
                  |L3.262|
000106  2a03              CMP      r2,#3                 ;172
000108  d201              BCS      |L3.270|
00010a  1e49              SUBS     r1,r1,#1              ;172
00010c  b289              UXTH     r1,r1                 ;172
                  |L3.270|
00010e  fbb1f0f4          UDIV     r0,r1,r4              ;172
000112  fb041010          MLS      r0,r4,r0,r1           ;172
000116  7228              STRB     r0,[r5,#8]
;;;191    	return 0;
000118  2000              MOVS     r0,#0
;;;192    }	 
00011a  e8bd87f0          POP      {r4-r10,pc}
;;;193    
                          ENDP

00011e  0000              DCW      0x0000
                  |L3.288|
                          DCD      0x40002818
                  |L3.292|
                          DCD      0x00015180
                  |L3.296|
                          DCD      ||.data||
                  |L3.300|
                          DCD      ||.bss||
                  |L3.304|
                          DCD      ||.constdata||+0xc

                          AREA ||i.usrrtc_init||, CODE, READONLY, ALIGN=1

                  usrrtc_init PROC
;;;41     
;;;42     u8 usrrtc_init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;43     {
;;;44     	u8 temp=0;
000002  2400              MOVS     r4,#0
;;;45      
;;;46     	if (BKP_ReadBackupRegister(BKP_DR1) != 0x5050){	 			
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       BKP_ReadBackupRegister
00000a  f2450650          MOV      r6,#0x5050
00000e  2500              MOVS     r5,#0
000010  42b0              CMP      r0,r6
000012  d045              BEQ      |L4.160|
;;;47     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);	   
000014  2101              MOVS     r1,#1
000016  f04f50c0          MOV      r0,#0x18000000
00001a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;48     		PWR_BackupAccessCmd(ENABLE);	 
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       PWR_BackupAccessCmd
;;;49     		BKP_DeInit(); 	
000024  f7fffffe          BL       BKP_DeInit
;;;50     		RCC_LSEConfig(RCC_LSE_ON);	//(LSE) use lowspeed crystal 
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       RCC_LSEConfig
;;;51     		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)	{
00002e  e004              B        |L4.58|
                  |L4.48|
000030  1c64              ADDS     r4,r4,#1
;;;52     			temp++;
000032  b2e4              UXTB     r4,r4
;;;53     			delay_ms(10);
000034  200a              MOVS     r0,#0xa
000036  f7fffffe          BL       delay_ms
                  |L4.58|
00003a  2041              MOVS     r0,#0x41              ;51
00003c  f7fffffe          BL       RCC_GetFlagStatus
000040  2800              CMP      r0,#0                 ;51
000042  d0f5              BEQ      |L4.48|
;;;54     		}
;;;55     		if(temp>=250)  return 1;
000044  2cfa              CMP      r4,#0xfa
000046  d301              BCC      |L4.76|
000048  2001              MOVS     r0,#1
;;;56     		
;;;57     		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);	
;;;58     		RCC_RTCCLKCmd(ENABLE);  
;;;59     		RTC_WaitForLastTask();
;;;60     		RTC_WaitForSynchro();  
;;;61     		RTC_ITConfig(RTC_IT_SEC, ENABLE);
;;;62     		RTC_WaitForLastTask();
;;;63     		RTC_EnterConfigMode();   // allow setting 	
;;;64     		RTC_SetPrescaler(32767); 
;;;65     		RTC_WaitForLastTask();	
;;;66     		usrrtc_set(2016,05,24,10,0,55);  // set time 
;;;67     		RTC_ExitConfigMode();  
;;;68     		BKP_WriteBackupRegister(BKP_DR1, 0X5050);
;;;69     	}else {
;;;70     		RTC_WaitForSynchro();
;;;71     		RTC_ITConfig(RTC_IT_SEC, ENABLE);	
;;;72     		RTC_WaitForLastTask();
;;;73     	}
;;;74     	RTC_NVIC_Config();
;;;75     	usrrtc_get();
;;;76     	return 0; 
;;;77     }		 				    
00004a  bd7c              POP      {r2-r6,pc}
                  |L4.76|
00004c  f44f7080          MOV      r0,#0x100             ;57
000050  f7fffffe          BL       RCC_RTCCLKConfig
000054  2001              MOVS     r0,#1                 ;58
000056  f7fffffe          BL       RCC_RTCCLKCmd
00005a  f7fffffe          BL       RTC_WaitForLastTask
00005e  f7fffffe          BL       RTC_WaitForSynchro
000062  2101              MOVS     r1,#1                 ;61
000064  4608              MOV      r0,r1                 ;61
000066  f7fffffe          BL       RTC_ITConfig
00006a  f7fffffe          BL       RTC_WaitForLastTask
00006e  f7fffffe          BL       RTC_EnterConfigMode
000072  f64770ff          MOV      r0,#0x7fff            ;64
000076  f7fffffe          BL       RTC_SetPrescaler
00007a  f7fffffe          BL       RTC_WaitForLastTask
00007e  2037              MOVS     r0,#0x37              ;66
000080  e9cd5000          STRD     r5,r0,[sp,#0]         ;66
000084  230a              MOVS     r3,#0xa               ;66
000086  2218              MOVS     r2,#0x18              ;66
000088  2105              MOVS     r1,#5                 ;66
00008a  f44f60fc          MOV      r0,#0x7e0             ;66
00008e  f7fffffe          BL       usrrtc_set
000092  f7fffffe          BL       RTC_ExitConfigMode
000096  4631              MOV      r1,r6                 ;68
000098  2004              MOVS     r0,#4                 ;68
00009a  f7fffffe          BL       BKP_WriteBackupRegister
00009e  e007              B        |L4.176|
                  |L4.160|
0000a0  f7fffffe          BL       RTC_WaitForSynchro
0000a4  2101              MOVS     r1,#1                 ;71
0000a6  4608              MOV      r0,r1                 ;71
0000a8  f7fffffe          BL       RTC_ITConfig
0000ac  f7fffffe          BL       RTC_WaitForLastTask
                  |L4.176|
0000b0  2003              MOVS     r0,#3                 ;72
0000b2  f88d0000          STRB     r0,[sp,#0]            ;72
0000b6  f88d5001          STRB     r5,[sp,#1]            ;72
0000ba  f88d5002          STRB     r5,[sp,#2]            ;72
0000be  2001              MOVS     r0,#1                 ;72
0000c0  f88d0003          STRB     r0,[sp,#3]            ;72
0000c4  4668              MOV      r0,sp                 ;72
0000c6  f7fffffe          BL       NVIC_Init
0000ca  f7fffffe          BL       usrrtc_get
0000ce  2000              MOVS     r0,#0                 ;76
0000d0  bd7c              POP      {r2-r6,pc}
;;;78     
                          ENDP


                          AREA ||i.usrrtc_set||, CODE, READONLY, ALIGN=2

                  usrrtc_set PROC
;;;109    
;;;110    u8 usrrtc_set(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;111    {
000004  4606              MOV      r6,r0
;;;112    	u16 t;
;;;113    	u32 seccount=0;
000006  2400              MOVS     r4,#0
;;;114    	
;;;115    	if (syear<1970||syear>2099)return 1;	   
000008  f2a070b2          SUB      r0,r0,#0x7b2
00000c  469b              MOV      r11,r3                ;111
00000e  4692              MOV      r10,r2                ;111
000010  4689              MOV      r9,r1                 ;111
000012  2882              CMP      r0,#0x82
000014  d302              BCC      |L5.28|
000016  2001              MOVS     r0,#1
                  |L5.24|
;;;116    	for (t=1970;t<syear;t++) {
;;;117    		if(is_leap_year(t))seccount+=31622400;
;;;118    		else seccount+=31536000;			  
;;;119    	}
;;;120    	smon-=1;
;;;121    	for(t=0;t<smon;t++){
;;;122    		seccount+=(u32)mon_table[t]*86400;
;;;123    		if(is_leap_year(syear)&&t==1)
;;;124    			seccount+=86400;	   
;;;125    	}
;;;126    	seccount+=(u32)(sday-1)*86400;
;;;127    	seccount+=(u32)hour*3600;
;;;128    	seccount+=(u32)min*60;	 
;;;129    	seccount+=sec;
;;;130    	
;;;131    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);  // Enable PWR and BKP external clock  
;;;132    	PWR_BackupAccessCmd(ENABLE);	
;;;133    	RTC_SetCounter(seccount); // set RTC counter
;;;134    
;;;135    	RTC_WaitForLastTask();
;;;136    
;;;137    	return 0;	    
;;;138    }
000018  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.28|
00001c  f24075b2          MOV      r5,#0x7b2             ;116
000020  4f27              LDR      r7,|L5.192|
000022  f8df80a0          LDR      r8,|L5.196|
000026  e008              B        |L5.58|
                  |L5.40|
000028  4628              MOV      r0,r5                 ;117
00002a  f7fffffe          BL       is_leap_year
00002e  b108              CBZ      r0,|L5.52|
000030  443c              ADD      r4,r4,r7              ;117
000032  e000              B        |L5.54|
                  |L5.52|
000034  4444              ADD      r4,r4,r8              ;118
                  |L5.54|
000036  1c6d              ADDS     r5,r5,#1              ;118
000038  b2ad              UXTH     r5,r5                 ;116
                  |L5.58|
00003a  42b5              CMP      r5,r6                 ;116
00003c  d3f4              BCC      |L5.40|
00003e  f1a90001          SUB      r0,r9,#1              ;120
000042  b2c7              UXTB     r7,r0                 ;120
000044  2500              MOVS     r5,#0                 ;121
000046  f8df8080          LDR      r8,|L5.200|
00004a  f8df9080          LDR      r9,|L5.204|
00004e  e00f              B        |L5.112|
                  |L5.80|
000050  f8180005          LDRB     r0,[r8,r5]            ;122
000054  f24021a3          MOV      r1,#0x2a3             ;122
000058  4348              MULS     r0,r1,r0              ;122
00005a  eb0414c0          ADD      r4,r4,r0,LSL #7       ;122
00005e  4630              MOV      r0,r6                 ;123
000060  f7fffffe          BL       is_leap_year
000064  b110              CBZ      r0,|L5.108|
000066  2d01              CMP      r5,#1                 ;123
000068  d100              BNE      |L5.108|
00006a  444c              ADD      r4,r4,r9              ;124
                  |L5.108|
00006c  1c6d              ADDS     r5,r5,#1              ;124
00006e  b2ad              UXTH     r5,r5                 ;121
                  |L5.112|
000070  42bd              CMP      r5,r7                 ;121
000072  d3ed              BCC      |L5.80|
000074  f24021a3          MOV      r1,#0x2a3             ;126
000078  fb0af001          MUL      r0,r10,r1             ;126
00007c  4913              LDR      r1,|L5.204|
00007e  eb0410c0          ADD      r0,r4,r0,LSL #7       ;126
000082  4249              RSBS     r1,r1,#0              ;126
000084  4408              ADD      r0,r0,r1              ;126
000086  ebcb124b          RSB      r2,r11,r11,LSL #5     ;127
00008a  ebc2210b          RSB      r1,r2,r11,LSL #8      ;127
00008e  eb001001          ADD      r0,r0,r1,LSL #4       ;127
000092  990a              LDR      r1,[sp,#0x28]         ;128
000094  ebc11101          RSB      r1,r1,r1,LSL #4       ;128
000098  eb000081          ADD      r0,r0,r1,LSL #2       ;128
00009c  990b              LDR      r1,[sp,#0x2c]         ;129
00009e  1844              ADDS     r4,r0,r1              ;129
0000a0  2101              MOVS     r1,#1                 ;131
0000a2  f04f50c0          MOV      r0,#0x18000000        ;131
0000a6  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000aa  2001              MOVS     r0,#1                 ;132
0000ac  f7fffffe          BL       PWR_BackupAccessCmd
0000b0  4620              MOV      r0,r4                 ;133
0000b2  f7fffffe          BL       RTC_SetCounter
0000b6  f7fffffe          BL       RTC_WaitForLastTask
0000ba  2000              MOVS     r0,#0                 ;137
0000bc  e7ac              B        |L5.24|
;;;139    
                          ENDP

0000be  0000              DCW      0x0000
                  |L5.192|
                          DCD      0x01e28500
                  |L5.196|
                          DCD      0x01e13380
                  |L5.200|
                          DCD      ||.constdata||+0xc
                  |L5.204|
                          DCD      0x00015180

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  calendar
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  table_week
000000  00030306          DCB      0x00,0x03,0x03,0x06
000004  01040602          DCB      0x01,0x04,0x06,0x02
000008  05000305          DCB      0x05,0x00,0x03,0x05
                  mon_table
00000c  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000010  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000014  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.data||, DATA, ALIGN=1

                  daycnt
000000  0000              DCW      0x0000
