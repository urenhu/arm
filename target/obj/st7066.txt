; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\st7066.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\st7066.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\core -I..\STM32F10x_StdPeriph_Driver\inc -I..\app -I..\usr_lib -I..\ctt -I..\glcd\st7066 -I..\sensor -I..\free_rtos -I..\glcd\glcd-ili9328 -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\st7066.crf ..\glcd\st7066\st7066.c]
                          THUMB

                          AREA ||i.PIN_RESET||, CODE, READONLY, ALIGN=2

                  PIN_RESET PROC
;;;63     //--------------------------------------------------------------
;;;64     static void PIN_RESET(int pin) {  GPIO_ResetBits(oDev[pin].port, oDev[pin].pin ); }
000000  eb000140          ADD      r1,r0,r0,LSL #1
000004  4803              LDR      r0,|L1.20|
000006  eb0000c1          ADD      r0,r0,r1,LSL #3
00000a  8901              LDRH     r1,[r0,#8]
00000c  6840              LDR      r0,[r0,#4]
00000e  f7ffbffe          B.W      GPIO_ResetBits
;;;65     static void PIN_SET  (int pin) {  GPIO_SetBits  (oDev[pin].port, oDev[pin].pin ); }
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.PIN_SET||, CODE, READONLY, ALIGN=2

                  PIN_SET PROC
;;;64     static void PIN_RESET(int pin) {  GPIO_ResetBits(oDev[pin].port, oDev[pin].pin ); }
;;;65     static void PIN_SET  (int pin) {  GPIO_SetBits  (oDev[pin].port, oDev[pin].pin ); }
000000  eb000140          ADD      r1,r0,r0,LSL #1
000004  4803              LDR      r0,|L2.20|
000006  eb0000c1          ADD      r0,r0,r1,LSL #3
00000a  8901              LDRH     r1,[r0,#8]
00000c  6840              LDR      r0,[r0,#4]
00000e  f7ffbffe          B.W      GPIO_SetBits
;;;66     static void dev_GPIO_init(void);
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.dev_GPIO_init||, CODE, READONLY, ALIGN=2

                  dev_GPIO_init PROC
;;;203    //--------------------------------------------------------------
;;;204    static void dev_GPIO_init(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;205    {
;;;206      GPIO_InitTypeDef  GPIO_InitStructure;
;;;207      int  pin;
;;;208      
;;;209      for(pin=0; pin<PIN_NUM; pin++) {
000004  2400              MOVS     r4,#0
;;;210        // Clock Enable
;;;211        RCC_APB2PeriphClockCmd(oDev[pin].clk, ENABLE);
000006  4e13              LDR      r6,|L3.84|
;;;212    
;;;213        // Config als Digital-output
;;;214        GPIO_InitStructure.GPIO_Pin     = oDev[pin].pin;
;;;215        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;
000008  2718              MOVS     r7,#0x18
;;;216        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  f04f0803          MOV      r8,#3
00000e  bf00              NOP                            ;211
                  |L3.16|
000010  eb040044          ADD      r0,r4,r4,LSL #1       ;211
000014  eb0605c0          ADD      r5,r6,r0,LSL #3       ;211
000018  2101              MOVS     r1,#1                 ;211
00001a  68e8              LDR      r0,[r5,#0xc]          ;211
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
000020  8928              LDRH     r0,[r5,#8]            ;214
000022  f8ad0000          STRH     r0,[sp,#0]            ;214
000026  f88d7003          STRB     r7,[sp,#3]            ;215
00002a  f88d8002          STRB     r8,[sp,#2]
;;;217        GPIO_Init(oDev[pin].port, &GPIO_InitStructure);
00002e  4669              MOV      r1,sp
000030  6868              LDR      r0,[r5,#4]
000032  f7fffffe          BL       GPIO_Init
;;;218    
;;;219        // set default of each pin 
;;;220        if (oDev[pin].initValue == Bit_RESET) {
000036  7c28              LDRB     r0,[r5,#0x10]
000038  2800              CMP      r0,#0
;;;221    	      PIN_RESET(pin);
;;;222        } else {
;;;223    	      PIN_SET(pin);
00003a  4620              MOV      r0,r4
00003c  d006              BEQ      |L3.76|
00003e  f7fffffe          BL       PIN_SET
                  |L3.66|
000042  1c64              ADDS     r4,r4,#1
000044  2c08              CMP      r4,#8                 ;209
000046  d3e3              BCC      |L3.16|
;;;224    	  }
;;;225      } // for end   
;;;226    }
000048  e8bd83f8          POP      {r3-r9,pc}
                  |L3.76|
00004c  f7fffffe          BL       PIN_RESET
000050  e7f7              B        |L3.66|
;;;227    
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      ||.data||

                          AREA ||i.dev_lcd_strob||, CODE, READONLY, ALIGN=1

                  dev_lcd_strob PROC
;;;229    //--------------------------------------------------------------
;;;230    static void dev_lcd_strob(void)
000000  b510              PUSH     {r4,lr}
;;;231    {
;;;232      PIN_SET   (LCD_E);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       PIN_SET
;;;233      delay_us  (LCD_CLK_PAUSE); // 1.6ms  	
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       delay_us
;;;234      PIN_RESET (LCD_E);
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       PIN_RESET
;;;235      delay_us  (LCD_CLK_PAUSE); // 1.6ms 
000014  e8bd4010          POP      {r4,lr}
000018  2001              MOVS     r0,#1
00001a  f7ffbffe          B.W      delay_us
;;;236    }
;;;237    
                          ENDP


                          AREA ||i.dev_write_command||, CODE, READONLY, ALIGN=1

                  dev_write_command PROC
;;;239    //--------------------------------------------------------------
;;;240    static void dev_write_command(uint8_t data )
000000  b510              PUSH     {r4,lr}
;;;241    {
000002  4604              MOV      r4,r0
;;;242      delay_us  (LCD_CMD_WAIT); // command and data wait  
000004  2028              MOVS     r0,#0x28
000006  f7fffffe          BL       delay_us
;;;243      PIN_RESET (LCD_RS);       // RS=Lo (Command)
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       PIN_RESET
;;;244      PIN_RESET (LCD_RW);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       PIN_RESET
;;;245      
;;;246      if((data&0x80)!=0) PIN_SET(LCD_D7); else PIN_RESET(LCD_D7);
000016  0620              LSLS     r0,r4,#24
000018  f04f0007          MOV      r0,#7
00001c  d502              BPL      |L5.36|
00001e  f7fffffe          BL       PIN_SET
000022  e001              B        |L5.40|
                  |L5.36|
000024  f7fffffe          BL       PIN_RESET
                  |L5.40|
;;;247      if((data&0x40)!=0) PIN_SET(LCD_D6); else PIN_RESET(LCD_D6);
000028  0660              LSLS     r0,r4,#25
00002a  f04f0006          MOV      r0,#6
00002e  d502              BPL      |L5.54|
000030  f7fffffe          BL       PIN_SET
000034  e001              B        |L5.58|
                  |L5.54|
000036  f7fffffe          BL       PIN_RESET
                  |L5.58|
;;;248      if((data&0x20)!=0) PIN_SET(LCD_D5); else PIN_RESET(LCD_D5);
00003a  06a0              LSLS     r0,r4,#26
00003c  f04f0005          MOV      r0,#5
000040  d502              BPL      |L5.72|
000042  f7fffffe          BL       PIN_SET
000046  e001              B        |L5.76|
                  |L5.72|
000048  f7fffffe          BL       PIN_RESET
                  |L5.76|
;;;249      if((data&0x10)!=0) PIN_SET(LCD_D4); else PIN_RESET(LCD_D4);
00004c  06e0              LSLS     r0,r4,#27
00004e  f04f0004          MOV      r0,#4
000052  d502              BPL      |L5.90|
000054  f7fffffe          BL       PIN_SET
000058  e001              B        |L5.94|
                  |L5.90|
00005a  f7fffffe          BL       PIN_RESET
                  |L5.94|
;;;250      dev_lcd_strob();
00005e  f7fffffe          BL       dev_lcd_strob
;;;251      if((data&0x08)!=0) PIN_SET(LCD_D7); else PIN_RESET(LCD_D7);
000062  0720              LSLS     r0,r4,#28
000064  f04f0007          MOV      r0,#7
000068  d502              BPL      |L5.112|
00006a  f7fffffe          BL       PIN_SET
00006e  e001              B        |L5.116|
                  |L5.112|
000070  f7fffffe          BL       PIN_RESET
                  |L5.116|
;;;252      if((data&0x04)!=0) PIN_SET(LCD_D6); else PIN_RESET(LCD_D6);
000074  0760              LSLS     r0,r4,#29
000076  f04f0006          MOV      r0,#6
00007a  d502              BPL      |L5.130|
00007c  f7fffffe          BL       PIN_SET
000080  e001              B        |L5.134|
                  |L5.130|
000082  f7fffffe          BL       PIN_RESET
                  |L5.134|
;;;253      if((data&0x02)!=0) PIN_SET(LCD_D5); else PIN_RESET(LCD_D5);
000086  07a0              LSLS     r0,r4,#30
000088  f04f0005          MOV      r0,#5
00008c  d502              BPL      |L5.148|
00008e  f7fffffe          BL       PIN_SET
000092  e001              B        |L5.152|
                  |L5.148|
000094  f7fffffe          BL       PIN_RESET
                  |L5.152|
;;;254      if((data&0x01)!=0) PIN_SET(LCD_D4); else PIN_RESET(LCD_D4);
000098  07e0              LSLS     r0,r4,#31
00009a  f04f0004          MOV      r0,#4
00009e  d002              BEQ      |L5.166|
0000a0  f7fffffe          BL       PIN_SET
0000a4  e001              B        |L5.170|
                  |L5.166|
0000a6  f7fffffe          BL       PIN_RESET
                  |L5.170|
;;;255      dev_lcd_strob();
0000aa  e8bd4010          POP      {r4,lr}
0000ae  f7ffbffe          B.W      dev_lcd_strob
;;;256    }
;;;257    
                          ENDP


                          AREA ||i.dev_write_data||, CODE, READONLY, ALIGN=1

                  dev_write_data PROC
;;;260    //--------------------------------------------------------------
;;;261    static void dev_write_data(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263      delay_us  (LCD_CMD_WAIT); // command and data wait  
000004  2028              MOVS     r0,#0x28
000006  f7fffffe          BL       delay_us
;;;264      PIN_SET   (LCD_RS);      //   RS=Hi (Data)
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       PIN_SET
;;;265      PIN_RESET (LCD_RW);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       PIN_RESET
;;;266      
;;;267      if((data&0x80)!=0) PIN_SET(LCD_D7); else PIN_RESET(LCD_D7);
000016  0620              LSLS     r0,r4,#24
000018  f04f0007          MOV      r0,#7
00001c  d502              BPL      |L6.36|
00001e  f7fffffe          BL       PIN_SET
000022  e001              B        |L6.40|
                  |L6.36|
000024  f7fffffe          BL       PIN_RESET
                  |L6.40|
;;;268      if((data&0x40)!=0) PIN_SET(LCD_D6); else PIN_RESET(LCD_D6);
000028  0660              LSLS     r0,r4,#25
00002a  f04f0006          MOV      r0,#6
00002e  d502              BPL      |L6.54|
000030  f7fffffe          BL       PIN_SET
000034  e001              B        |L6.58|
                  |L6.54|
000036  f7fffffe          BL       PIN_RESET
                  |L6.58|
;;;269      if((data&0x20)!=0) PIN_SET(LCD_D5); else PIN_RESET(LCD_D5);
00003a  06a0              LSLS     r0,r4,#26
00003c  f04f0005          MOV      r0,#5
000040  d502              BPL      |L6.72|
000042  f7fffffe          BL       PIN_SET
000046  e001              B        |L6.76|
                  |L6.72|
000048  f7fffffe          BL       PIN_RESET
                  |L6.76|
;;;270      if((data&0x10)!=0) PIN_SET(LCD_D4); else PIN_RESET(LCD_D4);
00004c  06e0              LSLS     r0,r4,#27
00004e  f04f0004          MOV      r0,#4
000052  d502              BPL      |L6.90|
000054  f7fffffe          BL       PIN_SET
000058  e001              B        |L6.94|
                  |L6.90|
00005a  f7fffffe          BL       PIN_RESET
                  |L6.94|
;;;271      dev_lcd_strob();
00005e  f7fffffe          BL       dev_lcd_strob
;;;272    
;;;273      if((data&0x08)!=0) PIN_SET(LCD_D7); else PIN_RESET(LCD_D7);
000062  0720              LSLS     r0,r4,#28
000064  f04f0007          MOV      r0,#7
000068  d502              BPL      |L6.112|
00006a  f7fffffe          BL       PIN_SET
00006e  e001              B        |L6.116|
                  |L6.112|
000070  f7fffffe          BL       PIN_RESET
                  |L6.116|
;;;274      if((data&0x04)!=0) PIN_SET(LCD_D6); else PIN_RESET(LCD_D6);
000074  0760              LSLS     r0,r4,#29
000076  f04f0006          MOV      r0,#6
00007a  d502              BPL      |L6.130|
00007c  f7fffffe          BL       PIN_SET
000080  e001              B        |L6.134|
                  |L6.130|
000082  f7fffffe          BL       PIN_RESET
                  |L6.134|
;;;275      if((data&0x02)!=0) PIN_SET(LCD_D5); else PIN_RESET(LCD_D5);
000086  07a0              LSLS     r0,r4,#30
000088  f04f0005          MOV      r0,#5
00008c  d502              BPL      |L6.148|
00008e  f7fffffe          BL       PIN_SET
000092  e001              B        |L6.152|
                  |L6.148|
000094  f7fffffe          BL       PIN_RESET
                  |L6.152|
;;;276      if((data&0x01)!=0) PIN_SET(LCD_D4); else PIN_RESET(LCD_D4);
000098  07e0              LSLS     r0,r4,#31
00009a  f04f0004          MOV      r0,#4
00009e  d002              BEQ      |L6.166|
0000a0  f7fffffe          BL       PIN_SET
0000a4  e001              B        |L6.170|
                  |L6.166|
0000a6  f7fffffe          BL       PIN_RESET
                  |L6.170|
;;;277      dev_lcd_strob();
0000aa  e8bd4010          POP      {r4,lr}
0000ae  f7ffbffe          B.W      dev_lcd_strob
;;;278    }
;;;279    
                          ENDP


                          AREA ||i.st7066_clear||, CODE, READONLY, ALIGN=1

                  st7066_clear PROC
;;;114    //--------------------------------------------------------------
;;;115    void st7066_clear(void)
000000  2001              MOVS     r0,#1
;;;116    {
;;;117      dev_write_command(LCD_CMD_CLEAR);
000002  f7ffbffe          B.W      dev_write_command
;;;118    }
;;;119    
                          ENDP


                          AREA ||i.st7066_init||, CODE, READONLY, ALIGN=1

                  st7066_init PROC
;;;74     //--------------------------------------------------------------
;;;75     void st7066_init(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77       dev_GPIO_init();
000002  f7fffffe          BL       dev_GPIO_init
;;;78     
;;;79       // after power on wait 15 ms 
;;;80       delay_ms( 20 );
000006  2014              MOVS     r0,#0x14
000008  f7fffffe          BL       delay_ms
;;;81       
;;;82       PIN_RESET (LCD_RS);      // RS=Lo (Command)
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       PIN_RESET
;;;83       PIN_RESET (LCD_RW);
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       PIN_RESET
;;;84       PIN_RESET (LCD_D7);
000018  2007              MOVS     r0,#7
00001a  f7fffffe          BL       PIN_RESET
;;;85       PIN_RESET (LCD_D6);
00001e  2006              MOVS     r0,#6
000020  f7fffffe          BL       PIN_RESET
;;;86       PIN_SET   (LCD_D5);
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       PIN_SET
;;;87       PIN_SET   (LCD_D4); 
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       PIN_SET
;;;88       dev_lcd_strob();
000030  f7fffffe          BL       dev_lcd_strob
;;;89       
;;;90       delay_ms( 5 );
000034  2005              MOVS     r0,#5
000036  f7fffffe          BL       delay_ms
;;;91       dev_lcd_strob();
00003a  f7fffffe          BL       dev_lcd_strob
;;;92     	
;;;93       delay_us( 100 );
00003e  2064              MOVS     r0,#0x64
000040  f7fffffe          BL       delay_us
;;;94       dev_lcd_strob();
000044  f7fffffe          BL       dev_lcd_strob
;;;95     	
;;;96       delay_ms( 5 );
000048  2005              MOVS     r0,#5
00004a  f7fffffe          BL       delay_ms
;;;97       dev_lcd_strob();
00004e  f7fffffe          BL       dev_lcd_strob
;;;98     
;;;99       PIN_RESET(LCD_D4); 
000052  2004              MOVS     r0,#4
000054  f7fffffe          BL       PIN_RESET
;;;100      dev_lcd_strob();          // set 4 bits mode,
000058  f7fffffe          BL       dev_lcd_strob
;;;101         
;;;102      dev_write_command (0x20); // function set 4 bits, basic,  
00005c  2020              MOVS     r0,#0x20
00005e  f7fffffe          BL       dev_write_command
;;;103      dev_write_command (0x08); // disp off 
000062  2008              MOVS     r0,#8
000064  f7fffffe          BL       dev_write_command
;;;104      dev_write_command (0x01); // clear display
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       dev_write_command
;;;105      dev_write_command (0x06); // LCD_CMD_ENTRY_MODE, basic, increase
00006e  2006              MOVS     r0,#6
000070  f7fffffe          BL       dev_write_command
;;;106      dev_write_command(LCD_CMD_DISP_M1);
000074  200c              MOVS     r0,#0xc
000076  f7fffffe          BL       dev_write_command
;;;107      dev_write_command(LCD_CMD_CLEAR);
00007a  e8bd4010          POP      {r4,lr}
00007e  2001              MOVS     r0,#1
000080  f7ffbffe          B.W      dev_write_command
;;;108    
;;;109    }
;;;110    
                          ENDP


                          AREA ||i.st7066_puts||, CODE, READONLY, ALIGN=1

                  st7066_puts PROC
;;;164    //--------------------------------------------------------------
;;;165    void st7066_puts(uint8_t x, uint8_t y, char *ptr)
000000  b510              PUSH     {r4,lr}
;;;166    {
000002  4614              MOV      r4,r2
000004  2810              CMP      r0,#0x10
000006  d300              BCC      |L9.10|
000008  2000              MOVS     r0,#0
                  |L9.10|
00000a  2902              CMP      r1,#2
00000c  d300              BCC      |L9.16|
00000e  2100              MOVS     r1,#0
                  |L9.16|
000010  0789              LSLS     r1,r1,#30
000012  ea406111          ORR      r1,r0,r1,LSR #24
000016  f0410080          ORR      r0,r1,#0x80
00001a  f7fffffe          BL       dev_write_command
;;;167      dev_set_cursor(x,y);
;;;168      while (*ptr != 0) {
00001e  e002              B        |L9.38|
                  |L9.32|
;;;169        dev_write_data(*ptr);
000020  f7fffffe          BL       dev_write_data
000024  1c64              ADDS     r4,r4,#1
                  |L9.38|
000026  7820              LDRB     r0,[r4,#0]            ;168
000028  2800              CMP      r0,#0                 ;168
00002a  d1f9              BNE      |L9.32|
;;;170        ptr++;
;;;171      }
;;;172    }
00002c  bd10              POP      {r4,pc}
;;;173    
                          ENDP


                          AREA ||i.st7066_setline||, CODE, READONLY, ALIGN=2

                  st7066_setline PROC
;;;143    // 
;;;144    void st7066_setline(int line)
000000  2801              CMP      r0,#1
;;;145    {
000002  d003              BEQ      |L10.12|
;;;146    	switch (line){
;;;147    	case 1: 
;;;148    		dev_write_command(0xC0);
;;;149    		break;
;;;150    	case 2:
;;;151    	case 3:
;;;152    	case 4:
;;;153    	default:
;;;154    		dev_write_command(0x80);
000004  f05f0080          MOVS.W   r0,#0x80
                  |L10.8|
000008  f7ffbffe          B.W      dev_write_command
                  |L10.12|
00000c  20c0              MOVS     r0,#0xc0              ;148
00000e  e7fb              B        |L10.8|
;;;155    		break;
;;;156    	}
;;;157    }
;;;158    
                          ENDP


                          AREA ||i.st7066_setmode||, CODE, READONLY, ALIGN=1

                  st7066_setmode PROC
;;;123    //--------------------------------------------------------------
;;;124    void st7066_setmode(int mode)
000000  b140              CBZ      r0,|L11.20|
;;;125    {
;;;126    	switch (mode) {
000002  2801              CMP      r0,#1
000004  d008              BEQ      |L11.24|
000006  2802              CMP      r0,#2
000008  d008              BEQ      |L11.28|
00000a  2803              CMP      r0,#3
00000c  d108              BNE      |L11.32|
;;;127    	case  LCD_OFF:
;;;128    	  dev_write_command(LCD_CMD_DISP_M0);
;;;129    	  break;
;;;130    	case  LCD_ON:
;;;131    	  dev_write_command(LCD_CMD_DISP_M1);
;;;132    	  break;
;;;133    	case  LCD_CURSOR:
;;;134          dev_write_command(LCD_CMD_DISP_M2);
;;;135    	  break;
;;;136    	case  LCD_BLINK:
;;;137    	  dev_write_command(LCD_CMD_DISP_M3);
00000e  200f              MOVS     r0,#0xf
                  |L11.16|
000010  f7ffbffe          B.W      dev_write_command
                  |L11.20|
000014  2008              MOVS     r0,#8                 ;128
000016  e7fb              B        |L11.16|
                  |L11.24|
000018  200c              MOVS     r0,#0xc               ;131
00001a  e7f9              B        |L11.16|
                  |L11.28|
00001c  200e              MOVS     r0,#0xe               ;134
00001e  e7f7              B        |L11.16|
                  |L11.32|
;;;138    	  break;
;;;139    	}
;;;140    }
000020  4770              BX       lr
;;;141    
                          ENDP


                          AREA ||i.st7066_writecg||, CODE, READONLY, ALIGN=1

                  st7066_writecg PROC
;;;178    //--------------------------------------------------------------
;;;179    void st7066_writecg(uint8_t nr, uint8_t *pixeldata)
000000  b570              PUSH     {r4-r6,lr}
;;;180    {
000002  460d              MOV      r5,r1
;;;181      uint8_t n;
;;;182    
;;;183      if ( nr>7 ){ 
000004  2807              CMP      r0,#7
000006  d900              BLS      |L12.10|
;;;184    	  nr = 7;
000008  2007              MOVS     r0,#7
                  |L12.10|
;;;185      }
;;;186      nr   = (nr<<3);
00000a  06c0              LSLS     r0,r0,#27
00000c  0e00              LSRS     r0,r0,#24
;;;187      nr  |= 0x40;
00000e  f0400040          ORR      r0,r0,#0x40
;;;188      dev_write_command(nr);
000012  f7fffffe          BL       dev_write_command
;;;189      for(n=0; n<8; n++) {
000016  2400              MOVS     r4,#0
                  |L12.24|
;;;190        dev_write_data(pixeldata[n]);
000018  5d28              LDRB     r0,[r5,r4]
00001a  f7fffffe          BL       dev_write_data
00001e  1c64              ADDS     r4,r4,#1
000020  b2e4              UXTB     r4,r4                 ;189
000022  2c08              CMP      r4,#8                 ;189
000024  d3f8              BCC      |L12.24|
;;;191      }
;;;192    }
000026  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  oDev
                          DCD      0x00000000
                          DCD      0x40010c00
000008  0100              DCW      0x0100
00000a  0000              DCB      0x00,0x00
                          DCD      0x00000008
000010  01000000          DCB      0x01,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000001
                          DCD      0x40010800
000020  0800              DCW      0x0800
000022  0000              DCB      0x00,0x00
                          DCD      0x00000004
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000002
                          DCD      0x40010800
000038  1000              DCW      0x1000
00003a  0000              DCB      0x00,0x00
                          DCD      0x00000004
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000003
                          DCD      0x40010800
000050  8000              DCW      0x8000
000052  0000              DCB      0x00,0x00
                          DCD      0x00000004
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000004
                          DCD      0x40010c00
000068  0010              DCW      0x0010
00006a  0000              DCB      0x00,0x00
                          DCD      0x00000040
000070  00000000          DCB      0x00,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000005
                          DCD      0x40010c00
000080  0020              DCW      0x0020
000082  0000              DCB      0x00,0x00
                          DCD      0x00000040
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000006
                          DCD      0x40010c00
000098  0040              DCW      0x0040
00009a  0000              DCB      0x00,0x00
                          DCD      0x00000040
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000007
                          DCD      0x40010c00
0000b0  0080              DCW      0x0080
0000b2  0000              DCB      0x00,0x00
                          DCD      0x00000040
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
