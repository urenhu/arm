L 1 "..\free_rtos\croutine.c"
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N#include "FreeRTOS.h"
L 1 "..\free_rtos\FreeRTOS.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef INC_FREERTOS_H
N#define INC_FREERTOS_H
N
N
N/*
N * Include the generic headers required for the FreeRTOS port being used.
N */
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 83 "..\free_rtos\FreeRTOS.h" 2
N
N/* Basic FreeRTOS definitions. */
N#include "projdefs.h"
L 1 "..\free_rtos\projdefs.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef PROJDEFS_H
N#define PROJDEFS_H
N
N/* Defines the prototype to which task functions must conform. */
Ntypedef void (*pdTASK_CODE)( void * );
N
N#define pdTRUE		( 1 )
N#define pdFALSE		( 0 )
N
N#define pdPASS									( 1 )
N#define pdFAIL									( 0 )
N#define errQUEUE_EMPTY							( 0 )
N#define errQUEUE_FULL							( 0 )
N
N/* Error definitions. */
N#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	( -1 )
N#define errNO_TASK_TO_RUN						( -2 )
N#define errQUEUE_BLOCKED						( -4 )
N#define errQUEUE_YIELD							( -5 )
N
N#endif /* PROJDEFS_H */
N
N
N
L 86 "..\free_rtos\FreeRTOS.h" 2
N
N/* Application specific configuration options. */
N#include "FreeRTOSConfig.h"
L 1 "..\free_rtos\FreeRTOSConfig.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef FREERTOS_CONFIG_H
N#define FREERTOS_CONFIG_H
N
N/*-----------------------------------------------------------
N * Application specific definitions.
N *
N * These definitions should be adjusted for your particular hardware and
N * application requirements.
N *
N * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
N * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
N *
N * See http://www.freertos.org/a00110.html.
N *----------------------------------------------------------*/
N
N#define configUSE_PREEMPTION		1
N#define configUSE_IDLE_HOOK			0
N#define configUSE_TICK_HOOK			0
N#define configCPU_CLOCK_HZ			( ( unsigned long ) 72000000 )	
N#define configTICK_RATE_HZ			( ( portTickType ) 1000 )
N#define configMAX_PRIORITIES		( ( unsigned portBASE_TYPE ) 5 )
N#define configMINIMAL_STACK_SIZE	( ( unsigned short ) 128 )
N#define configTOTAL_HEAP_SIZE		( ( size_t ) ( 17 * 1024 ) )
N#define configMAX_TASK_NAME_LEN		( 16 )
N#define configUSE_TRACE_FACILITY	0
N#define configUSE_16_BIT_TICKS		0
N#define configIDLE_SHOULD_YIELD		1
N
N/* Co-routine definitions. */
N#define configUSE_CO_ROUTINES 		0
N#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )
N
N/* Set the following definitions to 1 to include the API function, or zero
Nto exclude the API function. */
N
N#define INCLUDE_vTaskPrioritySet		1
N#define INCLUDE_uxTaskPriorityGet		1
N#define INCLUDE_vTaskDelete				1
N#define INCLUDE_vTaskCleanUpResources	0
N#define INCLUDE_vTaskSuspend			1
N#define INCLUDE_vTaskDelayUntil			1
N#define INCLUDE_vTaskDelay				1
N
N/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
N(lowest) to 0 (1?) (highest). */
N#define configKERNEL_INTERRUPT_PRIORITY 		255
N/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
NSee http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
N#define configMAX_SYSCALL_INTERRUPT_PRIORITY 	191 /* equivalent to 0xb0, or priority 11. */
N
N
N/* This is the value being used as per the ST library which permits 16
Npriority values, 0 to 15.  This must correspond to the
NconfigKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NNVIC value of 255. */
N#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY	15
N
N#endif /* FREERTOS_CONFIG_H */
N
L 89 "..\free_rtos\FreeRTOS.h" 2
N
N/* configUSE_PORT_OPTIMISED_TASK_SELECTION must be defined before portable.h
Nis included as it is used by the port layer. */
N#ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
N	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 0
N#endif
N
N/* Definitions specific to the port being used. */
N#include "portable.h"
L 1 "..\free_rtos\portable.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*-----------------------------------------------------------
N * Portable layer API.  Each function must be defined for each port.
N *----------------------------------------------------------*/
N
N#ifndef PORTABLE_H
N#define PORTABLE_H
N
N/* Include the macro file relevant to the port being used. */
N
N#ifdef OPEN_WATCOM_INDUSTRIAL_PC_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\pc\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef OPEN_WATCOM_FLASH_LITE_186_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\flsh186\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef GCC_MEGA_AVR
S	#include "../portable/GCC/ATMega323/portmacro.h"
N#endif
N
N#ifdef IAR_MEGA_AVR
S	#include "../portable/IAR/ATMega323/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC24_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_DSPIC_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC18F_PORT
S	#include "..\..\Source\portable\MPLAB\PIC18F\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC32MX_PORT
S	#include "..\..\Source\portable\MPLAB\PIC32MX\portmacro.h"
N#endif
N
N#ifdef _FEDPICC
S	#include "libFreeRTOS/Include/portmacro.h"
N#endif
N
N#ifdef SDCC_CYGNAL
S	#include "../../Source/portable/SDCC/Cygnal/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7
S	#include "../../Source/portable/GCC/ARM7_LPC2000/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7_ECLIPSE
S	#include "portmacro.h"
N#endif
N
N#ifdef ROWLEY_LPC23xx
S	#include "../../Source/portable/GCC/ARM7_LPC23xx/portmacro.h"
N#endif
N
N#ifdef IAR_MSP430
S	#include "..\..\Source\portable\IAR\MSP430\portmacro.h"	
N#endif
N	
N#ifdef GCC_MSP430
S	#include "../../Source/portable/GCC/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ROWLEY_MSP430
S	#include "../../Source/portable/Rowley/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ARM7_LPC21xx_KEIL_RVDS
S	#include "..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.h"
N#endif
N
N#ifdef SAM7_GCC
S	#include "../../Source/portable/GCC/ARM7_AT91SAM7S/portmacro.h"
N#endif
N
N#ifdef SAM7_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM7S64\portmacro.h"
N#endif
N
N#ifdef SAM9XE_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM9XE\portmacro.h"
N#endif
N
N#ifdef LPC2000_IAR
S	#include "..\..\Source\portable\IAR\LPC2000\portmacro.h"
N#endif
N
N#ifdef STR71X_IAR
S	#include "..\..\Source\portable\IAR\STR71x\portmacro.h"
N#endif
N
N#ifdef STR75X_IAR
S	#include "..\..\Source\portable\IAR\STR75x\portmacro.h"
N#endif
N	
N#ifdef STR75X_GCC
S	#include "..\..\Source\portable\GCC\STR75x\portmacro.h"
N#endif
N
N#ifdef STR91X_IAR
S	#include "..\..\Source\portable\IAR\STR91x\portmacro.h"
N#endif
N	
N#ifdef GCC_H8S
S	#include "../../Source/portable/GCC/H8S2329/portmacro.h"
N#endif
N
N#ifdef GCC_AT91FR40008
S	#include "../../Source/portable/GCC/ARM7_AT91FR40008/portmacro.h"
N#endif
N
N#ifdef RVDS_ARMCM3_LM3S102
S	#include "../../Source/portable/RVDS/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3_LM3S102
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARM_CM3
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARMCM3_LM
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N	
N#ifdef HCS12_CODE_WARRIOR
S	#include "../../Source/portable/CodeWarrior/HCS12/portmacro.h"
N#endif	
N
N#ifdef MICROBLAZE_GCC
S	#include "../../Source/portable/GCC/MicroBlaze/portmacro.h"
N#endif
N
N#ifdef TERN_EE
S	#include "..\..\Source\portable\Paradigm\Tern_EE\small\portmacro.h"
N#endif
N
N#ifdef GCC_HCS12
S	#include "../../Source/portable/GCC/HCS12/portmacro.h"
N#endif
N
N#ifdef GCC_MCF5235
S    #include "../../Source/portable/GCC/MCF5235/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_GCC
S	#include "../../../Source/portable/GCC/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_CODEWARRIOR
S	#include "../../Source/portable/CodeWarrior/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef GCC_PPC405
S	#include "../../Source/portable/GCC/PPC405_Xilinx/portmacro.h"
N#endif
N
N#ifdef GCC_PPC440
S	#include "../../Source/portable/GCC/PPC440_Xilinx/portmacro.h"
N#endif
N
N#ifdef _16FX_SOFTUNE
S	#include "..\..\Source\portable\Softune\MB96340\portmacro.h"
N#endif
N
N#ifdef BCC_INDUSTRIAL_PC_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\PC\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef BCC_FLASH_LITE_186_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\flsh186\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef __GNUC__
S   #ifdef __AVR32_AVR32A__
S	   #include "portmacro.h"
S   #endif
N#endif
N
N#ifdef __ICCAVR32__
S   #ifdef __CORE__
S      #if __CORE__ == __AVR32A__
S	      #include "portmacro.h"
S      #endif
S   #endif
N#endif
N
N#ifdef __91467D
S	#include "portmacro.h"
N#endif
N
N#ifdef __96340
S	#include "portmacro.h"
N#endif
N
N
N#ifdef __IAR_V850ES_Fx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3_L__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Hx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_78K0R_Kx3__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N#ifdef __IAR_78K0R_Kx3L__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N/* Catch all to ensure portmacro.h is included in the build.  Newer demos
Nhave the path as part of the project options, rather than as relative from
Nthe project location.  If portENTER_CRITICAL() has not been defined then
Nportmacro.h has not yet been included - as every portmacro.h provides a
NportENTER_CRITICAL() definition.  Check the demo application for your demo
Nto find the path to the correct portmacro.h file. */
N#ifndef portENTER_CRITICAL
N	#include "portmacro.h"	
L 1 "..\free_rtos\portmacro.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef PORTMACRO_H
N#define PORTMACRO_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * Port specific definitions.
N *
N * The settings in this file configure FreeRTOS correctly for the
N * given hardware and compiler.
N *
N * These settings should not be altered.
N *-----------------------------------------------------------
N */
N
N/* Type definitions. */
N#define portCHAR		     char
N#define portFLOAT		     float
N#define portDOUBLE		   double
N#define portLONG         long
N#define portSHORT	       short
N#define portSTACK_TYPE	 unsigned portLONG
N#define portBASE_TYPE	   long
N
N#if( configUSE_16_BIT_TICKS == 1 )
X#if( 0 == 1 )
S	typedef unsigned portSHORT                portTickType;
S	#define portMAX_DELAY ( portTickType )    0xffff
N#else
N	typedef unsigned portLONG                 portTickType;
X	typedef unsigned long                 portTickType;
N	#define portMAX_DELAY ( portTickType )    0xffffffff
N#endif
N/*-----------------------------------------------------------*/
N/* Architecture specifics. */
N#define portSTACK_GROWTH			  ( -1 )
N#define portTICK_RATE_MS			  ( ( portTickType ) 1000 / configTICK_RATE_HZ )
N#define portBYTE_ALIGNMENT			 8
N/*-----------------------------------------------------------*/
N/* Scheduler utilities. */
Nextern void                        vPortYield( void );
N#define portNVIC_INT_CTRL_REG		   ( * ( ( volatile unsigned long * ) 0xe000ed04 ) )
N#define portNVIC_PENDSVSET_BIT		 ( 1UL << 28UL )
N#define portYIELD()					        vPortYield()
N#define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
N/*-----------------------------------------------------------*/
N/* Critical section management. */
Nextern unsigned long   ulPortSetInterruptMask( void );
Nextern void            vPortClearInterruptMask( unsigned long ulNewMask );
Nextern void            vPortEnterCritical( void );
Nextern void            vPortExitCritical( void );
N
N#define portDISABLE_INTERRUPTS()				      ulPortSetInterruptMask()
N#define portENABLE_INTERRUPTS()					      vPortClearInterruptMask( 0 )
N#define portENTER_CRITICAL()					        vPortEnterCritical()
N#define portEXIT_CRITICAL()						        vPortExitCritical()
N#define portSET_INTERRUPT_MASK_FROM_ISR()		  ulPortSetInterruptMask()
N#define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
N/*-----------------------------------------------------------*/
N
N/* Tickless idle/low power functionality. */
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
N	extern void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime );
N	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdleTime )
N#endif
N/*-----------------------------------------------------------*/
N
N/* Port specific optimisations. */
N#if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
X#if 0 == 1
S	/* Check the configuration. */
S	#if( configMAX_PRIORITIES > 32 )
S		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is less than or equal to 32.  It is very rare that a system requires more than 10 to 15 difference priorities as tasks that share a priority will time slice.
S	#endif
S
S	/* Store/clear the ready priorities in a bit map. */
S	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )        ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
S	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )         ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
S	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )        uxTopPriority = ( 31 - __clz( ( uxReadyPriorities ) ) )
S
N#endif /* taskRECORD_READY_PRIORITY */
N/*-----------------------------------------------------------*/
N/* Task function macros as described on the FreeRTOS.org WEB site.  These are
N   not necessary for to use this port.  They are defined so the common demo files
N   (which build with all the ports) will build. */
N#define portTASK_FUNCTION_PROTO( vFunction, pvParameters )  void vFunction( void *pvParameters )
N#define portTASK_FUNCTION( vFunction, pvParameters )        void vFunction( void *pvParameters )
N
N/*-----------------------------------------------------------*/
N/* portNOP() is not required by this port. */
N#define portNOP()
N#ifdef __cplusplus
S}
N#endif
N#endif /* PORTMACRO_H */
N
L 329 "..\free_rtos\portable.h" 2
N#endif
N	
N#if portBYTE_ALIGNMENT == 8
X#if 8 == 8
N	#define portBYTE_ALIGNMENT_MASK ( 0x0007 )
N#endif
N
N#if portBYTE_ALIGNMENT == 4
X#if 8 == 4
S	#define portBYTE_ALIGNMENT_MASK	( 0x0003 )
N#endif
N
N#if portBYTE_ALIGNMENT == 2
X#if 8 == 2
S	#define portBYTE_ALIGNMENT_MASK	( 0x0001 )
N#endif
N
N#if portBYTE_ALIGNMENT == 1
X#if 8 == 1
S	#define portBYTE_ALIGNMENT_MASK	( 0x0000 )
N#endif
N
N#ifndef portBYTE_ALIGNMENT_MASK
S	#error "Invalid portBYTE_ALIGNMENT definition"
N#endif
N
N#ifndef portNUM_CONFIGURABLE_REGIONS
N	#define portNUM_CONFIGURABLE_REGIONS 1
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "mpu_wrappers.h"
L 1 "..\free_rtos\mpu_wrappers.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef MPU_WRAPPERS_H
N#define MPU_WRAPPERS_H
N
N/* This file redefines API functions to be called through a wrapper macro, but
Nonly for ports that are using the MPU. */
N#ifdef portUSING_MPU_WRAPPERS
S
S	/* MPU_WRAPPERS_INCLUDED_FROM_API_FILE will be defined when this file is
S	included from queue.c or task.c to prevent it from having an effect within
S	those files. */
S	#ifndef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
S
S		#define xTaskGenericCreate				MPU_xTaskGenericCreate
S		#define vTaskAllocateMPURegions			MPU_vTaskAllocateMPURegions
S		#define vTaskDelete						MPU_vTaskDelete
S		#define vTaskDelayUntil					MPU_vTaskDelayUntil
S		#define vTaskDelay						MPU_vTaskDelay
S		#define uxTaskPriorityGet				MPU_uxTaskPriorityGet
S		#define vTaskPrioritySet				MPU_vTaskPrioritySet
S		#define eTaskGetState					MPU_eTaskGetState
S		#define vTaskSuspend					MPU_vTaskSuspend
S		#define xTaskIsTaskSuspended			MPU_xTaskIsTaskSuspended
S		#define vTaskResume						MPU_vTaskResume
S		#define vTaskSuspendAll					MPU_vTaskSuspendAll
S		#define xTaskResumeAll					MPU_xTaskResumeAll
S		#define xTaskGetTickCount				MPU_xTaskGetTickCount
S		#define uxTaskGetNumberOfTasks			MPU_uxTaskGetNumberOfTasks
S		#define vTaskList						MPU_vTaskList
S		#define vTaskGetRunTimeStats			MPU_vTaskGetRunTimeStats
S		#define vTaskSetApplicationTaskTag		MPU_vTaskSetApplicationTaskTag
S		#define xTaskGetApplicationTaskTag		MPU_xTaskGetApplicationTaskTag
S		#define xTaskCallApplicationTaskHook	MPU_xTaskCallApplicationTaskHook
S		#define uxTaskGetStackHighWaterMark		MPU_uxTaskGetStackHighWaterMark
S		#define xTaskGetCurrentTaskHandle		MPU_xTaskGetCurrentTaskHandle
S		#define xTaskGetSchedulerState			MPU_xTaskGetSchedulerState
S		#define xTaskGetIdleTaskHandle			MPU_xTaskGetIdleTaskHandle
S
S		#define xQueueGenericCreate				MPU_xQueueGenericCreate
S		#define xQueueCreateMutex				MPU_xQueueCreateMutex
S		#define xQueueGiveMutexRecursive		MPU_xQueueGiveMutexRecursive
S		#define xQueueTakeMutexRecursive		MPU_xQueueTakeMutexRecursive
S		#define xQueueCreateCountingSemaphore	MPU_xQueueCreateCountingSemaphore
S		#define xQueueGenericSend				MPU_xQueueGenericSend
S		#define xQueueAltGenericSend			MPU_xQueueAltGenericSend
S		#define xQueueAltGenericReceive			MPU_xQueueAltGenericReceive
S		#define xQueueGenericReceive			MPU_xQueueGenericReceive
S		#define uxQueueMessagesWaiting			MPU_uxQueueMessagesWaiting
S		#define vQueueDelete					MPU_vQueueDelete
S		#define xQueueGenericReset				MPU_xQueueGenericReset
S		#define xQueueCreateSet					MPU_xQueueCreateSet
S		#define xQueueSelectFromSet				MPU_xQueueSelectFromSet
S		#define xQueueAddToSet					MPU_xQueueAddToSet
S		#define xQueueRemoveFromSet				MPU_xQueueRemoveFromSet
S
S		#define pvPortMalloc					MPU_pvPortMalloc
S		#define vPortFree						MPU_vPortFree
S		#define xPortGetFreeHeapSize			MPU_xPortGetFreeHeapSize
S		#define vPortInitialiseBlocks			MPU_vPortInitialiseBlocks
S
S		#if configQUEUE_REGISTRY_SIZE > 0
S			#define vQueueAddToRegistry				MPU_vQueueAddToRegistry
S			#define vQueueUnregisterQueue			MPU_vQueueUnregisterQueue
S		#endif
S
S		/* Remove the privileged function macro. */
S		#define PRIVILEGED_FUNCTION
S
S	#else /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
S		/* Ensure API functions go in the privileged execution section. */
S		#define PRIVILEGED_FUNCTION __attribute__((section("privileged_functions")))
S		#define PRIVILEGED_DATA __attribute__((section("privileged_data")))
S        //#define PRIVILEGED_DATA
S
S	#endif /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
N#else /* portUSING_MPU_WRAPPERS */
N
N	#define PRIVILEGED_FUNCTION
N	#define PRIVILEGED_DATA
N	#define portUSING_MPU_WRAPPERS 0
N
N#endif /* portUSING_MPU_WRAPPERS */
N
N
N#endif /* MPU_WRAPPERS_H */
N
L 360 "..\free_rtos\portable.h" 2
N
N/*
N * Setup the stack of a new task so it is ready to be placed under the
N * scheduler control.  The registers have to be placed on the stack in
N * the order that the port expects to find them.
N *
N */
N#if( portUSING_MPU_WRAPPERS == 1 )
X#if( 0 == 1 )
S	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters, portBASE_TYPE xRunPrivileged ) PRIVILEGED_FUNCTION;
N#else
N	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
X	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
N#endif
N
N/*
N * Map to the memory management routines required for the port.
N */
Nvoid *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION;
Xvoid *pvPortMalloc( size_t xSize ) ;
Nvoid vPortFree( void *pv ) PRIVILEGED_FUNCTION;
Xvoid vPortFree( void *pv ) ;
Nvoid vPortInitialiseBlocks( void ) PRIVILEGED_FUNCTION;
Xvoid vPortInitialiseBlocks( void ) ;
Nsize_t xPortGetFreeHeapSize( void ) PRIVILEGED_FUNCTION;
Xsize_t xPortGetFreeHeapSize( void ) ;
N
N/*
N * Setup the hardware ready for the scheduler to take control.  This generally
N * sets up a tick interrupt and sets timers for the correct tick frequency.
N */
NportBASE_TYPE xPortStartScheduler( void ) PRIVILEGED_FUNCTION;
Xlong xPortStartScheduler( void ) ;
N
N/*
N * Undo any hardware/ISR setup that was performed by xPortStartScheduler() so
N * the hardware is left in its original condition after the scheduler stops
N * executing.
N */
Nvoid vPortEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vPortEndScheduler( void ) ;
N
N/*
N * The structures and methods of manipulating the MPU are contained within the
N * port layer.
N *
N * Fills the xMPUSettings structure with the memory region information
N * contained in xRegions.
N */
N#if( portUSING_MPU_WRAPPERS == 1 ) 
X#if( 0 == 1 ) 
S	struct xMEMORY_REGION;
S	void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, portSTACK_TYPE *pxBottomOfStack, unsigned short usStackDepth ) PRIVILEGED_FUNCTION;
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* PORTABLE_H */
N
L 98 "..\free_rtos\FreeRTOS.h" 2
N
N
N/* Defines the prototype to which the application task hook function must
Nconform. */
Ntypedef portBASE_TYPE (*pdTASK_HOOK_CODE)( void * );
Xtypedef long (*pdTASK_HOOK_CODE)( void * );
N
N
N
N
N
N/*
N * Check all the required application specific macros have been defined.
N * These macros are application specific and (as downloaded) are defined
N * within FreeRTOSConfig.h.
N */
N
N#ifndef configUSE_PREEMPTION
S	#error Missing definition:  configUSE_PREEMPTION should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_IDLE_HOOK
S	#error Missing definition:  configUSE_IDLE_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_TICK_HOOK
S	#error Missing definition:  configUSE_TICK_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_CO_ROUTINES
S	#error  Missing definition:  configUSE_CO_ROUTINES should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskPrioritySet
S	#error Missing definition:  INCLUDE_vTaskPrioritySet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_uxTaskPriorityGet
S	#error Missing definition:  INCLUDE_uxTaskPriorityGet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelete
S	#error Missing definition:  INCLUDE_vTaskDelete		 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskSuspend
S	#error Missing definition:  INCLUDE_vTaskSuspend	 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelayUntil
S	#error Missing definition:  INCLUDE_vTaskDelayUntil should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelay
S	#error Missing definition:  INCLUDE_vTaskDelay should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_16_BIT_TICKS
S	#error Missing definition:  configUSE_16_BIT_TICKS should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_xTaskGetIdleTaskHandle
N	#define INCLUDE_xTaskGetIdleTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xTimerGetTimerDaemonTaskHandle
N	#define INCLUDE_xTimerGetTimerDaemonTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xQueueGetMutexHolder
N	#define INCLUDE_xQueueGetMutexHolder 0
N#endif
N
N#ifndef INCLUDE_xSemaphoreGetMutexHolder
N	#define INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetMutexHolder
N#endif
N
N#ifndef INCLUDE_pcTaskGetTaskName
N	#define INCLUDE_pcTaskGetTaskName 0
N#endif
N
N#ifndef configUSE_APPLICATION_TASK_TAG
N	#define configUSE_APPLICATION_TASK_TAG 0
N#endif
N
N#ifndef INCLUDE_uxTaskGetStackHighWaterMark
N	#define INCLUDE_uxTaskGetStackHighWaterMark 0
N#endif
N
N#ifndef INCLUDE_eTaskGetState
N	#define INCLUDE_eTaskGetState 0
N#endif
N
N#ifndef configUSE_RECURSIVE_MUTEXES
N	#define configUSE_RECURSIVE_MUTEXES 0
N#endif
N
N#ifndef configUSE_MUTEXES
N	#define configUSE_MUTEXES 0
N#endif
N
N#ifndef configUSE_TIMERS
N	#define configUSE_TIMERS 0
N#endif
N
N#ifndef configUSE_COUNTING_SEMAPHORES
N	#define configUSE_COUNTING_SEMAPHORES 0
N#endif
N
N#ifndef configUSE_ALTERNATIVE_API
N	#define configUSE_ALTERNATIVE_API 0
N#endif
N
N#ifndef portCRITICAL_NESTING_IN_TCB
N	#define portCRITICAL_NESTING_IN_TCB 0
N#endif
N
N#ifndef configMAX_TASK_NAME_LEN
S	#define configMAX_TASK_NAME_LEN 16
N#endif
N
N#ifndef configIDLE_SHOULD_YIELD
S	#define configIDLE_SHOULD_YIELD		1
N#endif
N
N#if configMAX_TASK_NAME_LEN < 1
X#if ( 16 ) < 1
S	#error configMAX_TASK_NAME_LEN must be set to a minimum of 1 in FreeRTOSConfig.h
N#endif
N
N#ifndef INCLUDE_xTaskResumeFromISR
N	#define INCLUDE_xTaskResumeFromISR 1
N#endif
N
N#ifndef configASSERT
N	#define configASSERT( x )
N#endif
N
N#ifndef portALIGNMENT_ASSERT_pxCurrentTCB
N	#define portALIGNMENT_ASSERT_pxCurrentTCB configASSERT
N#endif
N
N/* The timers module relies on xTaskGetSchedulerState(). */
N#if configUSE_TIMERS == 1
X#if 0 == 1
S
S	#ifndef configTIMER_TASK_PRIORITY
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_PRIORITY must also be defined.
S	#endif /* configTIMER_TASK_PRIORITY */
S
S	#ifndef configTIMER_QUEUE_LENGTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_QUEUE_LENGTH must also be defined.
S	#endif /* configTIMER_QUEUE_LENGTH */
S
S	#ifndef configTIMER_TASK_STACK_DEPTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_STACK_DEPTH must also be defined.
S	#endif /* configTIMER_TASK_STACK_DEPTH */
S
N#endif /* configUSE_TIMERS */
N
N#ifndef INCLUDE_xTaskGetSchedulerState
N	#define INCLUDE_xTaskGetSchedulerState 0
N#endif
N
N#ifndef INCLUDE_xTaskGetCurrentTaskHandle
N	#define INCLUDE_xTaskGetCurrentTaskHandle 0
N#endif
N
N
N#ifndef portSET_INTERRUPT_MASK_FROM_ISR
S	#define portSET_INTERRUPT_MASK_FROM_ISR() 0
N#endif
N
N#ifndef portCLEAR_INTERRUPT_MASK_FROM_ISR
S	#define portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedStatusValue ) ( void ) uxSavedStatusValue
N#endif
N
N#ifndef portCLEAN_UP_TCB
N	#define portCLEAN_UP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef portSETUP_TCB
N	#define portSETUP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef configQUEUE_REGISTRY_SIZE
N	#define configQUEUE_REGISTRY_SIZE 0U
N#endif
N
N#if ( configQUEUE_REGISTRY_SIZE < 1 )
X#if ( 0U < 1 )
N	#define vQueueAddToRegistry( xQueue, pcName )
N	#define vQueueUnregisterQueue( xQueue )
N#endif
N
N#ifndef portPOINTER_SIZE_TYPE
N	#define portPOINTER_SIZE_TYPE unsigned long
N#endif
N
N/* Remove any unused trace macros. */
N#ifndef traceSTART
N	/* Used to perform any necessary initialisation - for example, open a file
N	into which trace is to be written. */
N	#define traceSTART()
N#endif
N
N#ifndef traceEND
N	/* Use to close a trace, for example close a file into which trace has been
N	written. */
N	#define traceEND()
N#endif
N
N#ifndef traceTASK_SWITCHED_IN
N	/* Called after a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the selected task. */
N	#define traceTASK_SWITCHED_IN()
N#endif
N
N#ifndef traceTASK_SWITCHED_OUT
N	/* Called before a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the task being switched out. */
N	#define traceTASK_SWITCHED_OUT()
N#endif
N
N#ifndef traceTASK_PRIORITY_INHERIT
N	/* Called when a task attempts to take a mutex that is already held by a
N	lower priority task.  pxTCBOfMutexHolder is a pointer to the TCB of the task
N	that holds the mutex.  uxInheritedPriority is the priority the mutex holder
N	will inherit (the priority of the task that is attempting to obtain the
N	muted. */
N	#define traceTASK_PRIORITY_INHERIT( pxTCBOfMutexHolder, uxInheritedPriority )
N#endif
N
N#ifndef traceTASK_PRIORITY_DISINHERIT
N	/* Called when a task releases a mutex, the holding of which had resulted in
N	the task inheriting the priority of a higher priority task.
N	pxTCBOfMutexHolder is a pointer to the TCB of the task that is releasing the
N	mutex.  uxOriginalPriority is the task's configured (base) priority. */
N	#define traceTASK_PRIORITY_DISINHERIT( pxTCBOfMutexHolder, uxOriginalPriority )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_RECEIVE
N	/* Task is about to block because it cannot read from a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the read was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the read. */
N	#define traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_SEND
N	/* Task is about to block because it cannot write to a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the write was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the write. */
N	#define traceBLOCKING_ON_QUEUE_SEND( pxQueue )
N#endif
N
N#ifndef configCHECK_FOR_STACK_OVERFLOW
N	#define configCHECK_FOR_STACK_OVERFLOW 0
N#endif
N
N/* The following event macros are embedded in the kernel API calls. */
N
N#ifndef traceMOVED_TASK_TO_READY_STATE
N	#define traceMOVED_TASK_TO_READY_STATE( pxTCB )
N#endif
N
N#ifndef traceQUEUE_CREATE
N	#define traceQUEUE_CREATE( pxNewQueue )
N#endif
N
N#ifndef traceQUEUE_CREATE_FAILED
N	#define traceQUEUE_CREATE_FAILED( ucQueueType )
N#endif
N
N#ifndef traceCREATE_MUTEX
N	#define traceCREATE_MUTEX( pxNewQueue )
N#endif
N
N#ifndef traceCREATE_MUTEX_FAILED
N	#define traceCREATE_MUTEX_FAILED()
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE
N	#define traceGIVE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE_FAILED
N	#define traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE
N	#define traceTAKE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE_FAILED
N	#define traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE
N	#define traceCREATE_COUNTING_SEMAPHORE()
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE_FAILED
N	#define traceCREATE_COUNTING_SEMAPHORE_FAILED()
N#endif
N
N#ifndef traceQUEUE_SEND
N	#define traceQUEUE_SEND( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FAILED
N	#define traceQUEUE_SEND_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE
N	#define traceQUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK
N	#define traceQUEUE_PEEK( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FAILED
N	#define traceQUEUE_RECEIVE_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR
N	#define traceQUEUE_SEND_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR_FAILED
N	#define traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR
N	#define traceQUEUE_RECEIVE_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR_FAILED
N	#define traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_DELETE
N	#define traceQUEUE_DELETE( pxQueue )
N#endif
N
N#ifndef traceTASK_CREATE
N	#define traceTASK_CREATE( pxNewTCB )
N#endif
N
N#ifndef traceTASK_CREATE_FAILED
N	#define traceTASK_CREATE_FAILED()
N#endif
N
N#ifndef traceTASK_DELETE
N	#define traceTASK_DELETE( pxTaskToDelete )
N#endif
N
N#ifndef traceTASK_DELAY_UNTIL
N	#define traceTASK_DELAY_UNTIL()
N#endif
N
N#ifndef traceTASK_DELAY
N	#define traceTASK_DELAY()
N#endif
N
N#ifndef traceTASK_PRIORITY_SET
N	#define traceTASK_PRIORITY_SET( pxTask, uxNewPriority )
N#endif
N
N#ifndef traceTASK_SUSPEND
N	#define traceTASK_SUSPEND( pxTaskToSuspend )
N#endif
N
N#ifndef traceTASK_RESUME
N	#define traceTASK_RESUME( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_RESUME_FROM_ISR
N	#define traceTASK_RESUME_FROM_ISR( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_INCREMENT_TICK
N	#define traceTASK_INCREMENT_TICK( xTickCount )
N#endif
N
N#ifndef traceTIMER_CREATE
N	#define traceTIMER_CREATE( pxNewTimer )
N#endif
N
N#ifndef traceTIMER_CREATE_FAILED
N	#define traceTIMER_CREATE_FAILED()
N#endif
N
N#ifndef traceTIMER_COMMAND_SEND
N	#define traceTIMER_COMMAND_SEND( xTimer, xMessageID, xMessageValueValue, xReturn )
N#endif
N
N#ifndef traceTIMER_EXPIRED
N	#define traceTIMER_EXPIRED( pxTimer )
N#endif
N
N#ifndef traceTIMER_COMMAND_RECEIVED
N	#define traceTIMER_COMMAND_RECEIVED( pxTimer, xMessageID, xMessageValue )
N#endif
N
N#ifndef configGENERATE_RUN_TIME_STATS
N	#define configGENERATE_RUN_TIME_STATS 0
N#endif
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
S		#error If configGENERATE_RUN_TIME_STATS is defined then portCONFIGURE_TIMER_FOR_RUN_TIME_STATS must also be defined.  portCONFIGURE_TIMER_FOR_RUN_TIME_STATS should call a port layer function to setup a peripheral timer/counter that can then be used as the run time counter time base.
S	#endif /* portCONFIGURE_TIMER_FOR_RUN_TIME_STATS */
S
S	#ifndef portGET_RUN_TIME_COUNTER_VALUE
S		#ifndef portALT_GET_RUN_TIME_COUNTER_VALUE
S			#error If configGENERATE_RUN_TIME_STATS is defined then either portGET_RUN_TIME_COUNTER_VALUE or portALT_GET_RUN_TIME_COUNTER_VALUE must also be defined.  See the examples provided and the FreeRTOS web site for more information.
S		#endif /* portALT_GET_RUN_TIME_COUNTER_VALUE */
S	#endif /* portGET_RUN_TIME_COUNTER_VALUE */
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N
N#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
N	#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()
N#endif
N
N#ifndef configUSE_MALLOC_FAILED_HOOK
N	#define configUSE_MALLOC_FAILED_HOOK 0
N#endif
N
N#ifndef portPRIVILEGE_BIT
N	#define portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00 )
N#endif
N
N#ifndef portYIELD_WITHIN_API
N	#define portYIELD_WITHIN_API portYIELD
N#endif
N
N#ifndef pvPortMallocAligned
N	#define pvPortMallocAligned( x, puxStackBuffer ) ( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )
N#endif
N
N#ifndef vPortFreeAligned
N	#define vPortFreeAligned( pvBlockToFree ) vPortFree( pvBlockToFree )
N#endif
N
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
S	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )
N#endif
N
N#ifndef configEXPECTED_IDLE_TIME_BEFORE_SLEEP
N	#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2
N#endif
N
N#if configEXPECTED_IDLE_TIME_BEFORE_SLEEP < 2
X#if 2 < 2
S	#error configEXPECTED_IDLE_TIME_BEFORE_SLEEP must not be less than 2
N#endif
N
N#ifndef configUSE_TICKLESS_IDLE
N	#define configUSE_TICKLESS_IDLE 0
N#endif
N
N#ifndef configPRE_SLEEP_PROCESSING
N	#define configPRE_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configPOST_SLEEP_PROCESSING
N	#define configPOST_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configUSE_QUEUE_SETS
N	#define configUSE_QUEUE_SETS 0
N#endif
N
N/* For backward compatability. */
N#define eTaskStateGet eTaskGetState
N
N#endif /* INC_FREERTOS_H */
N
L 76 "..\free_rtos\croutine.c" 2
N#include "task.h"
L 1 "..\free_rtos\task.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef TASK_H
N#define TASK_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include task.h"
N#endif
N
N#include "portable.h"
N#include "list.h"
L 1 "..\free_rtos\list.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*
N * This is the list implementation used by the scheduler.  While it is tailored
N * heavily for the schedulers needs, it is also available for use by
N * application code.
N *
N * xLists can only store pointers to xListItems.  Each xListItem contains a
N * numeric value (xItemValue).  Most of the time the lists are sorted in
N * descending item value order.
N *
N * Lists are created already containing one list item.  The value of this
N * item is the maximum possible that can be stored, it is therefore always at
N * the end of the list and acts as a marker.  The list member pxHead always
N * points to this marker - even though it is at the tail of the list.  This
N * is because the tail contains a wrap back pointer to the true head of
N * the list.
N *
N * In addition to it's value, each list item contains a pointer to the next
N * item in the list (pxNext), a pointer to the list it is in (pxContainer)
N * and a pointer to back to the object that contains it.  These later two
N * pointers are included for efficiency of list manipulation.  There is
N * effectively a two way link between the object containing the list item and
N * the list item itself.
N *
N *
N * \page ListIntroduction List Implementation
N * \ingroup FreeRTOSIntro
N */
N
N
N#ifndef LIST_H
N#define LIST_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N/*
N * Definition of the only type of object that a list can contain.
N */
Nstruct xLIST_ITEM
N{
N	portTickType xItemValue;				/*< The value being listed.  In most cases this is used to sort the list in descending order. */
N	volatile struct xLIST_ITEM * pxNext;	/*< Pointer to the next xListItem in the list. */
N	volatile struct xLIST_ITEM * pxPrevious;/*< Pointer to the previous xListItem in the list. */
N	void * pvOwner;							/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */
N	void * pvContainer;						/*< Pointer to the list in which this list item is placed (if any). */
N};
Ntypedef struct xLIST_ITEM xListItem;		/* For some reason lint wants this as two separate definitions. */
N
Nstruct xMINI_LIST_ITEM
N{
N	portTickType xItemValue;
N	volatile struct xLIST_ITEM *pxNext;
N	volatile struct xLIST_ITEM *pxPrevious;
N};
Ntypedef struct xMINI_LIST_ITEM xMiniListItem;
N
N/*
N * Definition of the type of queue used by the scheduler.
N */
Ntypedef struct xLIST
N{
N	volatile unsigned portBASE_TYPE uxNumberOfItems;
X	volatile unsigned long uxNumberOfItems;
N	volatile xListItem * pxIndex;			/*< Used to walk through the list.  Points to the last item returned by a call to pvListGetOwnerOfNextEntry (). */
N	volatile xMiniListItem xListEnd;		/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */
N} xList;
N
N/*
N * Access macro to set the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )		( pxListItem )->pvOwner = ( void * ) ( pxOwner )
N
N/*
N * Access macro to get the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_OWNER( pxListItem )		( pxListItem )->pvOwner
N
N/*
N * Access macro to set the value of the list item.  In most cases the value is
N * used to sort the list in descending order.
N *
N * \page listSET_LIST_ITEM_VALUE listSET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )		( pxListItem )->xItemValue = ( xValue )
N
N/*
N * Access macro to retrieve the value of the list item.  The value can
N * represent anything - for example a the priority of a task, or the time at
N * which a task should be unblocked.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_VALUE( pxListItem )				( ( pxListItem )->xItemValue )
N
N/*
N * Access macro the retrieve the value of the list item at the head of a given
N * list.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )			( (&( ( pxList )->xListEnd ))->pxNext->xItemValue )
N
N/*
N * Access macro to determine if a list contains any items.  The macro will
N * only have the value true if the list is empty.
N *
N * \page listLIST_IS_EMPTY listLIST_IS_EMPTY
N * \ingroup LinkedList
N */
N#define listLIST_IS_EMPTY( pxList )				( ( pxList )->uxNumberOfItems == ( unsigned portBASE_TYPE ) 0 )
N
N/*
N * Access macro to return the number of items in the list.
N */
N#define listCURRENT_LIST_LENGTH( pxList )		( ( pxList )->uxNumberOfItems )
N
N/*
N * Access function to obtain the owner of the next entry in a list.
N *
N * The list member pxIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pxIndex to the next item in the list
N * and returns that entries pxOwner parameter.  Using multiple calls to this
N * function it is therefore possible to move through every item contained in
N * a list.
N *
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the next item owner is to be returned.
N *
N * \page listGET_OWNER_OF_NEXT_ENTRY listGET_OWNER_OF_NEXT_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									\
N{																						\
NxList * const pxConstList = ( pxList );													\
N	/* Increment the index to the next item and return the item, ensuring */			\
N	/* we don't return the marker used at the end of the list.  */						\
N	( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						\
N	if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )	\
N	{																					\
N		( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;					\
N	}																					\
N	( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										\
N}
X#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									{																						xList * const pxConstList = ( pxList );														 				 							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )		{																							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						}																						( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										}
N
N
N/*
N * Access function to obtain the owner of the first entry in a list.  Lists
N * are normally sorted in ascending item value order.
N *
N * This function returns the pxOwner member of the first item in the list.
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the owner of the head item is to be
N * returned.
N *
N * \page listGET_OWNER_OF_HEAD_ENTRY listGET_OWNER_OF_HEAD_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_HEAD_ENTRY( pxList )  ( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )
N
N/*
N * Check to see if a list item is within a list.  The list item maintains a
N * "container" pointer that points to the list it is in.  All this macro does
N * is check to see if the container and the list match.
N *
N * @param pxList The list we want to know if the list item is within.
N * @param pxListItem The list item we want to know if is in the list.
N * @return pdTRUE is the list item is in the list, otherwise pdFALSE.
N * pointer against
N */
N#define listIS_CONTAINED_WITHIN( pxList, pxListItem ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) )
N
N/*
N * Return the list a list item is contained within (referenced from).
N *
N * @param pxListItem The list item being queried.
N * @return A pointer to the xList object that references the pxListItem
N */
N#define listLIST_ITEM_CONTAINER( pxListItem ) ( ( pxListItem )->pvContainer )
N
N/*
N * This provides a crude means of knowing if a list has been initialised, as
N * pxList->xListEnd.xItemValue is set to portMAX_DELAY by the vListInitialise()
N * function.
N */
N#define listLIST_IS_INITIALISED( pxList ) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
N
N/*
N * Must be called before a list is used!  This initialises all the members
N * of the list structure and inserts the xListEnd item into the list as a
N * marker to the back of the list.
N *
N * @param pxList Pointer to the list being initialised.
N *
N * \page vListInitialise vListInitialise
N * \ingroup LinkedList
N */
Nvoid vListInitialise( xList *pxList );
N
N/*
N * Must be called before a list item is used.  This sets the list container to
N * null so the item does not think that it is already contained in a list.
N *
N * @param pxItem Pointer to the list item being initialised.
N *
N * \page vListInitialiseItem vListInitialiseItem
N * \ingroup LinkedList
N */
Nvoid vListInitialiseItem( xListItem *pxItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted into the list in
N * a position determined by its item value (descending item value order).
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The item to that is to be placed in the list.
N *
N * \page vListInsert vListInsert
N * \ingroup LinkedList
N */
Nvoid vListInsert( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted in a position
N * such that it will be the last item within the list returned by multiple
N * calls to listGET_OWNER_OF_NEXT_ENTRY.
N *
N * The list member pvIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pvIndex to the next item in the list.
N * Placing an item in a list using vListInsertEnd effectively places the item
N * in the list position pointed to by pvIndex.  This means that every other
N * item within the list will be returned by listGET_OWNER_OF_NEXT_ENTRY before
N * the pvIndex parameter again points to the item being inserted.
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The list item to be inserted into the list.
N *
N * \page vListInsertEnd vListInsertEnd
N * \ingroup LinkedList
N */
Nvoid vListInsertEnd( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Remove an item from a list.  The list item has a pointer to the list that
N * it is in, so only the list item need be passed into the function.
N *
N * @param uxListRemove The item to be removed.  The item will remove itself from
N * the list pointed to by it's pxContainer parameter.
N * 
N * @return The number of items that remain in the list after the list item has
N * been removed.
N *
N * \page uxListRemove uxListRemove
N * \ingroup LinkedList
N */
Nunsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove );
Xunsigned long uxListRemove( xListItem *pxItemToRemove );
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
L 85 "..\free_rtos\task.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N#define tskKERNEL_VERSION_NUMBER "V7.4.2"
N
N/**
N * task. h
N *
N * Type by which tasks are referenced.  For example, a call to xTaskCreate
N * returns (via a pointer parameter) an xTaskHandle variable that can then
N * be used as a parameter to vTaskDelete to delete the task.
N *
N * \page xTaskHandle xTaskHandle
N * \ingroup Tasks
N */
Ntypedef void * xTaskHandle;
N
N/*
N * Used internally only.
N */
Ntypedef struct xTIME_OUT
N{
N	portBASE_TYPE xOverflowCount;
X	long xOverflowCount;
N	portTickType  xTimeOnEntering;
N} xTimeOutType;
N
N/*
N * Defines the memory ranges allocated to the task when an MPU is used.
N */
Ntypedef struct xMEMORY_REGION
N{
N	void *pvBaseAddress;
N	unsigned long ulLengthInBytes;
N	unsigned long ulParameters;
N} xMemoryRegion;
N
N/*
N * Parameters required to create an MPU protected task.
N */
Ntypedef struct xTASK_PARAMTERS
N{
N	pdTASK_CODE pvTaskCode;
N	const signed char * const pcName;
N	unsigned short usStackDepth;
N	void *pvParameters;
N	unsigned portBASE_TYPE uxPriority;
X	unsigned long uxPriority;
N	portSTACK_TYPE *puxStackBuffer;
X	unsigned long *puxStackBuffer;
N	xMemoryRegion xRegions[ portNUM_CONFIGURABLE_REGIONS ];
X	xMemoryRegion xRegions[ 1 ];
N} xTaskParameters;
N
N/* Task states returned by eTaskGetState. */
Ntypedef enum
N{
N	eRunning = 0,	/* A task is querying the state of itself, so must be running. */
N	eReady,			/* The task being queried is in a read or pending ready list. */
N	eBlocked,		/* The task being queried is in the Blocked state. */
N	eSuspended,		/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */
N	eDeleted		/* The task being queried has been deleted, but its TCB has not yet been freed. */
N} eTaskState;
N
N/* Possible return values for eTaskConfirmSleepModeStatus(). */
Ntypedef enum
N{
N	eAbortSleep = 0,		/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */
N	eStandardSleep,			/* Enter a sleep mode that will not last any longer than the expected idle time. */
N	eNoTasksWaitingTimeout	/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */
N} eSleepModeStatus;
N
N
N/*
N * Defines the priority used by the idle task.  This must not be modified.
N *
N * \ingroup TaskUtils
N */
N#define tskIDLE_PRIORITY			( ( unsigned portBASE_TYPE ) 0U )
N
N/**
N * task. h
N *
N * Macro for forcing a context switch.
N *
N * \page taskYIELD taskYIELD
N * \ingroup SchedulerControl
N */
N#define taskYIELD()					portYIELD()
N
N/**
N * task. h
N *
N * Macro to mark the start of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskENTER_CRITICAL taskENTER_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskENTER_CRITICAL()		portENTER_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to mark the end of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskEXIT_CRITICAL taskEXIT_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskEXIT_CRITICAL()			portEXIT_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to disable all maskable interrupts.
N *
N * \page taskDISABLE_INTERRUPTS taskDISABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskDISABLE_INTERRUPTS()	portDISABLE_INTERRUPTS()
N
N/**
N * task. h
N *
N * Macro to enable microcontroller interrupts.
N *
N * \page taskENABLE_INTERRUPTS taskENABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskENABLE_INTERRUPTS()		portENABLE_INTERRUPTS()
N
N/* Definitions returned by xTaskGetSchedulerState(). */
N#define taskSCHEDULER_NOT_STARTED	0
N#define taskSCHEDULER_RUNNING		1
N#define taskSCHEDULER_SUSPENDED		2
N
N/*-----------------------------------------------------------
N * TASK CREATION API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreate(
N							  pdTASK_CODE pvTaskCode,
N							  const char * const pcName,
N							  unsigned short usStackDepth,
N							  void *pvParameters,
N							  unsigned portBASE_TYPE uxPriority,
N							  xTaskHandle *pvCreatedTask
N						  );</pre>
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N *
N * xTaskCreate() can only be used to create a task that has unrestricted
N * access to the entire microcontroller memory map.  Systems that include MPU
N * support can alternatively create an MPU constrained task using
N * xTaskCreateRestricted().
N *
N * @param pvTaskCode Pointer to the task entry function.  Tasks
N * must be implemented to never return (i.e. continuous loop).
N *
N * @param pcName A descriptive name for the task.  This is mainly used to
N * facilitate debugging.  Max length defined by tskMAX_TASK_NAME_LEN - default
N * is 16.
N *
N * @param usStackDepth The size of the task stack specified as the number of
N * variables the stack can hold - not the number of bytes.  For example, if
N * the stack is 16 bits wide and usStackDepth is defined as 100, 200 bytes
N * will be allocated for stack storage.
N *
N * @param pvParameters Pointer that will be used as the parameter for the task
N * being created.
N *
N * @param uxPriority The priority at which the task should run.  Systems that
N * include MPU support can optionally create tasks in a privileged (system)
N * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For
N * example, to create a privileged task at priority 2 the uxPriority parameter
N * should be set to ( 2 | portPRIVILEGE_BIT ).
N *
N * @param pvCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N // Task to be created.
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N	 }
N }
N
N // Function that creates a task.
N void vOtherFunction( void )
N {
N static unsigned char ucParameterToPass;
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass
N	 // must exist for the lifetime of the task, so in this case is declared static.  If it was just an
N	 // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time
N	 // the new task attempts to access it.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, &ucParameterToPass, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup xTaskCreate xTaskCreate
N * \ingroup Tasks
N */
N#define xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask ) xTaskGenericCreate( ( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvParameters ), ( uxPriority ), ( pxCreatedTask ), ( NULL ), ( NULL ) )
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreateRestricted( xTaskParameters *pxTaskDefinition, xTaskHandle *pxCreatedTask );</pre>
N *
N * xTaskCreateRestricted() should only be used in systems that include an MPU
N * implementation.
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N * The function parameters define the memory regions and associated access
N * permissions allocated to the task.
N *
N * @param pxTaskDefinition Pointer to a structure that contains a member
N * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API
N * documentation) plus an optional stack buffer and the memory region
N * definitions.
N *
N * @param pxCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N// Create an xTaskParameters structure that defines the task to be created.
Nstatic const xTaskParameters xCheckTaskParameters =
N{
N	vATask,		// pvTaskCode - the function that implements the task.
N	"ATask",	// pcName - just a text name for the task to assist debugging.
N	100,		// usStackDepth	- the stack size DEFINED IN WORDS.
N	NULL,		// pvParameters - passed into the task function as the function parameters.
N	( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.
N	cStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.
N
N	// xRegions - Allocate up to three separate memory regions for access by
N	// the task, with appropriate access permissions.  Different processors have
N	// different memory alignment requirements - refer to the FreeRTOS documentation
N	// for full information.
N	{
N		// Base address					Length	Parameters
N        { cReadWriteArray,				32,		portMPU_REGION_READ_WRITE },
N        { cReadOnlyArray,				32,		portMPU_REGION_READ_ONLY },
N        { cPrivilegedOnlyAccessArray,	128,	portMPU_REGION_PRIVILEGED_READ_WRITE }
N	}
N};
N
Nint main( void )
N{
NxTaskHandle xHandle;
N
N	// Create a task from the const structure defined above.  The task handle
N	// is requested (the second parameter is not NULL) but in this case just for
N	// demonstration purposes as its not actually used.
N	xTaskCreateRestricted( &xRegTest1Parameters, &xHandle );
N
N	// Start the scheduler.
N	vTaskStartScheduler();
N
N	// Will only get here if there was insufficient memory to create the idle
N	// task.
N	for( ;; );
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
N#define xTaskCreateRestricted( x, pxCreatedTask ) xTaskGenericCreate( ((x)->pvTaskCode), ((x)->pcName), ((x)->usStackDepth), ((x)->pvParameters), ((x)->uxPriority), (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xRegions) )
N
N/**
N * task. h
N *<pre>
N void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions );</pre>
N *
N * Memory regions are assigned to a restricted task when the task is created by
N * a call to xTaskCreateRestricted().  These regions can be redefined using
N * vTaskAllocateMPURegions().
N *
N * @param xTask The handle of the task being updated.
N *
N * @param xRegions A pointer to an xMemoryRegion structure that contains the
N * new memory region definitions.
N *
N * Example usage:
N   <pre>
N// Define an array of xMemoryRegion structures that configures an MPU region
N// allowing read/write access for 1024 bytes starting at the beginning of the
N// ucOneKByte array.  The other two of the maximum 3 definable regions are
N// unused so set to zero.
Nstatic const xMemoryRegion xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =
N{
N	// Base address		Length		Parameters
N	{ ucOneKByte,		1024,		portMPU_REGION_READ_WRITE },
N	{ 0,				0,			0 },
N	{ 0,				0,			0 }
N};
N
Nvoid vATask( void *pvParameters )
N{
N	// This task was created such that it has access to certain regions of
N	// memory as defined by the MPU configuration.  At some point it is
N	// desired that these MPU regions are replaced with that defined in the
N	// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()
N	// for this purpose.  NULL is used as the task handle to indicate that this
N	// function should modify the MPU regions of the calling task.
N	vTaskAllocateMPURegions( NULL, xAltRegions );
N
N	// Now the task can continue its function, but from this point on can only
N	// access its stack and the ucOneKByte array (unless any other statically
N	// defined or shared regions have been declared elsewhere).
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
Nvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) PRIVILEGED_FUNCTION;
Xvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelete( xTaskHandle xTask );</pre>
N *
N * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Remove a task from the RTOS real time kernels management.  The task being
N * deleted will be removed from all ready, blocked, suspended and event lists.
N *
N * NOTE:  The idle task is responsible for freeing the kernel allocated
N * memory from tasks that have been deleted.  It is therefore important that
N * the idle task is not starved of microcontroller processing time if your
N * application makes any calls to vTaskDelete ().  Memory allocated by the
N * task code is not automatically freed, and should be freed before the task
N * is deleted.
N *
N * See the demo application file death.c for sample code that utilises
N * vTaskDelete ().
N *
N * @param xTask The handle of the task to be deleted.  Passing NULL will
N * cause the calling task to be deleted.
N *
N * Example usage:
N   <pre>
N void vOtherFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup vTaskDelete vTaskDelete
N * \ingroup Tasks
N */
Nvoid vTaskDelete( xTaskHandle xTaskToDelete ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelete( xTaskHandle xTaskToDelete ) ;
N
N/*-----------------------------------------------------------
N * TASK CONTROL API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskDelay( portTickType xTicksToDelay );</pre>
N *
N * Delay a task for a given number of ticks.  The actual time that the
N * task remains blocked depends on the tick rate.  The constant
N * portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N *
N * vTaskDelay() specifies a time at which the task wishes to unblock relative to
N * the time at which vTaskDelay() is called.  For example, specifying a block
N * period of 100 ticks will cause the task to unblock 100 ticks after
N * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method
N * of controlling the frequency of a cyclical task as the path taken through the
N * code, as well as other task and interrupt activity, will effect the frequency
N * at which vTaskDelay() gets called and therefore the time at which the task
N * next executes.  See vTaskDelayUntil() for an alternative API function designed
N * to facilitate fixed frequency execution.  It does this by specifying an
N * absolute time (rather than a relative time) at which the calling task should
N * unblock.
N *
N * @param xTicksToDelay The amount of time, in tick periods, that
N * the calling task should block.
N *
N * Example usage:
N
N void vTaskFunction( void * pvParameters )
N {
N void vTaskFunction( void * pvParameters )
N {
N // Block for 500ms.
N const portTickType xDelay = 500 / portTICK_RATE_MS;
N
N	 for( ;; )
N	 {
N		 // Simply toggle the LED every 500ms, blocking between each toggle.
N		 vToggleLED();
N		 vTaskDelay( xDelay );
N	 }
N }
N
N * \defgroup vTaskDelay vTaskDelay
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelay( portTickType xTicksToDelay ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelay( portTickType xTicksToDelay ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelayUntil( portTickType *pxPreviousWakeTime, portTickType xTimeIncrement );</pre>
N *
N * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Delay a task until a specified time.  This function can be used by cyclical
N * tasks to ensure a constant execution frequency.
N *
N * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will
N * cause a task to block for the specified number of ticks from the time vTaskDelay () is
N * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed
N * execution frequency as the time between a task starting to execute and that task
N * calling vTaskDelay () may not be fixed [the task may take a different path though the
N * code between calls, or may get interrupted or preempted a different number of times
N * each time it executes].
N *
N * Whereas vTaskDelay () specifies a wake time relative to the time at which the function
N * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to
N * unblock.
N *
N * The constant portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the
N * task was last unblocked.  The variable must be initialised with the current time
N * prior to its first use (see the example below).  Following this the variable is
N * automatically updated within vTaskDelayUntil ().
N *
N * @param xTimeIncrement The cycle time period.  The task will be unblocked at
N * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the
N * same xTimeIncrement parameter value will cause the task to execute with
N * a fixed interface period.
N *
N * Example usage:
N   <pre>
N // Perform an action every 10 ticks.
N void vTaskFunction( void * pvParameters )
N {
N portTickType xLastWakeTime;
N const portTickType xFrequency = 10;
N
N	 // Initialise the xLastWakeTime variable with the current time.
N	 xLastWakeTime = xTaskGetTickCount ();
N	 for( ;; )
N	 {
N		 // Wait for the next cycle.
N		 vTaskDelayUntil( &xLastWakeTime, xFrequency );
N
N		 // Perform action here.
N	 }
N }
N   </pre>
N * \defgroup vTaskDelayUntil vTaskDelayUntil
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;
N
N/**
N * task. h
N * <pre>unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask );</pre>
N *
N * INCLUDE_xTaskPriorityGet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the priority of any task.
N *
N * @param xTask Handle of the task to be queried.  Passing a NULL
N * handle results in the priority of the calling task being returned.
N *
N * @return The priority of xTask.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to obtain the priority of the created task.
N	 // It was created with tskIDLE_PRIORITY, but may have changed
N	 // it itself.
N	 if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )
N	 {
N		 // The task has changed it's priority.
N	 }
N
N	 // ...
N
N	 // Is our priority higher than the created task?
N	 if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )
N	 {
N		 // Our priority (obtained using NULL handle) is higher.
N	 }
N }
N   </pre>
N * \defgroup uxTaskPriorityGet uxTaskPriorityGet
N * \ingroup TaskCtrl
N */
Nunsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskPriorityGet( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>eTaskState eTaskGetState( xTaskHandle xTask );</pre>
N *
N * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the state of any task.  States are encoded by the eTaskState
N * enumerated type.
N *
N * @param xTask Handle of the task to be queried.
N *
N * @return The state of xTask at the time the function was called.  Note the
N * state of the task might change between the function being called, and the
N * functions return value being tested by the calling task.
N */
NeTaskState eTaskGetState( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
XeTaskState eTaskGetState( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority );</pre>
N *
N * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Set the priority of any task.
N *
N * A context switch will occur before the function returns if the priority
N * being set is higher than the currently executing task.
N *
N * @param xTask Handle to the task for which the priority is being set.
N * Passing a NULL handle results in the priority of the calling task being set.
N *
N * @param uxNewPriority The priority to which the task will be set.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to raise the priority of the created task.
N	 vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );
N
N	 // ...
N
N	 // Use a NULL handle to raise our priority to the same value.
N	 vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );
N }
N   </pre>
N * \defgroup vTaskPrioritySet vTaskPrioritySet
N * \ingroup TaskCtrl
N */
Nvoid vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority ) PRIVILEGED_FUNCTION;
Xvoid vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspend( xTaskHandle xTaskToSuspend );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Suspend any task.  When suspended a task will never get any microcontroller
N * processing time, no matter what its priority.
N *
N * Calls to vTaskSuspend are not accumulative -
N * i.e. calling vTaskSuspend () twice on the same task still only requires one
N * call to vTaskResume () to ready the suspended task.
N *
N * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL
N * handle will cause the calling task to be suspended.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Suspend ourselves.
N	 vTaskSuspend( NULL );
N
N	 // We cannot get here unless another task calls vTaskResume
N	 // with our handle as the parameter.
N }
N   </pre>
N * \defgroup vTaskSuspend vTaskSuspend
N * \ingroup TaskCtrl
N */
Nvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) ;
N
N/**
N * task. h
N * <pre>void vTaskResume( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Resumes a suspended task.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * vTaskResume ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Resume the suspended task ourselves.
N	 vTaskResume( xHandle );
N
N	 // The created task will once again get microcontroller processing
N	 // time in accordance with it priority within the system.
N }
N   </pre>
N * \defgroup vTaskResume vTaskResume
N * \ingroup TaskCtrl
N */
Nvoid vTaskResume( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xvoid vTaskResume( xTaskHandle xTaskToResume ) ;
N
N/**
N * task. h
N * <pre>void xTaskResumeFromISR( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * An implementation of vTaskResume() that can be called from within an ISR.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * xTaskResumeFromISR ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * \defgroup vTaskResumeFromISR vTaskResumeFromISR
N * \ingroup TaskCtrl
N */
NportBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xlong xTaskResumeFromISR( xTaskHandle xTaskToResume ) ;
N
N/*-----------------------------------------------------------
N * SCHEDULER CONTROL
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskStartScheduler( void );</pre>
N *
N * Starts the real time kernel tick processing.  After calling the kernel
N * has control over which tasks are executed and when.  This function
N * does not return until an executing task calls vTaskEndScheduler ().
N *
N * At least one task should be created via a call to xTaskCreate ()
N * before calling vTaskStartScheduler ().  The idle task is created
N * automatically when the first application task is created.
N *
N * See the demo application file main.c for an example of creating
N * tasks and starting the kernel.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will not get here unless a task calls vTaskEndScheduler ()
N }
N   </pre>
N *
N * \defgroup vTaskStartScheduler vTaskStartScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskStartScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskEndScheduler( void );</pre>
N *
N * Stops the real time kernel tick.  All created tasks will be automatically
N * deleted and multitasking (either preemptive or cooperative) will
N * stop.  Execution then resumes from the point where vTaskStartScheduler ()
N * was called, as if vTaskStartScheduler () had just returned.
N *
N * See the demo application file main. c in the demo/PC directory for an
N * example that uses vTaskEndScheduler ().
N *
N * vTaskEndScheduler () requires an exit function to be defined within the
N * portable layer (see vPortEndScheduler () in port. c for the PC port).  This
N * performs hardware specific operations such as stopping the kernel tick.
N *
N * vTaskEndScheduler () will cause all of the resources allocated by the
N * kernel to be freed - but will not free resources allocated by application
N * tasks.
N *
N * Example usage:
N   <pre>
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // At some point we want to end the real time kernel processing
N		 // so call ...
N		 vTaskEndScheduler ();
N	 }
N }
N
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will only get here when the vTaskCode () task has called
N	 // vTaskEndScheduler ().  When we get here we are back to single task
N	 // execution.
N }
N   </pre>
N *
N * \defgroup vTaskEndScheduler vTaskEndScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskEndScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspendAll( void );</pre>
N *
N * Suspends all real time kernel activity while keeping interrupts (including the
N * kernel tick) enabled.
N *
N * After calling vTaskSuspendAll () the calling task will continue to execute
N * without risk of being swapped out until a call to xTaskResumeAll () has been
N * made.
N *
N * API functions that have the potential to cause a context switch (for example,
N * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler
N * is suspended.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the kernel
N		 // tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.
N		 xTaskResumeAll ();
N	 }
N }
N   </pre>
N * \defgroup vTaskSuspendAll vTaskSuspendAll
N * \ingroup SchedulerControl
N */
Nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspendAll( void ) ;
N
N/**
N * task. h
N * <pre>char xTaskResumeAll( void );</pre>
N *
N * Resumes real time kernel activity following a call to vTaskSuspendAll ().
N * After a call to vTaskSuspendAll () the kernel will take control of which
N * task is executing at any time.
N *
N * @return If resuming the scheduler caused a context switch then pdTRUE is
N *		  returned, otherwise pdFALSE is returned.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the real
N		 // time kernel tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.  We want to force
N		 // a context switch - but there is no point if resuming the scheduler
N		 // caused a context switch already.
N		 if( !xTaskResumeAll () )
N		 {
N			  taskYIELD ();
N		 }
N	 }
N }
N   </pre>
N * \defgroup xTaskResumeAll xTaskResumeAll
N * \ingroup SchedulerControl
N */
Nsigned portBASE_TYPE xTaskResumeAll( void ) PRIVILEGED_FUNCTION;
Xsigned long xTaskResumeAll( void ) ;
N
N/**
N * task. h
N * <pre>signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask );</pre>
N *
N * Utility task that simply returns pdTRUE if the task referenced by xTask is
N * currently in the Suspended state, or pdFALSE if the task referenced by xTask
N * is in any other state.
N *
N */
Nsigned portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xsigned long xTaskIsTaskSuspended( xTaskHandle xTask ) ;
N
N/*-----------------------------------------------------------
N * TASK UTILITIES
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCount( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCount( void ) ;
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCountFromISR( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * This is a version of xTaskGetTickCount() that is safe to be called from an
N * ISR - provided that portTickType is the natural word size of the
N * microcontroller being used or interrupt nesting is either not supported or
N * not being used.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCountFromISR( void ) ;
N
N/**
N * task. h
N * <PRE>unsigned short uxTaskGetNumberOfTasks( void );</PRE>
N *
N * @return The number of tasks that the real time kernel is currently managing.
N * This includes all ready, blocked and suspended tasks.  A task that
N * has been deleted but not yet freed by the idle task will also be
N * included in the count.
N *
N * \page uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks
N * \ingroup TaskUtils
N */
Nunsigned portBASE_TYPE uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetNumberOfTasks( void ) ;
N
N/**
N * task. h
N * <PRE>signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );</PRE>
N *
N * @return The text (human readable) name of the task referenced by the handle
N * xTaskToQueury.  A task can query its own name by either passing in its own
N * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be
N * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.
N *
N * \page pcTaskGetTaskName pcTaskGetTaskName
N * \ingroup TaskUtils
N */
Nsigned char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
N
N/**
N * task. h
N * <PRE>void vTaskList( char *pcWriteBuffer );</PRE>
N *
N * configUSE_TRACE_FACILITY must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Lists all the current tasks, along with their current state and stack
N * usage high water mark.
N *
N * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or
N * suspended ('S').
N *
N * @param pcWriteBuffer A buffer into which the above mentioned details
N * will be written, in ascii form.  This buffer is assumed to be large
N * enough to contain the generated report.  Approximately 40 bytes per
N * task should be sufficient.
N *
N * \page vTaskList vTaskList
N * \ingroup TaskUtils
N */
Nvoid vTaskList( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskList( signed char *pcWriteBuffer ) ;
N
N/**
N * task. h
N * <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>
N *
N * configGENERATE_RUN_TIME_STATS must be defined as 1 for this function
N * to be available.  The application must also then provide definitions
N * for portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and
N * portGET_RUN_TIME_COUNTER_VALUE to configure a peripheral timer/counter
N * and return the timers current count value respectively.  The counter
N * should be at least 10 times the frequency of the tick count.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total
N * accumulated execution time being stored for each task.  The resolution
N * of the accumulated time value depends on the frequency of the timer
N * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.
N * Calling vTaskGetRunTimeStats() writes the total execution time of each
N * task into a buffer, both as an absolute count value and as a percentage
N * of the total system execution time.
N *
N * @param pcWriteBuffer A buffer into which the execution times will be
N * written, in ascii form.  This buffer is assumed to be large enough to
N * contain the generated report.  Approximately 40 bytes per task should
N * be sufficient.
N *
N * \page vTaskGetRunTimeStats vTaskGetRunTimeStats
N * \ingroup TaskUtils
N */
Nvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;
N
N/**
N * task.h
N * <PRE>unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask );</PRE>
N *
N * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for
N * this function to be available.
N *
N * Returns the high water mark of the stack associated with xTask.  That is,
N * the minimum free stack space there has been (in words, so on a 32 bit machine
N * a value of 1 means 4 bytes) since the task started.  The smaller the returned
N * number the closer the task has come to overflowing its stack.
N *
N * @param xTask Handle of the task associated with the stack to be checked.
N * Set xTask to NULL to check the stack of the calling task.
N *
N * @return The smallest amount of free stack space there has been (in bytes)
N * since the task referenced by xTask was created.
N */
Nunsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;
N
N/* When using trace macros it is sometimes necessary to include tasks.h before
NFreeRTOS.h.  When this is done pdTASK_HOOK_CODE will not yet have been defined,
Nso the following two prototypes will cause a compilation error.  This can be
Nfixed by simply guarding against the inclusion of these two prototypes unless
Nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration
Nconstant. */
N#ifdef configUSE_APPLICATION_TASK_TAG
N	#if configUSE_APPLICATION_TASK_TAG == 1
X	#if 0 == 1
S		/**
S		 * task.h
S		 * <pre>void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
S		 *
S		 * Sets pxHookFunction to be the task hook function used by the task xTask.
S		 * Passing xTask as NULL has the effect of setting the calling tasks hook
S		 * function.
S		 */
S		void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction ) PRIVILEGED_FUNCTION;
S
S		/**
S		 * task.h
S		 * <pre>void xTaskGetApplicationTaskTag( xTaskHandle xTask );</pre>
S		 *
S		 * Returns the pxHookFunction value assigned to the task xTask.
S		 */
S		pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
N	#endif /* configUSE_APPLICATION_TASK_TAG ==1 */
N#endif /* ifdef configUSE_APPLICATION_TASK_TAG */
N
N/**
N * task.h
N * <pre>portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
N *
N * Calls the hook function associated with xTask.  Passing xTask as NULL has
N * the effect of calling the Running tasks (the calling task) hook function.
N *
N * pvParameter is passed to the hook function for the task to interpret as it
N * wants.
N */
NportBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) PRIVILEGED_FUNCTION;
Xlong xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;
N
N/**
N * xTaskGetIdleTaskHandle() is only available if
N * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the idle task.  It is not valid to call
N * xTaskGetIdleTaskHandle() before the scheduler has been started.
N */
NxTaskHandle xTaskGetIdleTaskHandle( void );
N
N/*-----------------------------------------------------------
N * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
N *----------------------------------------------------------*/
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Called from the real time kernel tick (either preemptive or cooperative),
N * this increments the tick count and checks if any tasks that are blocked
N * for a finite period required removing from a blocked list and placing on
N * a ready list.
N */
Nvoid vTaskIncrementTick( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskIncrementTick( void ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes the calling task from the ready list and places it both
N * on the list of tasks waiting for a particular event, and the
N * list of delayed tasks.  The task will be removed from both lists
N * and replaced on the ready list should either the event occur (and
N * there be no higher priority tasks waiting on the same event) or
N * the delay period expires.
N *
N * @param pxEventList The list containing tasks that are blocked waiting
N * for the event to occur.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait
N * for the event to occur.  This is specified in kernel ticks,the constant
N * portTICK_RATE_MS can be used to convert kernel ticks into a real time
N * period.
N */
Nvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * This function performs nearly the same function as vTaskPlaceOnEventList().
N * The difference being that this function does not permit tasks to block
N * indefinitely, whereas vTaskPlaceOnEventList() does.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes a task from both the specified event list and the list of blocked
N * tasks, and places it on a ready queue.
N *
N * xTaskRemoveFromEventList () will be called if either an event occurs to
N * unblock a task, or the block timeout period expires.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nsigned portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList ) PRIVILEGED_FUNCTION;
Xsigned long xTaskRemoveFromEventList( const xList * const pxEventList ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Sets the pointer to the current TCB to the TCB of the highest priority task
N * that is ready to run.
N */
Nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSwitchContext( void ) ;
N
N/*
N * Return the handle of the calling task.
N */
NxTaskHandle xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;
XxTaskHandle xTaskGetCurrentTaskHandle( void ) ;
N
N/*
N * Capture the current time status for future reference.
N */
Nvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) PRIVILEGED_FUNCTION;
Xvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;
N
N/*
N * Compare the time status now with that previously captured to see if the
N * timeout has expired.
N */
NportBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) PRIVILEGED_FUNCTION;
Xlong xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;
N
N/*
N * Shortcut used by the queue implementation to prevent unnecessary call to
N * taskYIELD();
N */
Nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskMissedYield( void ) ;
N
N/*
N * Returns the scheduler state as taskSCHEDULER_RUNNING,
N * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.
N */
NportBASE_TYPE xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;
Xlong xTaskGetSchedulerState( void ) ;
N
N/*
N * Raises the priority of the mutex holder to that of the calling task should
N * the mutex holder have a priority less than the calling task.
N */
Nvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Set the priority of a task back to its proper priority in the case that it
N * inherited a higher priority while it was holding a semaphore.
N */
Nvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Generic version of the task creation function which is in turn called by the
N * xTaskCreate() and xTaskCreateRestricted() macros.
N */
Nsigned portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions ) PRIVILEGED_FUNCTION;
Xsigned long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;
N
N/*
N * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.
N */
Nunsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask );
Xunsigned long uxTaskGetTaskNumber( xTaskHandle xTask );
N
N/*
N * Set the uxTCBNumber of the task referenced by the xTask parameter to
N * ucHandle.
N */
Nvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle );
Xvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );
N
N/*
N * If tickless mode is being used, or a low power mode is implemented, then
N * the tick interrupt will not execute during idle periods.  When this is the
N * case, the tick count value maintained by the scheduler needs to be kept up
N * to date with the actual execution time by being skipped forward by the by
N * a time equal to the idle period.
N */
Nvoid vTaskStepTick( portTickType xTicksToJump );
N
N/*
N * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port
N * specific sleep function to determine if it is ok to proceed with the sleep,
N * and if it is ok to proceed, if it is ok to sleep indefinitely.
N *
N * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only
N * called with the scheduler suspended, not from within a critical section.  It
N * is therefore possible for an interrupt to request a context switch between
N * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being
N * entered.  eTaskConfirmSleepModeStatus() should be called from a short
N * critical section between the timer being stopped and the sleep mode being
N * entered to ensure it is ok to proceed into the sleep mode.
N */
NeSleepModeStatus eTaskConfirmSleepModeStatus( void );
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TASK_H */
N
N
N
L 77 "..\free_rtos\croutine.c" 2
N#include "croutine.h"
L 1 "..\free_rtos\croutine.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef CO_ROUTINE_H
N#define CO_ROUTINE_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include croutine.h"
N#endif
N
N#include "list.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Used to hide the implementation of the co-routine control block.  The
Ncontrol block structure however has to be included in the header due to
Nthe macro implementation of the co-routine functionality. */
Ntypedef void * xCoRoutineHandle;
N
N/* Defines the prototype to which co-routine functions must conform. */
Ntypedef void (*crCOROUTINE_CODE)( xCoRoutineHandle, unsigned portBASE_TYPE );
Xtypedef void (*crCOROUTINE_CODE)( xCoRoutineHandle, unsigned long );
N
Ntypedef struct corCoRoutineControlBlock
N{
N	crCOROUTINE_CODE 		pxCoRoutineFunction;
N	xListItem				xGenericListItem;	/*< List item used to place the CRCB in ready and blocked queues. */
N	xListItem				xEventListItem;		/*< List item used to place the CRCB in event lists. */
N	unsigned portBASE_TYPE 	uxPriority;			/*< The priority of the co-routine in relation to other co-routines. */
X	unsigned long 	uxPriority;			 
N	unsigned portBASE_TYPE 	uxIndex;			/*< Used to distinguish between co-routines when multiple co-routines use the same co-routine function. */
X	unsigned long 	uxIndex;			 
N	unsigned short 		uxState;			/*< Used internally by the co-routine implementation. */
N} corCRCB; /* Co-routine control block.  Note must be identical in size down to uxPriority with tskTCB. */
N
N/**
N * croutine. h
N *<pre>
N portBASE_TYPE xCoRoutineCreate(
N                                 crCOROUTINE_CODE pxCoRoutineCode,
N                                 unsigned portBASE_TYPE uxPriority,
N                                 unsigned portBASE_TYPE uxIndex
N                               );</pre>
N *
N * Create a new co-routine and add it to the list of co-routines that are
N * ready to run.
N *
N * @param pxCoRoutineCode Pointer to the co-routine function.  Co-routine
N * functions require special syntax - see the co-routine section of the WEB
N * documentation for more information.
N *
N * @param uxPriority The priority with respect to other co-routines at which
N *  the co-routine will run.
N *
N * @param uxIndex Used to distinguish between different co-routines that
N * execute the same function.  See the example below and the co-routine section
N * of the WEB documentation for further information.
N *
N * @return pdPASS if the co-routine was successfully created and added to a ready
N * list, otherwise an error code defined with ProjDefs.h.
N *
N * Example usage:
N   <pre>
N // Co-routine to be created.
N void vFlashCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N // This may not be necessary for const variables.
N static const char cLedToFlash[ 2 ] = { 5, 6 };
N static const portTickType uxFlashRates[ 2 ] = { 200, 400 };
N
N     // Must start every co-routine with a call to crSTART();
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N         // This co-routine just delays for a fixed period, then toggles
N         // an LED.  Two co-routines are created using this function, so
N         // the uxIndex parameter is used to tell the co-routine which
N         // LED to flash and how long to delay.  This assumes xQueue has
N         // already been created.
N         vParTestToggleLED( cLedToFlash[ uxIndex ] );
N         crDELAY( xHandle, uxFlashRates[ uxIndex ] );
N     }
N
N     // Must end every co-routine with a call to crEND();
N     crEND();
N }
N
N // Function that creates two co-routines.
N void vOtherFunction( void )
N {
N unsigned char ucParameterToPass;
N xTaskHandle xHandle;
N		
N     // Create two co-routines at priority 0.  The first is given index 0
N     // so (from the code above) toggles LED 5 every 200 ticks.  The second
N     // is given index 1 so toggles LED 6 every 400 ticks.
N     for( uxIndex = 0; uxIndex < 2; uxIndex++ )
N     {
N         xCoRoutineCreate( vFlashCoRoutine, 0, uxIndex );
N     }
N }
N   </pre>
N * \defgroup xCoRoutineCreate xCoRoutineCreate
N * \ingroup Tasks
N */
Nsigned portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex );
Xsigned long xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned long uxPriority, unsigned long uxIndex );
N
N
N/**
N * croutine. h
N *<pre>
N void vCoRoutineSchedule( void );</pre>
N *
N * Run a co-routine.
N *
N * vCoRoutineSchedule() executes the highest priority co-routine that is able
N * to run.  The co-routine will execute until it either blocks, yields or is
N * preempted by a task.  Co-routines execute cooperatively so one
N * co-routine cannot be preempted by another, but can be preempted by a task.
N *
N * If an application comprises of both tasks and co-routines then
N * vCoRoutineSchedule should be called from the idle task (in an idle task
N * hook).
N *
N * Example usage:
N   <pre>
N // This idle task hook will schedule a co-routine each time it is called.
N // The rest of the idle task will execute between co-routine calls.
N void vApplicationIdleHook( void )
N {
N	vCoRoutineSchedule();
N }
N
N // Alternatively, if you do not require any other part of the idle task to
N // execute, the idle task hook can call vCoRoutineScheduler() within an
N // infinite loop.
N void vApplicationIdleHook( void )
N {
N    for( ;; )
N    {
N        vCoRoutineSchedule();
N    }
N }
N </pre>
N * \defgroup vCoRoutineSchedule vCoRoutineSchedule
N * \ingroup Tasks
N */
Nvoid vCoRoutineSchedule( void );
N
N/**
N * croutine. h
N * <pre>
N crSTART( xCoRoutineHandle xHandle );</pre>
N *
N * This macro MUST always be called at the start of a co-routine function.
N *
N * Example usage:
N   <pre>
N // Co-routine to be created.
N void vACoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N static long ulAVariable;
N
N     // Must start every co-routine with a call to crSTART();
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N          // Co-routine functionality goes here.
N     }
N
N     // Must end every co-routine with a call to crEND();
N     crEND();
N }</pre>
N * \defgroup crSTART crSTART
N * \ingroup Tasks
N */
N#define crSTART( pxCRCB ) switch( ( ( corCRCB * )( pxCRCB ) )->uxState ) { case 0:
N
N/**
N * croutine. h
N * <pre>
N crEND();</pre>
N *
N * This macro MUST always be called at the end of a co-routine function.
N *
N * Example usage:
N   <pre>
N // Co-routine to be created.
N void vACoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N static long ulAVariable;
N
N     // Must start every co-routine with a call to crSTART();
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N          // Co-routine functionality goes here.
N     }
N
N     // Must end every co-routine with a call to crEND();
N     crEND();
N }</pre>
N * \defgroup crSTART crSTART
N * \ingroup Tasks
N */
N#define crEND() }
N
N/*
N * These macros are intended for internal use by the co-routine implementation
N * only.  The macros should not be used directly by application writers.
N */
N#define crSET_STATE0( xHandle ) ( ( corCRCB * )( xHandle ) )->uxState = (__LINE__ * 2); return; case (__LINE__ * 2):
N#define crSET_STATE1( xHandle ) ( ( corCRCB * )( xHandle ) )->uxState = ((__LINE__ * 2)+1); return; case ((__LINE__ * 2)+1):
N
N/**
N * croutine. h
N *<pre>
N crDELAY( xCoRoutineHandle xHandle, portTickType xTicksToDelay );</pre>
N *
N * Delay a co-routine for a fixed period of time.
N *
N * crDELAY can only be called from the co-routine function itself - not
N * from within a function called by the co-routine function.  This is because
N * co-routines do not maintain their own stack.
N *
N * @param xHandle The handle of the co-routine to delay.  This is the xHandle
N * parameter of the co-routine function.
N *
N * @param xTickToDelay The number of ticks that the co-routine should delay
N * for.  The actual amount of time this equates to is defined by
N * configTICK_RATE_HZ (set in FreeRTOSConfig.h).  The constant portTICK_RATE_MS
N * can be used to convert ticks to milliseconds.
N *
N * Example usage:
N   <pre>
N // Co-routine to be created.
N void vACoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N // This may not be necessary for const variables.
N // We are to delay for 200ms.
N static const xTickType xDelayTime = 200 / portTICK_RATE_MS;
N
N     // Must start every co-routine with a call to crSTART();
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N        // Delay for 200ms.
N        crDELAY( xHandle, xDelayTime );
N
N        // Do something here.
N     }
N
N     // Must end every co-routine with a call to crEND();
N     crEND();
N }</pre>
N * \defgroup crDELAY crDELAY
N * \ingroup Tasks
N */
N#define crDELAY( xHandle, xTicksToDelay )												\
N	if( ( xTicksToDelay ) > 0 )															\
N	{																					\
N		vCoRoutineAddToDelayedList( ( xTicksToDelay ), NULL );							\
N	}																					\
N	crSET_STATE0( ( xHandle ) );
X#define crDELAY( xHandle, xTicksToDelay )													if( ( xTicksToDelay ) > 0 )																{																							vCoRoutineAddToDelayedList( ( xTicksToDelay ), NULL );								}																						crSET_STATE0( ( xHandle ) );
N
N/**
N * <pre>
N crQUEUE_SEND(
N                  xCoRoutineHandle xHandle,
N                  xQueueHandle pxQueue,
N                  void *pvItemToQueue,
N                  portTickType xTicksToWait,
N                  portBASE_TYPE *pxResult
N             )</pre>
N *
N * The macro's crQUEUE_SEND() and crQUEUE_RECEIVE() are the co-routine
N * equivalent to the xQueueSend() and xQueueReceive() functions used by tasks.
N *
N * crQUEUE_SEND and crQUEUE_RECEIVE can only be used from a co-routine whereas
N * xQueueSend() and xQueueReceive() can only be used from tasks.
N *
N * crQUEUE_SEND can only be called from the co-routine function itself - not
N * from within a function called by the co-routine function.  This is because
N * co-routines do not maintain their own stack.
N *
N * See the co-routine section of the WEB documentation for information on
N * passing data between tasks and co-routines and between ISR's and
N * co-routines.
N *
N * @param xHandle The handle of the calling co-routine.  This is the xHandle
N * parameter of the co-routine function.
N *
N * @param pxQueue The handle of the queue on which the data will be posted.
N * The handle is obtained as the return value when the queue is created using
N * the xQueueCreate() API function.
N *
N * @param pvItemToQueue A pointer to the data being posted onto the queue.
N * The number of bytes of each queued item is specified when the queue is
N * created.  This number of bytes is copied from pvItemToQueue into the queue
N * itself.
N *
N * @param xTickToDelay The number of ticks that the co-routine should block
N * to wait for space to become available on the queue, should space not be
N * available immediately. The actual amount of time this equates to is defined
N * by configTICK_RATE_HZ (set in FreeRTOSConfig.h).  The constant
N * portTICK_RATE_MS can be used to convert ticks to milliseconds (see example
N * below).
N *
N * @param pxResult The variable pointed to by pxResult will be set to pdPASS if
N * data was successfully posted onto the queue, otherwise it will be set to an
N * error defined within ProjDefs.h.
N *
N * Example usage:
N   <pre>
N // Co-routine function that blocks for a fixed period then posts a number onto
N // a queue.
N static void prvCoRoutineFlashTask( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N static portBASE_TYPE xNumberToPost = 0;
N static portBASE_TYPE xResult;
N
N    // Co-routines must begin with a call to crSTART().
N    crSTART( xHandle );
N
N    for( ;; )
N    {
N        // This assumes the queue has already been created.
N        crQUEUE_SEND( xHandle, xCoRoutineQueue, &xNumberToPost, NO_DELAY, &xResult );
N
N        if( xResult != pdPASS )
N        {
N            // The message was not posted!
N        }
N
N        // Increment the number to be posted onto the queue.
N        xNumberToPost++;
N
N        // Delay for 100 ticks.
N        crDELAY( xHandle, 100 );
N    }
N
N    // Co-routines must end with a call to crEND().
N    crEND();
N }</pre>
N * \defgroup crQUEUE_SEND crQUEUE_SEND
N * \ingroup Tasks
N */
N#define crQUEUE_SEND( xHandle, pxQueue, pvItemToQueue, xTicksToWait, pxResult )			\
N{																						\
N	*( pxResult ) = xQueueCRSend( ( pxQueue) , ( pvItemToQueue) , ( xTicksToWait ) );	\
N	if( *( pxResult ) == errQUEUE_BLOCKED )												\
N	{																					\
N		crSET_STATE0( ( xHandle ) );													\
N		*pxResult = xQueueCRSend( ( pxQueue ), ( pvItemToQueue ), 0 );					\
N	}																					\
N	if( *pxResult == errQUEUE_YIELD )													\
N	{																					\
N		crSET_STATE1( ( xHandle ) );													\
N		*pxResult = pdPASS;																\
N	}																					\
N}
X#define crQUEUE_SEND( xHandle, pxQueue, pvItemToQueue, xTicksToWait, pxResult )			{																							*( pxResult ) = xQueueCRSend( ( pxQueue) , ( pvItemToQueue) , ( xTicksToWait ) );		if( *( pxResult ) == errQUEUE_BLOCKED )													{																							crSET_STATE0( ( xHandle ) );															*pxResult = xQueueCRSend( ( pxQueue ), ( pvItemToQueue ), 0 );						}																						if( *pxResult == errQUEUE_YIELD )														{																							crSET_STATE1( ( xHandle ) );															*pxResult = pdPASS;																	}																					}
N
N/**
N * croutine. h
N * <pre>
N  crQUEUE_RECEIVE(
N                     xCoRoutineHandle xHandle,
N                     xQueueHandle pxQueue,
N                     void *pvBuffer,
N                     portTickType xTicksToWait,
N                     portBASE_TYPE *pxResult
N                 )</pre>
N *
N * The macro's crQUEUE_SEND() and crQUEUE_RECEIVE() are the co-routine
N * equivalent to the xQueueSend() and xQueueReceive() functions used by tasks.
N *
N * crQUEUE_SEND and crQUEUE_RECEIVE can only be used from a co-routine whereas
N * xQueueSend() and xQueueReceive() can only be used from tasks.
N *
N * crQUEUE_RECEIVE can only be called from the co-routine function itself - not
N * from within a function called by the co-routine function.  This is because
N * co-routines do not maintain their own stack.
N *
N * See the co-routine section of the WEB documentation for information on
N * passing data between tasks and co-routines and between ISR's and
N * co-routines.
N *
N * @param xHandle The handle of the calling co-routine.  This is the xHandle
N * parameter of the co-routine function.
N *
N * @param pxQueue The handle of the queue from which the data will be received.
N * The handle is obtained as the return value when the queue is created using
N * the xQueueCreate() API function.
N *
N * @param pvBuffer The buffer into which the received item is to be copied.
N * The number of bytes of each queued item is specified when the queue is
N * created.  This number of bytes is copied into pvBuffer.
N *
N * @param xTickToDelay The number of ticks that the co-routine should block
N * to wait for data to become available from the queue, should data not be
N * available immediately. The actual amount of time this equates to is defined
N * by configTICK_RATE_HZ (set in FreeRTOSConfig.h).  The constant
N * portTICK_RATE_MS can be used to convert ticks to milliseconds (see the
N * crQUEUE_SEND example).
N *
N * @param pxResult The variable pointed to by pxResult will be set to pdPASS if
N * data was successfully retrieved from the queue, otherwise it will be set to
N * an error code as defined within ProjDefs.h.
N *
N * Example usage:
N <pre>
N // A co-routine receives the number of an LED to flash from a queue.  It
N // blocks on the queue until the number is received.
N static void prvCoRoutineFlashWorkTask( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // Variables in co-routines must be declared static if they must maintain value across a blocking call.
N static portBASE_TYPE xResult;
N static unsigned portBASE_TYPE uxLEDToFlash;
N
N    // All co-routines must start with a call to crSTART().
N    crSTART( xHandle );
N
N    for( ;; )
N    {
N        // Wait for data to become available on the queue.
N        crQUEUE_RECEIVE( xHandle, xCoRoutineQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );
N
N        if( xResult == pdPASS )
N        {
N            // We received the LED to flash - flash it!
N            vParTestToggleLED( uxLEDToFlash );
N        }
N    }
N
N    crEND();
N }</pre>
N * \defgroup crQUEUE_RECEIVE crQUEUE_RECEIVE
N * \ingroup Tasks
N */
N#define crQUEUE_RECEIVE( xHandle, pxQueue, pvBuffer, xTicksToWait, pxResult )			\
N{																						\
N	*( pxResult ) = xQueueCRReceive( ( pxQueue) , ( pvBuffer ), ( xTicksToWait ) );		\
N	if( *( pxResult ) == errQUEUE_BLOCKED ) 											\
N	{																					\
N		crSET_STATE0( ( xHandle ) );													\
N		*( pxResult ) = xQueueCRReceive( ( pxQueue) , ( pvBuffer ), 0 );				\
N	}																					\
N	if( *( pxResult ) == errQUEUE_YIELD )												\
N	{																					\
N		crSET_STATE1( ( xHandle ) );													\
N		*( pxResult ) = pdPASS;															\
N	}																					\
N}
X#define crQUEUE_RECEIVE( xHandle, pxQueue, pvBuffer, xTicksToWait, pxResult )			{																							*( pxResult ) = xQueueCRReceive( ( pxQueue) , ( pvBuffer ), ( xTicksToWait ) );			if( *( pxResult ) == errQUEUE_BLOCKED ) 												{																							crSET_STATE0( ( xHandle ) );															*( pxResult ) = xQueueCRReceive( ( pxQueue) , ( pvBuffer ), 0 );					}																						if( *( pxResult ) == errQUEUE_YIELD )													{																							crSET_STATE1( ( xHandle ) );															*( pxResult ) = pdPASS;																}																					}
N
N/**
N * croutine. h
N * <pre>
N  crQUEUE_SEND_FROM_ISR(
N                            xQueueHandle pxQueue,
N                            void *pvItemToQueue,
N                            portBASE_TYPE xCoRoutinePreviouslyWoken
N                       )</pre>
N *
N * The macro's crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() are the
N * co-routine equivalent to the xQueueSendFromISR() and xQueueReceiveFromISR()
N * functions used by tasks.
N *
N * crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() can only be used to
N * pass data between a co-routine and and ISR, whereas xQueueSendFromISR() and
N * xQueueReceiveFromISR() can only be used to pass data between a task and and
N * ISR.
N *
N * crQUEUE_SEND_FROM_ISR can only be called from an ISR to send data to a queue
N * that is being used from within a co-routine.
N *
N * See the co-routine section of the WEB documentation for information on
N * passing data between tasks and co-routines and between ISR's and
N * co-routines.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param xCoRoutinePreviouslyWoken This is included so an ISR can post onto
N * the same queue multiple times from a single interrupt.  The first call
N * should always pass in pdFALSE.  Subsequent calls should pass in
N * the value returned from the previous call.
N *
N * @return pdTRUE if a co-routine was woken by posting onto the queue.  This is
N * used by the ISR to determine if a context switch may be required following
N * the ISR.
N *
N * Example usage:
N <pre>
N // A co-routine that blocks on a queue waiting for characters to be received.
N static void vReceivingCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N char cRxedChar;
N portBASE_TYPE xResult;
N
N     // All co-routines must start with a call to crSTART().
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N         // Wait for data to become available on the queue.  This assumes the
N         // queue xCommsRxQueue has already been created!
N         crQUEUE_RECEIVE( xHandle, xCommsRxQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );
N
N         // Was a character received?
N         if( xResult == pdPASS )
N         {
N             // Process the character here.
N         }
N     }
N
N     // All co-routines must end with a call to crEND().
N     crEND();
N }
N
N // An ISR that uses a queue to send characters received on a serial port to
N // a co-routine.
N void vUART_ISR( void )
N {
N char cRxedChar;
N portBASE_TYPE xCRWokenByPost = pdFALSE;
N
N     // We loop around reading characters until there are none left in the UART.
N     while( UART_RX_REG_NOT_EMPTY() )
N     {
N         // Obtain the character from the UART.
N         cRxedChar = UART_RX_REG;
N
N         // Post the character onto a queue.  xCRWokenByPost will be pdFALSE
N         // the first time around the loop.  If the post causes a co-routine
N         // to be woken (unblocked) then xCRWokenByPost will be set to pdTRUE.
N         // In this manner we can ensure that if more than one co-routine is
N         // blocked on the queue only one is woken by this ISR no matter how
N         // many characters are posted to the queue.
N         xCRWokenByPost = crQUEUE_SEND_FROM_ISR( xCommsRxQueue, &cRxedChar, xCRWokenByPost );
N     }
N }</pre>
N * \defgroup crQUEUE_SEND_FROM_ISR crQUEUE_SEND_FROM_ISR
N * \ingroup Tasks
N */
N#define crQUEUE_SEND_FROM_ISR( pxQueue, pvItemToQueue, xCoRoutinePreviouslyWoken ) xQueueCRSendFromISR( ( pxQueue ), ( pvItemToQueue ), ( xCoRoutinePreviouslyWoken ) )
N
N
N/**
N * croutine. h
N * <pre>
N  crQUEUE_SEND_FROM_ISR(
N                            xQueueHandle pxQueue,
N                            void *pvBuffer,
N                            portBASE_TYPE * pxCoRoutineWoken
N                       )</pre>
N *
N * The macro's crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() are the
N * co-routine equivalent to the xQueueSendFromISR() and xQueueReceiveFromISR()
N * functions used by tasks.
N *
N * crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() can only be used to
N * pass data between a co-routine and and ISR, whereas xQueueSendFromISR() and
N * xQueueReceiveFromISR() can only be used to pass data between a task and and
N * ISR.
N *
N * crQUEUE_RECEIVE_FROM_ISR can only be called from an ISR to receive data
N * from a queue that is being used from within a co-routine (a co-routine
N * posted to the queue).
N *
N * See the co-routine section of the WEB documentation for information on
N * passing data between tasks and co-routines and between ISR's and
N * co-routines.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvBuffer A pointer to a buffer into which the received item will be
N * placed.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from the queue into
N * pvBuffer.
N *
N * @param pxCoRoutineWoken A co-routine may be blocked waiting for space to become
N * available on the queue.  If crQUEUE_RECEIVE_FROM_ISR causes such a
N * co-routine to unblock *pxCoRoutineWoken will get set to pdTRUE, otherwise
N * *pxCoRoutineWoken will remain unchanged.
N *
N * @return pdTRUE an item was successfully received from the queue, otherwise
N * pdFALSE.
N *
N * Example usage:
N <pre>
N // A co-routine that posts a character to a queue then blocks for a fixed
N // period.  The character is incremented each time.
N static void vSendingCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
N {
N // cChar holds its value while this co-routine is blocked and must therefore
N // be declared static.
N static char cCharToTx = 'a';
N portBASE_TYPE xResult;
N
N     // All co-routines must start with a call to crSTART().
N     crSTART( xHandle );
N
N     for( ;; )
N     {
N         // Send the next character to the queue.
N         crQUEUE_SEND( xHandle, xCoRoutineQueue, &cCharToTx, NO_DELAY, &xResult );
N
N         if( xResult == pdPASS )
N         {
N             // The character was successfully posted to the queue.
N         }
N		 else
N		 {
N			// Could not post the character to the queue.
N		 }
N
N         // Enable the UART Tx interrupt to cause an interrupt in this
N		 // hypothetical UART.  The interrupt will obtain the character
N		 // from the queue and send it.
N		 ENABLE_RX_INTERRUPT();
N
N		 // Increment to the next character then block for a fixed period.
N		 // cCharToTx will maintain its value across the delay as it is
N		 // declared static.
N		 cCharToTx++;
N		 if( cCharToTx > 'x' )
N		 {
N			cCharToTx = 'a';
N		 }
N		 crDELAY( 100 );
N     }
N
N     // All co-routines must end with a call to crEND().
N     crEND();
N }
N
N // An ISR that uses a queue to receive characters to send on a UART.
N void vUART_ISR( void )
N {
N char cCharToTx;
N portBASE_TYPE xCRWokenByPost = pdFALSE;
N
N     while( UART_TX_REG_EMPTY() )
N     {
N         // Are there any characters in the queue waiting to be sent?
N		 // xCRWokenByPost will automatically be set to pdTRUE if a co-routine
N		 // is woken by the post - ensuring that only a single co-routine is
N		 // woken no matter how many times we go around this loop.
N         if( crQUEUE_RECEIVE_FROM_ISR( pxQueue, &cCharToTx, &xCRWokenByPost ) )
N		 {
N			 SEND_CHARACTER( cCharToTx );
N		 }
N     }
N }</pre>
N * \defgroup crQUEUE_RECEIVE_FROM_ISR crQUEUE_RECEIVE_FROM_ISR
N * \ingroup Tasks
N */
N#define crQUEUE_RECEIVE_FROM_ISR( pxQueue, pvBuffer, pxCoRoutineWoken ) xQueueCRReceiveFromISR( ( pxQueue ), ( pvBuffer ), ( pxCoRoutineWoken ) )
N
N/*
N * This function is intended for internal use by the co-routine macros only.
N * The macro nature of the co-routine implementation requires that the
N * prototype appears here.  The function should not be used by application
N * writers.
N *
N * Removes the current co-routine from its ready list and places it in the
N * appropriate delayed list.
N */
Nvoid vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList );
N
N/*
N * This function is intended for internal use by the queue implementation only.
N * The function should not be used by application writers.
N *
N * Removes the highest priority co-routine from the event list and places it in
N * the pending ready list.
N */
Nsigned portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList );
Xsigned long xCoRoutineRemoveFromEventList( const xList *pxEventList );
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* CO_ROUTINE_H */
L 78 "..\free_rtos\croutine.c" 2
N
N/*
N * Some kernel aware debuggers require data to be viewed to be global, rather
N * than file scope.
N */
N#ifdef portREMOVE_STATIC_QUALIFIER
S	#define static
N#endif
N
N
N/* Lists for ready and blocked co-routines. --------------------*/
Nstatic xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-routines. */
Xstatic xList pxReadyCoRoutineLists[ ( 2 ) ];	 
Nstatic xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
Nstatic xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for delays that have overflowed the current tick count. */
Nstatic xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently being used. */
Nstatic xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. */
Nstatic xList xPendingReadyCoRoutineList;								/*< Holds co-routines that have been readied by an external event.  They cannot be added directly to the ready lists as the ready lists cannot be accessed by interrupts. */
N
N/* Other file private variables. --------------------------------*/
NcorCRCB * pxCurrentCoRoutine = NULL;
XcorCRCB * pxCurrentCoRoutine = 0;
Nstatic unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
Xstatic unsigned long uxTopCoRoutineReadyPriority = 0;
Nstatic portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
N
N/* The initial state of the co-routine when it is created. */
N#define corINITIAL_STATE	( 0 )
N
N/*
N * Place the co-routine represented by pxCRCB into the appropriate ready queue
N * for the priority.  It is inserted at the end of the list.
N *
N * This macro accesses the co-routine ready lists and therefore must not be
N * used from within an ISR.
N */
N#define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
N{																													\
N	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
N	{																												\
N		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
N	}																												\
N	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericListItem ) );	\
N}
X#define prvAddCoRoutineToReadyQueue( pxCRCB )																		{																														if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )																{																														uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;																}																													vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericListItem ) );	}
N
N/*
N * Utility to ready all the lists used by the scheduler.  This is called
N * automatically upon the creation of the first co-routine.
N */
Nstatic void prvInitialiseCoRoutineLists( void );
N
N/*
N * Co-routines that are readied by an interrupt cannot be placed directly into
N * the ready lists (there is no mutual exclusion).  Instead they are placed in
N * in the pending ready list in order that they can later be moved to the ready
N * list by the co-routine scheduler.
N */
Nstatic void prvCheckPendingReadyList( void );
N
N/*
N * Macro that looks at the list of co-routines that are currently delayed to
N * see if any require waking.
N *
N * Co-routines are stored in the queue in the order of their wake time -
N * meaning once one co-routine has been found whose timer has not expired
N * we need not look any further down the list.
N */
Nstatic void prvCheckDelayedList( void );
N
N/*-----------------------------------------------------------*/
N
Nsigned portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
Xsigned long xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned long uxPriority, unsigned long uxIndex )
N{
Nsigned portBASE_TYPE xReturn;
Xsigned long xReturn;
NcorCRCB *pxCoRoutine;
N
N	/* Allocate the memory that will store the co-routine control block. */
N	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
N	if( pxCoRoutine )
N	{
N		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
N		be created and the co-routine data structures need initialising. */
N		if( pxCurrentCoRoutine == NULL )
X		if( pxCurrentCoRoutine == 0 )
N		{
N			pxCurrentCoRoutine = pxCoRoutine;
N			prvInitialiseCoRoutineLists();
N		}
N
N		/* Check the priority is within limits. */
N		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
X		if( uxPriority >= ( 2 ) )
N		{
N			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
X			uxPriority = ( 2 ) - 1;
N		}
N
N		/* Fill out the co-routine control block from the function parameters. */
N		pxCoRoutine->uxState = corINITIAL_STATE;
X		pxCoRoutine->uxState = ( 0 );
N		pxCoRoutine->uxPriority = uxPriority;
N		pxCoRoutine->uxIndex = uxIndex;
N		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
N
N		/* Initialise all the other co-routine control block parameters. */
N		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
N		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
N
N		/* Set the co-routine control block as a link back from the xListItem.
N		This is so we can get back to the containing CRCB from a generic item
N		in a list. */
N		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
X		( &( pxCoRoutine ->xGenericListItem ) )->pvOwner = ( void * ) ( pxCoRoutine );
N		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
X		( &( pxCoRoutine ->xEventListItem ) )->pvOwner = ( void * ) ( pxCoRoutine );
N
N		/* Event lists are always in priority order. */
N		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
X		( &( pxCoRoutine ->xEventListItem ) )->xItemValue = ( ( ( unsigned long ) 5 ) - ( portTickType ) uxPriority );
N
N		/* Now the co-routine has been initialised it can be added to the ready
N		list at the correct priority. */
N		prvAddCoRoutineToReadyQueue( pxCoRoutine );
X		{ if( pxCoRoutine ->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxCoRoutine ->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCoRoutine ->uxPriority ] ), &( pxCoRoutine ->xGenericListItem ) ); };
N
N		xReturn = pdPASS;
X		xReturn = ( 1 );
N	}
N	else
N	{
N		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
X		xReturn = ( -1 );
N	}
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
N{
NportTickType xTimeToWake;
N
N	/* Calculate the time to wake - this may overflow but this is
N	not a problem. */
N	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
N
N	/* We must remove ourselves from the ready list before adding
N	ourselves to the blocked list as the same list item is used for
N	both lists. */
N	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
N
N	/* The list item will be inserted in wake time order. */
N	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
X	( &( pxCurrentCoRoutine ->xGenericListItem ) )->xItemValue = ( xTimeToWake );
N
N	if( xTimeToWake < xCoRoutineTickCount )
N	{
N		/* Wake time has overflowed.  Place this item in the
N		overflow list. */
N		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
N	}
N	else
N	{
N		/* The wake time has not overflowed, so we can use the
N		current block list. */
N		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
N	}
N
N	if( pxEventList )
N	{
N		/* Also add the co-routine to an event list.  If this is done then the
N		function must be called with interrupts disabled. */
N		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
N	}
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvCheckPendingReadyList( void )
N{
N	/* Are there any co-routines waiting to get moved to the ready list?  These
N	are co-routines that have been readied by an ISR.  The ISR cannot access
N	the	ready lists itself. */
N	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
X	while( ( ( &xPendingReadyCoRoutineList )->uxNumberOfItems == ( unsigned long ) 0 ) == ( 0 ) )
N	{
N		corCRCB *pxUnblockedCRCB;
N
N		/* The pending ready list can be accessed by an ISR. */
N		portDISABLE_INTERRUPTS();
X		ulPortSetInterruptMask();
N		{
N			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
X			pxUnblockedCRCB = ( corCRCB * ) ( (&( ( (&xPendingReadyCoRoutineList) )->xListEnd ))->pxNext->pvOwner );
N			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
N		}
N		portENABLE_INTERRUPTS();
X		vPortClearInterruptMask( 0 );
N
N		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
N		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
X		{ if( pxUnblockedCRCB->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxUnblockedCRCB->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxUnblockedCRCB->uxPriority ] ), &( pxUnblockedCRCB->xGenericListItem ) ); };
N	}
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvCheckDelayedList( void )
N{
NcorCRCB *pxCRCB;
N
N	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
N	while( xPassedTicks )
N	{
N		xCoRoutineTickCount++;
N		xPassedTicks--;
N
N		/* If the tick count has overflowed we need to swap the ready lists. */
N		if( xCoRoutineTickCount == 0 )
N		{
N			xList * pxTemp;
N
N			/* Tick count has overflowed so we need to swap the delay lists.  If there are
N			any items in pxDelayedCoRoutineList here then there is an error! */
N			pxTemp = pxDelayedCoRoutineList;
N			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
N			pxOverflowDelayedCoRoutineList = pxTemp;
N		}
N
N		/* See if this tick has made a timeout expire. */
N		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
X		while( ( ( pxDelayedCoRoutineList )->uxNumberOfItems == ( unsigned long ) 0 ) == ( 0 ) )
N		{
N			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
X			pxCRCB = ( corCRCB * ) ( (&( ( pxDelayedCoRoutineList )->xListEnd ))->pxNext->pvOwner );
N
N			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
X			if( xCoRoutineTickCount < ( ( &( pxCRCB->xGenericListItem ) )->xItemValue ) )
N			{
N				/* Timeout not yet expired. */
N				break;
N			}
N
N			portDISABLE_INTERRUPTS();
X			ulPortSetInterruptMask();
N			{
N				/* The event could have occurred just before this critical
N				section.  If this is the case then the generic list item will
N				have been moved to the pending ready list and the following
N				line is still valid.  Also the pvContainer parameter will have
N				been set to NULL so the following lines are also valid. */
N				uxListRemove( &( pxCRCB->xGenericListItem ) );
N
N				/* Is the co-routine waiting on an event also? */
N				if( pxCRCB->xEventListItem.pvContainer )
N				{
N					uxListRemove( &( pxCRCB->xEventListItem ) );
N				}
N			}
N			portENABLE_INTERRUPTS();
X			vPortClearInterruptMask( 0 );
N
N			prvAddCoRoutineToReadyQueue( pxCRCB );
X			{ if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxCRCB->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericListItem ) ); };
N		}
N	}
N
N	xLastTickCount = xCoRoutineTickCount;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vCoRoutineSchedule( void )
N{
N	/* See if any co-routines readied by events need moving to the ready lists. */
N	prvCheckPendingReadyList();
N
N	/* See if any delayed co-routines have timed out. */
N	prvCheckDelayedList();
N
N	/* Find the highest priority queue that contains ready co-routines. */
N	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
X	while( ( ( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) )->uxNumberOfItems == ( unsigned long ) 0 ) )
N	{
N		if( uxTopCoRoutineReadyPriority == 0 )
N		{
N			/* No more co-routines to check. */
N			return;
N		}
N		--uxTopCoRoutineReadyPriority;
N	}
N
N	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
N	 of the	same priority get an equal share of the processor time. */
N	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
X	{ xList * const pxConstList = ( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxCurrentCoRoutine ) = ( pxConstList )->pxIndex->pvOwner; };
N
N	/* Call the co-routine. */
N	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
N
N	return;
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvInitialiseCoRoutineLists( void )
N{
Nunsigned portBASE_TYPE uxPriority;
Xunsigned long uxPriority;
N
N	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
X	for( uxPriority = 0; uxPriority < ( 2 ); uxPriority++ )
N	{
N		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
N	}
N
N	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
N	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
N	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
N
N	/* Start with pxDelayedCoRoutineList using list1 and the
N	pxOverflowDelayedCoRoutineList using list2. */
N	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
N	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
N}
N/*-----------------------------------------------------------*/
N
Nsigned portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
Xsigned long xCoRoutineRemoveFromEventList( const xList *pxEventList )
N{
NcorCRCB *pxUnblockedCRCB;
Nsigned portBASE_TYPE xReturn;
Xsigned long xReturn;
N
N	/* This function is called from within an interrupt.  It can only access
N	event lists and the pending ready list.  This function assumes that a
N	check has already been made to ensure pxEventList is not empty. */
N	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
X	pxUnblockedCRCB = ( corCRCB * ) ( (&( ( pxEventList )->xListEnd ))->pxNext->pvOwner );
N	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
N	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
N
N	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
N	{
N		xReturn = pdTRUE;
X		xReturn = ( 1 );
N	}
N	else
N	{
N		xReturn = pdFALSE;
X		xReturn = ( 0 );
N	}
N
N	return xReturn;
N}
N
