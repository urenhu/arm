; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usr_adc.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\usr_adc.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\usr_adc.crf ..\usr_lib\usr_adc.c]
                          THUMB

                          AREA ||i.usradc_get||, CODE, READONLY, ALIGN=2

                  usradc_get PROC
;;;40     
;;;41     u16 usradc_get (u8 ch)   
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43     	ADC_RegularChannelConfig(ADC1, ch, 1, ADC_SampleTime_239Cycles5 );	
000002  4c0b              LDR      r4,|L1.48|
000004  4601              MOV      r1,r0
000006  2307              MOVS     r3,#7
000008  2201              MOVS     r2,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ADC_RegularChannelConfig
;;;44     	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       ADC_SoftwareStartConvCmd
                  |L1.24|
;;;45     	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC ));
000018  2102              MOVS     r1,#2
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       ADC_GetFlagStatus
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L1.24|
;;;46     	
;;;47     	return ADC_GetConversionValue(ADC1);	
000024  4620              MOV      r0,r4
000026  e8bd4010          POP      {r4,lr}
00002a  f7ffbffe          B.W      ADC_GetConversionValue
;;;48     }
;;;49     
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x40012400

                          AREA ||i.usradc_getav||, CODE, READONLY, ALIGN=1

                  usradc_getav PROC
;;;49     
;;;50     u16 usradc_getav(u8 ch,u8 times)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;51     {
;;;52     	u32 temp_val=0;
000004  2600              MOVS     r6,#0
000006  460d              MOV      r5,r1                 ;51
000008  4607              MOV      r7,r0                 ;51
;;;53     	u8 t;
;;;54     	if (times >= 10) 
00000a  290a              CMP      r1,#0xa
00000c  d302              BCC      |L2.20|
;;;55     		times = 10;
00000e  250a              MOVS     r5,#0xa
;;;56     	for(t=0;t<times;t++){
000010  2400              MOVS     r4,#0
000012  e001              B        |L2.24|
                  |L2.20|
000014  2400              MOVS     r4,#0
000016  e008              B        |L2.42|
                  |L2.24|
;;;57     		temp_val += usradc_get(ch);
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       usradc_get
00001e  4406              ADD      r6,r6,r0
;;;58     		delay_ms(5);
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       delay_ms
000026  1c64              ADDS     r4,r4,#1
000028  b2e4              UXTB     r4,r4                 ;56
                  |L2.42|
00002a  42ac              CMP      r4,r5                 ;56
00002c  d3f4              BCC      |L2.24|
;;;59     	}
;;;60     	return temp_val/times;
00002e  fbb6f0f5          UDIV     r0,r6,r5
000032  b280              UXTH     r0,r0
;;;61     } 	 
000034  e8bd81f0          POP      {r4-r8,pc}
;;;62     
                          ENDP


                          AREA ||i.usradc_init||, CODE, READONLY, ALIGN=2

                  usradc_init PROC
;;;4       
;;;5      void  usradc_init (void)
000000  b530              PUSH     {r4,r5,lr}
;;;6      { 	
000002  b087              SUB      sp,sp,#0x1c
;;;7      	ADC_InitTypeDef ADC_InitStructure; 
;;;8      	GPIO_InitTypeDef GPIO_InitStructure;
;;;9      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |RCC_APB2Periph_ADC1	, ENABLE );	  //使能ADC1通道时钟
000004  2101              MOVS     r1,#1
000006  f44f7001          MOV      r0,#0x204
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;10      
;;;11     	RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,ENABLE);	  //ADC1
00000e  2101              MOVS     r1,#1
000010  024c              LSLS     r4,r1,#9
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;12     	RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,DISABLE);  //ADC1
000018  2100              MOVS     r1,#0
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;13     
;;;14     	RCC_ADCCLKConfig(RCC_PCLK2_Div6);   //72M/6=12,ADC最大时间不能超过14M
000020  01a0              LSLS     r0,r4,#6
000022  f7fffffe          BL       RCC_ADCCLKConfig
;;;15     
;;;16     	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_1;
000026  2002              MOVS     r0,#2
000028  f8ad0014          STRH     r0,[sp,#0x14]
;;;17     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;		//analog inout 
00002c  2400              MOVS     r4,#0
00002e  f88d4017          STRB     r4,[sp,#0x17]
;;;18     	GPIO_Init(GPIOA, &GPIO_InitStructure);	
000032  a905              ADD      r1,sp,#0x14
000034  4818              LDR      r0,|L3.152|
000036  f7fffffe          BL       GPIO_Init
;;;19     
;;;20     	ADC_DeInit(ADC1);  
00003a  4d18              LDR      r5,|L3.156|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       ADC_DeInit
;;;21     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	
;;;22     	ADC_InitStructure.ADC_ScanConvMode = DISABLE;	
;;;23     	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;	
;;;24     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	
000042  f44f2060          MOV      r0,#0xe0000
000046  e9cd0402          STRD     r0,r4,[sp,#8]
;;;25     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;	
;;;26     	ADC_InitStructure.ADC_NbrOfChannel = 1;
00004a  2001              MOVS     r0,#1
00004c  f88d4004          STRB     r4,[sp,#4]            ;22
000050  f88d0010          STRB     r0,[sp,#0x10]
000054  9400              STR      r4,[sp,#0]            ;22
000056  f88d4005          STRB     r4,[sp,#5]            ;23
;;;27     	ADC_Init(ADC1, &ADC_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       ADC_Init
;;;28     
;;;29     	//ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_239Cycles5);  //ADC规则序列配置
;;;30     	ADC_Cmd(ADC1, ENABLE);	    //ADC1
000062  2101              MOVS     r1,#1
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       ADC_Cmd
;;;31     	ADC_ResetCalibration(ADC1);	//
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       ADC_ResetCalibration
000070  462c              MOV      r4,r5                 ;20
                  |L3.114|
;;;32     	
;;;33     	while(ADC_GetResetCalibrationStatus(ADC1));	
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       ADC_GetResetCalibrationStatus
000078  2800              CMP      r0,#0
00007a  d1fa              BNE      |L3.114|
;;;34     	ADC_StartCalibration(ADC1);		
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       ADC_StartCalibration
                  |L3.130|
;;;35     	
;;;36     	while(ADC_GetCalibrationStatus(ADC1));	
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       ADC_GetCalibrationStatus
000088  2800              CMP      r0,#0
00008a  d1fa              BNE      |L3.130|
;;;37     	ADC_SoftwareStartConvCmd(ADC1, ENABLE);	
00008c  2101              MOVS     r1,#1
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;38     
;;;39     }				  
000094  b007              ADD      sp,sp,#0x1c
000096  bd30              POP      {r4,r5,pc}
;;;40     
                          ENDP

                  |L3.152|
                          DCD      0x40010800
                  |L3.156|
                          DCD      0x40012400
