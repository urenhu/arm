; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fram.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\fram.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\fram.crf ..\ctt\fram.c]
                          THUMB

                          AREA ||i.disp_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  disp_buf PROC
;;;121    
;;;122    static int disp_buf    ()
000000  b570              PUSH     {r4-r6,lr}
;;;123    {
;;;124      int ret = CMD_RC_SUCCESS;
000002  2500              MOVS     r5,#0
;;;125      int i = 0;
000004  462c              MOV      r4,r5
;;;126      
;;;127      printf ("\r\nFRAM:BUF:=== start===\r\n");	
000006  a00b              ADR      r0,|L1.52|
000008  f7fffffe          BL       __2printf
;;;128      for (i=0;i<BUFL;i++){
;;;129         if (i%16 == 0 && i != 0 ) printf ("\r\n");	
;;;130         printf ("%02x ", (int)buf[i]); 
00000c  4e10              LDR      r6,|L1.80|
                  |L1.14|
00000e  0720              LSLS     r0,r4,#28             ;129
000010  d103              BNE      |L1.26|
000012  b114              CBZ      r4,|L1.26|
000014  a00f              ADR      r0,|L1.84|
000016  f7fffffe          BL       __2printf
                  |L1.26|
00001a  5d31              LDRB     r1,[r6,r4]
00001c  a00e              ADR      r0,|L1.88|
00001e  f7fffffe          BL       __2printf
000022  1c64              ADDS     r4,r4,#1
000024  2cff              CMP      r4,#0xff              ;128
000026  ddf2              BLE      |L1.14|
;;;131      }
;;;132      printf ("\r\nFRAM:BUF:=== end ===\r\n");	
000028  a00d              ADR      r0,|L1.96|
00002a  f7fffffe          BL       __2printf
;;;133      return ret;
00002e  4628              MOV      r0,r5
;;;134    }
000030  bd70              POP      {r4-r6,pc}
;;;135    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
000034  0d0a4652          DCB      "\r\nFRAM:BUF:=== start===\r\n",0
000038  414d3a42
00003c  55463a3d
000040  3d3d2073
000044  74617274
000048  3d3d3d0d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L1.80|
                          DCD      ||.bss||
                  |L1.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L1.88|
000058  25303278          DCB      "%02x ",0
00005c  2000    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L1.96|
000060  0d0a4652          DCB      "\r\nFRAM:BUF:=== end ===\r\n",0
000064  414d3a42
000068  55463a3d
00006c  3d3d2065
000070  6e64203d
000074  3d3d0d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.fill_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  fill_buf PROC
;;;105    
;;;106    static int fill_buf    (const char *pattStr)
000000  b538              PUSH     {r3-r5,lr}
;;;107    {
;;;108      int ret = CMD_RC_SUCCESS;
000002  2500              MOVS     r5,#0
;;;109      int pat = 0;
;;;110      int i = 0;
000004  462c              MOV      r4,r5
;;;111      
;;;112      sscanf (pattStr, "0x%x",&pat); 
000006  466a              MOV      r2,sp
000008  a107              ADR      r1,|L2.40|
00000a  9500              STR      r5,[sp,#0]
00000c  f7fffffe          BL       __0sscanf
;;;113      for (i=0;i<BUFL;i++)
;;;114    	  buf[i] = pat&0xff;
000010  9900              LDR      r1,[sp,#0]
000012  4a07              LDR      r2,|L2.48|
000014  b2c8              UXTB     r0,r1
                  |L2.22|
000016  5510              STRB     r0,[r2,r4]
000018  1c64              ADDS     r4,r4,#1
00001a  2cff              CMP      r4,#0xff              ;113
00001c  ddfb              BLE      |L2.22|
;;;115    
;;;116      printf ("\r\nFRAM:BUF:PATTERN:0x%x\r\n", pat);	
00001e  a005              ADR      r0,|L2.52|
000020  f7fffffe          BL       __2printf
;;;117      
;;;118      return ret;
000024  4628              MOV      r0,r5
;;;119    }
000026  bd38              POP      {r3-r5,pc}
;;;120    
                          ENDP

                  |L2.40|
000028  30782578          DCB      "0x%x",0
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L2.48|
                          DCD      ||.bss||
                  |L2.52|
000034  0d0a4652          DCB      "\r\nFRAM:BUF:PATTERN:0x%x\r\n",0
000038  414d3a42
00003c  55463a50
000040  41545445
000044  524e3a30
000048  7825780d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.info_fram||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  info_fram PROC
;;;46     *****************************************************************************/
;;;47     static int info_fram   (void)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49       int ret = CMD_RC_SUCCESS;
000002  2400              MOVS     r4,#0
;;;50       
;;;51       sr = usr_fram_read_sr (); 
000004  f7fffffe          BL       usr_fram_read_sr
000008  4903              LDR      r1,|L3.24|
00000a  7008              STRB     r0,[r1,#0]
00000c  4601              MOV      r1,r0
;;;52       printf ("\r\nFRAM:SR:0x%x\r\n", sr);	
00000e  a003              ADR      r0,|L3.28|
000010  f7fffffe          BL       __2printf
;;;53       
;;;54       return ret;
000014  4620              MOV      r0,r4
;;;55     }
000016  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  |L3.24|
                          DCD      ||.data||
                  |L3.28|
00001c  0d0a4652          DCB      "\r\nFRAM:SR:0x%x\r\n",0
000020  414d3a53
000024  523a3078
000028  25780d0a
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.read_fram||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  read_fram PROC
;;;67     
;;;68     static int read_fram   (const char *adrStr, const char *lenStr)
000000  b57c              PUSH     {r2-r6,lr}
;;;69     {
;;;70       int ret = CMD_RC_SUCCESS;
000002  2400              MOVS     r4,#0
000004  460d              MOV      r5,r1                 ;69
;;;71       u16 adr = 0;
000006  f8ad4004          STRH     r4,[sp,#4]
;;;72       u16 len = 0;
00000a  f8ad4000          STRH     r4,[sp,#0]
;;;73       
;;;74       sscanf (adrStr, "0x%x",&adr); 
00000e  aa01              ADD      r2,sp,#4
000010  a110              ADR      r1,|L4.84|
000012  f7fffffe          BL       __0sscanf
;;;75       sscanf (lenStr, "%d",&len); 
000016  466a              MOV      r2,sp
000018  a110              ADR      r1,|L4.92|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __0sscanf
;;;76     
;;;77       if (len>BUFL ) len = BUFL;
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  f44f7080          MOV      r0,#0x100
000028  4281              CMP      r1,r0
00002a  d901              BLS      |L4.48|
00002c  f8ad0000          STRH     r0,[sp,#0]
                  |L4.48|
;;;78       
;;;79       usr_fram_read  (buf, len, adr);
000030  f8bd2004          LDRH     r2,[sp,#4]
000034  f8bd1000          LDRH     r1,[sp,#0]
000038  4809              LDR      r0,|L4.96|
00003a  f7fffffe          BL       usr_fram_read
;;;80     
;;;81       printf ("\r\nFRAM:BUF:READ: ADR : 0x%x LEN:%d \r\n", adr, len );	
00003e  f8bd2000          LDRH     r2,[sp,#0]
000042  f8bd1004          LDRH     r1,[sp,#4]
000046  a007              ADR      r0,|L4.100|
000048  f7fffffe          BL       __2printf
;;;82       
;;;83       disp_buf ();
00004c  f7fffffe          BL       disp_buf
;;;84       
;;;85       return ret;
000050  4620              MOV      r0,r4
;;;86     }
000052  bd7c              POP      {r2-r6,pc}
;;;87     
                          ENDP

                  |L4.84|
000054  30782578          DCB      "0x%x",0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L4.92|
00005c  256400            DCB      "%d",0
00005f  00                DCB      0
                  |L4.96|
                          DCD      ||.bss||
                  |L4.100|
000064  0d0a4652          DCB      "\r\nFRAM:BUF:READ: ADR : 0x%x LEN:%d \r\n",0
000068  414d3a42
00006c  55463a52
000070  4541443a
000074  20414452
000078  203a2030
00007c  78257820
000080  4c454e3a
000084  2564200d
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.set_fram||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  set_fram PROC
;;;56     
;;;57     static int set_fram    (const char *strSR )
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59       int ret = CMD_RC_SUCCESS;
000002  2400              MOVS     r4,#0
;;;60       
;;;61       sscanf (strSR,"0x%x",&sr);
000004  4a05              LDR      r2,|L5.28|
000006  a106              ADR      r1,|L5.32|
000008  f7fffffe          BL       __0sscanf
;;;62       usr_fram_write_sr (sr);
00000c  4803              LDR      r0,|L5.28|
00000e  7800              LDRB     r0,[r0,#0]  ; sr
000010  f7fffffe          BL       usr_fram_write_sr
;;;63       info_fram();
000014  f7fffffe          BL       info_fram
;;;64      
;;;65       return ret;
000018  4620              MOV      r0,r4
;;;66     }
00001a  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  |L5.28|
                          DCD      ||.data||
                  |L5.32|
000020  30782578          DCB      "0x%x",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.write_fram||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  write_fram PROC
;;;87     
;;;88     static int write_fram  (const char *adrStr, const char *lenStr)
000000  b57c              PUSH     {r2-r6,lr}
;;;89     {
;;;90       int ret = CMD_RC_SUCCESS;
000002  2400              MOVS     r4,#0
000004  460d              MOV      r5,r1                 ;89
;;;91       u16 adr = 0;
000006  f8ad4004          STRH     r4,[sp,#4]
;;;92       u16 len = 0;
00000a  f8ad4000          STRH     r4,[sp,#0]
;;;93       
;;;94       sscanf (adrStr, "0x%x",&adr); 
00000e  aa01              ADD      r2,sp,#4
000010  a10f              ADR      r1,|L6.80|
000012  f7fffffe          BL       __0sscanf
;;;95       sscanf (lenStr, "%d",&len); 
000016  466a              MOV      r2,sp
000018  a10f              ADR      r1,|L6.88|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __0sscanf
;;;96     
;;;97       if (len>BUFL ) len = BUFL;
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  f44f7080          MOV      r0,#0x100
000028  4281              CMP      r1,r0
00002a  d901              BLS      |L6.48|
00002c  f8ad0000          STRH     r0,[sp,#0]
                  |L6.48|
;;;98       
;;;99       usr_fram_write  (buf, len, adr);
000030  f8bd2004          LDRH     r2,[sp,#4]
000034  f8bd1000          LDRH     r1,[sp,#0]
000038  4808              LDR      r0,|L6.92|
00003a  f7fffffe          BL       usr_fram_write
;;;100    
;;;101      printf ("\r\nFRAM:BUF:WRITE: ADR : 0x%x LEN:%d \r\n", adr, len );	
00003e  f8bd2000          LDRH     r2,[sp,#0]
000042  f8bd1004          LDRH     r1,[sp,#4]
000046  a006              ADR      r0,|L6.96|
000048  f7fffffe          BL       __2printf
;;;102    
;;;103      return ret;
00004c  4620              MOV      r0,r4
;;;104    }
00004e  bd7c              POP      {r2-r6,pc}
;;;105    
                          ENDP

                  |L6.80|
000050  30782578          DCB      "0x%x",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L6.88|
000058  256400            DCB      "%d",0
00005b  00                DCB      0
                  |L6.92|
                          DCD      ||.bss||
                  |L6.96|
000060  0d0a4652          DCB      "\r\nFRAM:BUF:WRITE: ADR : 0x%x LEN:%d \r\n",0
000064  414d3a42
000068  55463a57
00006c  52495445
000070  3a204144
000074  52203a20
000078  30782578
00007c  204c454e
000080  3a256420
000084  0d0a00  
000087  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buf
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  framo
                          DCD      info_fram
                          DCD      0x00000000
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      set_fram
                          DCD      0x00000001
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x28
                          DCD      read_fram
                          DCD      0x00000002
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x44
                          DCD      write_fram
                          DCD      0x00000002
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x6c
                          DCD      fill_buf
                          DCD      0x00000001
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0x98
                          DCD      ||.conststring||+0xa0
                          DCD      disp_buf
                          DCD      0x00000000
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xb4
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  696e666f          DCB      "info",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  00                DCB      0
000009  00                DCB      0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  64697370          DCB      "display FREAM SR ",0
000010  6c617920
000014  46524541
000018  4d205352
00001c  2000    
00001e  00                DCB      0
00001f  00                DCB      0
000020  73657400          DCB      "set",0
000024  737200            DCB      "sr",0
000027  00                DCB      0
000028  73657420          DCB      "set FRAM SR",0
00002c  4652414d
000030  20535200
000034  72656164          DCB      "read",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  61647220          DCB      "adr len",0
000040  6c656e00
000044  72656164          DCB      "read bytes of data fram[adr]",0
000048  20627974
00004c  6573206f
000050  66206461
000054  74612066
000058  72616d5b
00005c  6164725d
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  77726974          DCB      "write",0
000068  6500    
00006a  00                DCB      0
00006b  00                DCB      0
00006c  77726974          DCB      "writebytes of  data to fram[adr]",0
000070  65627974
000074  6573206f
000078  66202064
00007c  61746120
000080  746f2066
000084  72616d5b
000088  6164725d
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
000090  66696c6c          DCB      "fill",0
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
000098  70617474          DCB      "pattern",0
00009c  65726e00
0000a0  66696c6c          DCB      "fill buffer",0
0000a4  20627566
0000a8  66657200
0000ac  64697370          DCB      "disp",0
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
0000b4  64697370          DCB      "display buffer content",0
0000b8  6c617920
0000bc  62756666
0000c0  65722063
0000c4  6f6e7465
0000c8  6e7400  

                          AREA ||.data||, DATA, ALIGN=0

                  ||sr||
000000  00                DCB      0x00
