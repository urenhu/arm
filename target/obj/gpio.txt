; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gpio.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\cmsis -I..\main -I..\usr_lib -I..\ctt -I..\sensor -I..\free_rtos -I..\STM32F10x_StdPeriph -I..\STM32F10x_StdPeriph\inc -IC:\project\diy-project\stm32fxx\stm32_glcd_base\target\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\gpio.crf ..\ctt\gpio.c]
                          THUMB

                          AREA ||i.close_gpio||, CODE, READONLY, ALIGN=1

                  close_gpio PROC
;;;57     
;;;58     static int close_gpio()
000000  2000              MOVS     r0,#0
;;;59     {
;;;60         int ret = CMD_RC_SUCCESS;
;;;61         return ret;
;;;62     }
000002  4770              BX       lr
;;;63     
                          ENDP


                          AREA ||i.dir_gpio||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  dir_gpio PROC
;;;142    
;;;143    static int dir_gpio (const char *portStr,const char *pinStr,const char *dirStr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;144    {
000004  4606              MOV      r6,r0
000006  4615              MOV      r5,r2
;;;145      int ret  = CMD_RC_SUCCESS;
000008  2700              MOVS     r7,#0
;;;146     	int pin = atoi(pinStr);
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       atoi
000010  4604              MOV      r4,r0
;;;147     	GPIO_InitTypeDef GPIO_InitStructure;
;;;148    	
;;;149    	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA
000012  2101              MOVS     r1,#1
000014  201c              MOVS     r0,#0x1c
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;150    	                      | RCC_APB2Periph_GPIOB
;;;151    	                      | RCC_APB2Periph_GPIOC
;;;152    	                      , ENABLE);
;;;153    	
;;;154    	GPIO_InitStructure.GPIO_Pin  = 1 << pin;      // GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
00001a  2001              MOVS     r0,#1
00001c  40a0              LSLS     r0,r0,r4
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;155    	switch (dirStr[0]) {
000022  7828              LDRB     r0,[r5,#0]
000024  2849              CMP      r0,#0x49
000026  d015              BEQ      |L2.84|
000028  284f              CMP      r0,#0x4f
00002a  d001              BEQ      |L2.48|
00002c  2869              CMP      r0,#0x69
00002e  d011              BEQ      |L2.84|
                  |L2.48|
;;;156    	case 'i':
;;;157    	case 'I':
;;;158      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU ; 	
;;;159        break;		
;;;160      case 'o':
;;;161    	case 'O':
;;;162    	default:	
;;;163      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 	
000030  f05f0010          MOVS.W   r0,#0x10
                  |L2.52|
000034  f88d0007          STRB     r0,[sp,#7]            ;158
;;;164        break; 	
;;;165      }
;;;166    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 
000038  2003              MOVS     r0,#3
00003a  f88d0006          STRB     r0,[sp,#6]
;;;167    
;;;168     	switch (portStr[0]) {
00003e  7830              LDRB     r0,[r6,#0]
000040  2861              CMP      r0,#0x61
000042  d00e              BEQ      |L2.98|
000044  dc08              BGT      |L2.88|
000046  2841              CMP      r0,#0x41
000048  d00b              BEQ      |L2.98|
00004a  2842              CMP      r0,#0x42
00004c  d00c              BEQ      |L2.104|
00004e  2843              CMP      r0,#0x43
000050  d10e              BNE      |L2.112|
000052  e019              B        |L2.136|
                  |L2.84|
000054  2048              MOVS     r0,#0x48              ;158
000056  e7ed              B        |L2.52|
                  |L2.88|
000058  2862              CMP      r0,#0x62
00005a  d005              BEQ      |L2.104|
00005c  2863              CMP      r0,#0x63
00005e  d107              BNE      |L2.112|
000060  e012              B        |L2.136|
                  |L2.98|
;;;169      case 'a':
;;;170      case 'A':
;;;171    	  GPIO_Init(GPIOA, &GPIO_InitStructure);        // 
000062  a901              ADD      r1,sp,#4
000064  480a              LDR      r0,|L2.144|
;;;172    		break;
000066  e001              B        |L2.108|
                  |L2.104|
;;;173      case 'b':
;;;174      case 'B':
;;;175    	  GPIO_Init(GPIOB, &GPIO_InitStructure);        // 
000068  a901              ADD      r1,sp,#4
00006a  480a              LDR      r0,|L2.148|
                  |L2.108|
00006c  f7fffffe          BL       GPIO_Init
                  |L2.112|
;;;176    		break;
;;;177      case 'c':
;;;178      case 'C':
;;;179    	  GPIO_Init(GPIOC, &GPIO_InitStructure);        // 
;;;180    		break;
;;;181      default:
;;;182    		  break;
;;;183      }
;;;184    	printf ("\r\n[%s][pin:%d][%s][%08x]\r\n", portStr,pin,dirStr,GPIO_InitStructure.GPIO_Pin);
000070  f8bd0004          LDRH     r0,[sp,#4]
000074  9000              STR      r0,[sp,#0]
000076  462b              MOV      r3,r5
000078  4622              MOV      r2,r4
00007a  4631              MOV      r1,r6
00007c  a006              ADR      r0,|L2.152|
00007e  f7fffffe          BL       __2printf
;;;185      return ret;
000082  4638              MOV      r0,r7
;;;186    }
000084  e8bd81fc          POP      {r2-r8,pc}
                  |L2.136|
000088  a901              ADD      r1,sp,#4              ;179
00008a  480a              LDR      r0,|L2.180|
00008c  e7ee              B        |L2.108|
;;;187    
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      0x40010800
                  |L2.148|
                          DCD      0x40010c00
                  |L2.152|
000098  0d0a5b25          DCB      "\r\n[%s][pin:%d][%s][%08x]\r\n",0
00009c  735d5b70
0000a0  696e3a25
0000a4  645d5b25
0000a8  735d5b25
0000ac  3038785d
0000b0  0d0a00  
0000b3  00                DCB      0
                  |L2.180|
                          DCD      0x40011000

                          AREA ||i.get_gpio||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  get_gpio PROC
;;;187    
;;;188    static int get_gpio (const char *portStr,const char *pinStr)
000000  b570              PUSH     {r4-r6,lr}
;;;189    {
000002  4605              MOV      r5,r0
;;;190      int ret  = CMD_RC_SUCCESS;
000004  2600              MOVS     r6,#0
;;;191     	//int port = atoi(portStr);
;;;192     	int pin = atoi(pinStr);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       atoi
00000c  4604              MOV      r4,r0
;;;193    	int value = 0;
;;;194    
;;;195     	switch (portStr[0]) {
00000e  7829              LDRB     r1,[r5,#0]
000010  2300              MOVS     r3,#0                 ;193
;;;196      case 'a':
;;;197      case 'A':
;;;198    	  value = GPIO_ReadInputDataBit(GPIOA,1<<pin);
000012  2001              MOVS     r0,#1
000014  2961              CMP      r1,#0x61              ;195
000016  d00c              BEQ      |L3.50|
000018  dc06              BGT      |L3.40|
00001a  2941              CMP      r1,#0x41              ;195
00001c  d009              BEQ      |L3.50|
00001e  2942              CMP      r1,#0x42              ;195
000020  d00b              BEQ      |L3.58|
000022  2943              CMP      r1,#0x43              ;195
000024  d10f              BNE      |L3.70|
000026  e015              B        |L3.84|
                  |L3.40|
000028  2962              CMP      r1,#0x62              ;195
00002a  d006              BEQ      |L3.58|
00002c  2963              CMP      r1,#0x63              ;195
00002e  d10a              BNE      |L3.70|
000030  e010              B        |L3.84|
                  |L3.50|
000032  40a0              LSLS     r0,r0,r4
000034  b281              UXTH     r1,r0
000036  4809              LDR      r0,|L3.92|
;;;199    	  break; 
000038  e002              B        |L3.64|
                  |L3.58|
;;;200      case 'b':
;;;201      case 'B':
;;;202    	  value = GPIO_ReadInputDataBit(GPIOB,1<<pin);
00003a  40a0              LSLS     r0,r0,r4
00003c  b281              UXTH     r1,r0
00003e  4808              LDR      r0,|L3.96|
                  |L3.64|
000040  f7fffffe          BL       GPIO_ReadInputDataBit
000044  4603              MOV      r3,r0                 ;198
                  |L3.70|
;;;203    	  break; 
;;;204      case 'c':
;;;205      case 'C':
;;;206    	  value = GPIO_ReadInputDataBit(GPIOC,1<<pin);
;;;207    	  break; 
;;;208      default:
;;;209        break;
;;;210      }	
;;;211    	printf ("\r\n[%s][pin:%d][%d]\r\n", portStr, pin,value);
000046  4622              MOV      r2,r4
000048  4629              MOV      r1,r5
00004a  a006              ADR      r0,|L3.100|
00004c  f7fffffe          BL       __2printf
;;;212    
;;;213      return ret;
000050  4630              MOV      r0,r6
;;;214    }
000052  bd70              POP      {r4-r6,pc}
                  |L3.84|
000054  40a0              LSLS     r0,r0,r4              ;206
000056  b281              UXTH     r1,r0                 ;206
000058  4808              LDR      r0,|L3.124|
00005a  e7f1              B        |L3.64|
;;;215    
                          ENDP

                  |L3.92|
                          DCD      0x40010800
                  |L3.96|
                          DCD      0x40010c00
                  |L3.100|
000064  0d0a5b25          DCB      "\r\n[%s][pin:%d][%d]\r\n",0
000068  735d5b70
00006c  696e3a25
000070  645d5b25
000074  645d0d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L3.124|
                          DCD      0x40011000

                          AREA ||i.loop_gpio||, CODE, READONLY, ALIGN=2

                  loop_gpio PROC
;;;263    
;;;264    static int loop_gpio (const char *portStr,const char *pinStr,const char *dlyStr,const char *numStr)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;265    {
000004  4607              MOV      r7,r0
000006  461c              MOV      r4,r3
000008  4615              MOV      r5,r2
;;;266      int ret  = CMD_RC_SUCCESS;
00000a  f04f0a00          MOV      r10,#0
;;;267     	int pin = atoi(pinStr);
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       atoi
000014  4680              MOV      r8,r0
;;;268    	int dly = atoi(dlyStr);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       atoi
00001c  4605              MOV      r5,r0
;;;269    	int num = atoi(numStr);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       atoi
000024  4606              MOV      r6,r0
;;;270    	int k = 0;
000026  2400              MOVS     r4,#0
;;;271    	
;;;272    	for (k=0; k<num; k++) {
;;;273    		switch (portStr[0]) {
;;;274    		case 'a':
;;;275    		case 'A':
;;;276    			GPIO_ResetBits(GPIOA,1<<pin);
000028  f8dfb0a0          LDR      r11,|L4.204|
00002c  f04f0901          MOV      r9,#1
000030  e041              B        |L4.182|
                  |L4.50|
000032  7838              LDRB     r0,[r7,#0]            ;273
000034  2861              CMP      r0,#0x61              ;273
000036  d00c              BEQ      |L4.82|
000038  dc06              BGT      |L4.72|
00003a  2841              CMP      r0,#0x41              ;273
00003c  d009              BEQ      |L4.82|
00003e  2842              CMP      r0,#0x42              ;273
000040  d00c              BEQ      |L4.92|
000042  2843              CMP      r0,#0x43              ;273
000044  d110              BNE      |L4.104|
000046  e01d              B        |L4.132|
                  |L4.72|
000048  2862              CMP      r0,#0x62              ;273
00004a  d007              BEQ      |L4.92|
00004c  2863              CMP      r0,#0x63              ;273
00004e  d10b              BNE      |L4.104|
000050  e018              B        |L4.132|
                  |L4.82|
000052  fa09f008          LSL      r0,r9,r8
000056  b281              UXTH     r1,r0
000058  4658              MOV      r0,r11
;;;277    			break; 
00005a  e003              B        |L4.100|
                  |L4.92|
;;;278    		case 'b':
;;;279    		case 'B':
;;;280    			GPIO_ResetBits(GPIOB,1<<pin);
00005c  fa09f008          LSL      r0,r9,r8
000060  b281              UXTH     r1,r0
000062  481b              LDR      r0,|L4.208|
                  |L4.100|
000064  f7fffffe          BL       GPIO_ResetBits
                  |L4.104|
;;;281    			break; 
;;;282    		case 'c':
;;;283    		case 'C':
;;;284    			GPIO_ResetBits(GPIOC,1<<pin);
;;;285    			break; 
;;;286    		default:
;;;287    			break;
;;;288    		}	
;;;289        delay_ms (dly);	 
000068  b2a8              UXTH     r0,r5
00006a  f7fffffe          BL       delay_ms
;;;290    		switch (portStr[0]) {
00006e  7838              LDRB     r0,[r7,#0]
000070  2861              CMP      r0,#0x61
000072  d011              BEQ      |L4.152|
000074  dc0b              BGT      |L4.142|
000076  2841              CMP      r0,#0x41
000078  d00e              BEQ      |L4.152|
00007a  2842              CMP      r0,#0x42
00007c  d011              BEQ      |L4.162|
00007e  2843              CMP      r0,#0x43
000080  d115              BNE      |L4.174|
000082  e01d              B        |L4.192|
                  |L4.132|
000084  fa09f008          LSL      r0,r9,r8              ;284
000088  b281              UXTH     r1,r0                 ;284
00008a  4812              LDR      r0,|L4.212|
00008c  e7ea              B        |L4.100|
                  |L4.142|
00008e  2862              CMP      r0,#0x62
000090  d007              BEQ      |L4.162|
000092  2863              CMP      r0,#0x63
000094  d10b              BNE      |L4.174|
000096  e013              B        |L4.192|
                  |L4.152|
;;;291    		case 'a':
;;;292    		case 'A':
;;;293    			GPIO_SetBits(GPIOA,1<<pin);
000098  fa09f008          LSL      r0,r9,r8
00009c  b281              UXTH     r1,r0
00009e  4658              MOV      r0,r11
;;;294    			break; 
0000a0  e003              B        |L4.170|
                  |L4.162|
;;;295    		case 'b':
;;;296    		case 'B':
;;;297    			GPIO_SetBits(GPIOB,1<<pin);
0000a2  fa09f108          LSL      r1,r9,r8
0000a6  b289              UXTH     r1,r1
0000a8  4809              LDR      r0,|L4.208|
                  |L4.170|
0000aa  f7fffffe          BL       GPIO_SetBits
                  |L4.174|
;;;298    			break; 
;;;299    		case 'c':
;;;300    		case 'C':
;;;301    			GPIO_SetBits(GPIOC,1<<pin);
;;;302    			break; 
;;;303    		default:
;;;304    			break;
;;;305    		}	
;;;306        delay_ms (dly);	 
0000ae  b2a8              UXTH     r0,r5
0000b0  f7fffffe          BL       delay_ms
0000b4  1c64              ADDS     r4,r4,#1
                  |L4.182|
0000b6  42b4              CMP      r4,r6                 ;272
0000b8  dbbb              BLT      |L4.50|
;;;307    	}
;;;308    	
;;;309    	return ret;
0000ba  4650              MOV      r0,r10
;;;310    }
0000bc  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.192|
0000c0  fa09f008          LSL      r0,r9,r8              ;301
0000c4  b281              UXTH     r1,r0                 ;301
0000c6  4803              LDR      r0,|L4.212|
0000c8  e7ef              B        |L4.170|
;;;311    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L4.204|
                          DCD      0x40010800
                  |L4.208|
                          DCD      0x40010c00
                  |L4.212|
                          DCD      0x40011000

                          AREA ||i.open_gpio||, CODE, READONLY, ALIGN=1

                  open_gpio PROC
;;;51     *****************************************************************************/
;;;52     static int open_gpio()
000000  2000              MOVS     r0,#0
;;;53     {
;;;54         int ret = CMD_RC_SUCCESS;
;;;55         return ret;
;;;56     }
000002  4770              BX       lr
;;;57     
                          ENDP


                          AREA ||i.read_gpio||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  read_gpio PROC
;;;104    
;;;105    static int read_gpio(const char *portStr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;106    {
;;;107      int ret = CMD_RC_SUCCESS;
000004  2600              MOVS     r6,#0
;;;108     	u16   adcx;
;;;109    	float temp;
;;;110    	float temperate;
;;;111    	u16   voltageR =0;
;;;112    	float voltageF =0;
;;;113    
;;;114    	printf ("\r\n");
000006  a021              ADR      r0,|L6.140|
000008  f7fffffe          BL       __2printf
;;;115    	adcx = usrtadc_gettm(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       usrtadc_gettm
;;;116    	temp = (float)adcx*(3.3/4096);
000012  f7fffffe          BL       __aeabi_ui2d
000016  f04f3266          MOV      r2,#0x66666666
00001a  4b1d              LDR      r3,|L6.144|
00001c  f7fffffe          BL       __aeabi_dmul
000020  f7fffffe          BL       __aeabi_d2f
;;;117    	temperate = temp;
;;;118    	temperate=(1.43-temperate)/0.0043+25;		//????????	 
000024  f7fffffe          BL       __aeabi_f2d
000028  4a1a              LDR      r2,|L6.148|
00002a  4b1b              LDR      r3,|L6.152|
00002c  f7fffffe          BL       __aeabi_drsub
000030  4a1a              LDR      r2,|L6.156|
000032  4b1b              LDR      r3,|L6.160|
000034  f7fffffe          BL       __aeabi_ddiv
000038  2200              MOVS     r2,#0
00003a  4b1a              LDR      r3,|L6.164|
00003c  f7fffffe          BL       __aeabi_dadd
000040  f7fffffe          BL       __aeabi_d2f
000044  4607              MOV      r7,r0
;;;119    			
;;;120    	voltageR = usradc_getav(ADC_Channel_1, 10 );
000046  210a              MOVS     r1,#0xa
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       usradc_getav
00004e  4604              MOV      r4,r0
;;;121    	voltageF = voltageR * 3.3F / 4096.0F;
000050  f7fffffe          BL       __aeabi_ui2f
000054  4914              LDR      r1,|L6.168|
000056  f7fffffe          BL       __aeabi_fmul
00005a  f06f010b          MVN      r1,#0xb
00005e  f7fffffe          BL       __ARM_scalbnf
000062  4605              MOV      r5,r0
;;;122    
;;;123    	printf ("TADC: [T:%f]\r\n", temperate);
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       __aeabi_f2d
00006a  4602              MOV      r2,r0
00006c  460b              MOV      r3,r1
00006e  a00f              ADR      r0,|L6.172|
000070  f7fffffe          BL       __2printf
;;;124    	printf ("ADC   [R:%d][A:%f]\r\n", voltageR, voltageF);
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       __aeabi_f2d
00007a  4602              MOV      r2,r0
00007c  460b              MOV      r3,r1
00007e  4621              MOV      r1,r4
000080  a00e              ADR      r0,|L6.188|
000082  f7fffffe          BL       __2printf
;;;125    			
;;;126      return ret;
000086  4630              MOV      r0,r6
;;;127    }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;128    
                          ENDP

                  |L6.140|
00008c  0d0a00            DCB      "\r\n",0
00008f  00                DCB      0
                  |L6.144|
                          DCD      0x3f4a6666
                  |L6.148|
                          DCD      0xae147ae1
                  |L6.152|
                          DCD      0x3ff6e147
                  |L6.156|
                          DCD      0x75f6fd22
                  |L6.160|
                          DCD      0x3f719ce0
                  |L6.164|
                          DCD      0x40390000
                  |L6.168|
                          DCD      0x40533333
                  |L6.172|
0000ac  54414443          DCB      "TADC: [T:%f]\r\n",0
0000b0  3a205b54
0000b4  3a25665d
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L6.188|
0000bc  41444320          DCB      "ADC   [R:%d][A:%f]\r\n",0
0000c0  20205b52
0000c4  3a25645d
0000c8  5b413a25
0000cc  665d0d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.read_rtc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  read_rtc PROC
;;;63     
;;;64     static int read_rtc()
000000  b57f              PUSH     {r0-r6,lr}
;;;65     {
;;;66       int ret = CMD_RC_SUCCESS;
;;;67       
;;;68     	printf ("[%d:%d:%d][%d-%d-%d][W:%d]\t\n",
000002  4908              LDR      r1,|L7.36|
000004  2400              MOVS     r4,#0                 ;66
000006  7a0d              LDRB     r5,[r1,#8]  ; calendar
000008  79cb              LDRB     r3,[r1,#7]  ; calendar
00000a  798a              LDRB     r2,[r1,#6]  ; calendar
00000c  8888              LDRH     r0,[r1,#4]  ; calendar
00000e  e88d002d          STM      sp,{r0,r2,r3,r5}
000012  788b              LDRB     r3,[r1,#2]  ; calendar
000014  784a              LDRB     r2,[r1,#1]  ; calendar
000016  7809              LDRB     r1,[r1,#0]  ; calendar
000018  a003              ADR      r0,|L7.40|
00001a  f7fffffe          BL       __2printf
;;;69     	calendar.hour,
;;;70     	calendar.min,
;;;71     	calendar.sec,			
;;;72     	calendar.w_year,
;;;73     	calendar.w_month,
;;;74     	calendar.w_date,
;;;75     	calendar.week );		     
;;;76     	
;;;77     	return ret;
;;;78     }
00001e  b004              ADD      sp,sp,#0x10
000020  4620              MOV      r0,r4                 ;77
000022  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP

                  |L7.36|
                          DCD      calendar
                  |L7.40|
000028  5b25643a          DCB      "[%d:%d:%d][%d-%d-%d][W:%d]\t\n",0
00002c  25643a25
000030  645d5b25
000034  642d2564
000038  2d25645d
00003c  5b573a25
000040  645d090a
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.reset_gpio||, CODE, READONLY, ALIGN=2

                  reset_gpio PROC
;;;239    
;;;240    static int reset_gpio (const char *portStr,const char *pinStr)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4605              MOV      r5,r0
;;;242      int ret  = CMD_RC_SUCCESS;
000004  2400              MOVS     r4,#0
;;;243     	int pin = atoi(pinStr);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       atoi
;;;244    	
;;;245     	switch (portStr[0]) {
00000c  782a              LDRB     r2,[r5,#0]
;;;246      case 'a':
;;;247      case 'A':
;;;248    		GPIO_ResetBits(GPIOA,1<<pin);
00000e  2101              MOVS     r1,#1
000010  2a61              CMP      r2,#0x61              ;245
000012  d00c              BEQ      |L8.46|
000014  dc06              BGT      |L8.36|
000016  2a41              CMP      r2,#0x41              ;245
000018  d009              BEQ      |L8.46|
00001a  2a42              CMP      r2,#0x42              ;245
00001c  d00b              BEQ      |L8.54|
00001e  2a43              CMP      r2,#0x43              ;245
000020  d10e              BNE      |L8.64|
000022  e00f              B        |L8.68|
                  |L8.36|
000024  2a62              CMP      r2,#0x62              ;245
000026  d006              BEQ      |L8.54|
000028  2a63              CMP      r2,#0x63              ;245
00002a  d109              BNE      |L8.64|
00002c  e00a              B        |L8.68|
                  |L8.46|
00002e  4081              LSLS     r1,r1,r0
000030  b289              UXTH     r1,r1
000032  4806              LDR      r0,|L8.76|
;;;249    	  break; 
000034  e002              B        |L8.60|
                  |L8.54|
;;;250      case 'b':
;;;251      case 'B':
;;;252    		GPIO_ResetBits(GPIOB,1<<pin);
000036  4081              LSLS     r1,r1,r0
000038  b289              UXTH     r1,r1
00003a  4805              LDR      r0,|L8.80|
                  |L8.60|
00003c  f7fffffe          BL       GPIO_ResetBits
                  |L8.64|
;;;253    	  break; 
;;;254      case 'c':
;;;255      case 'C':
;;;256    		GPIO_ResetBits(GPIOC,1<<pin);
;;;257    	  break; 
;;;258      default:
;;;259        break;
;;;260      }	
;;;261      return ret;
000040  4620              MOV      r0,r4
;;;262    }
000042  bd70              POP      {r4-r6,pc}
                  |L8.68|
000044  4081              LSLS     r1,r1,r0              ;256
000046  b289              UXTH     r1,r1                 ;256
000048  4802              LDR      r0,|L8.84|
00004a  e7f7              B        |L8.60|
;;;263    
                          ENDP

                  |L8.76|
                          DCD      0x40010800
                  |L8.80|
                          DCD      0x40010c00
                  |L8.84|
                          DCD      0x40011000

                          AREA ||i.set_gpio||, CODE, READONLY, ALIGN=2

                  set_gpio PROC
;;;215    
;;;216    static int set_gpio (const char *portStr,const char *pinStr)
000000  b570              PUSH     {r4-r6,lr}
;;;217    {
000002  4605              MOV      r5,r0
;;;218      int ret  = CMD_RC_SUCCESS;
000004  2400              MOVS     r4,#0
;;;219     	int pin = atoi(pinStr);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       atoi
;;;220    	
;;;221     	switch (portStr[0]) {
00000c  782a              LDRB     r2,[r5,#0]
;;;222      case 'a':
;;;223      case 'A':
;;;224    		GPIO_SetBits(GPIOA,1<<pin);
00000e  2101              MOVS     r1,#1
000010  2a61              CMP      r2,#0x61              ;221
000012  d00c              BEQ      |L9.46|
000014  dc06              BGT      |L9.36|
000016  2a41              CMP      r2,#0x41              ;221
000018  d009              BEQ      |L9.46|
00001a  2a42              CMP      r2,#0x42              ;221
00001c  d00b              BEQ      |L9.54|
00001e  2a43              CMP      r2,#0x43              ;221
000020  d10e              BNE      |L9.64|
000022  e00f              B        |L9.68|
                  |L9.36|
000024  2a62              CMP      r2,#0x62              ;221
000026  d006              BEQ      |L9.54|
000028  2a63              CMP      r2,#0x63              ;221
00002a  d109              BNE      |L9.64|
00002c  e00a              B        |L9.68|
                  |L9.46|
00002e  4081              LSLS     r1,r1,r0
000030  b289              UXTH     r1,r1
000032  4806              LDR      r0,|L9.76|
;;;225    	  break; 
000034  e002              B        |L9.60|
                  |L9.54|
;;;226      case 'b':
;;;227      case 'B':
;;;228    		GPIO_SetBits(GPIOB,1<<pin);
000036  4081              LSLS     r1,r1,r0
000038  b289              UXTH     r1,r1
00003a  4805              LDR      r0,|L9.80|
                  |L9.60|
00003c  f7fffffe          BL       GPIO_SetBits
                  |L9.64|
;;;229    	  break; 
;;;230      case 'c':
;;;231      case 'C':
;;;232    		GPIO_SetBits(GPIOC,1<<pin);
;;;233    	  break; 
;;;234      default:
;;;235        break;
;;;236      }	
;;;237      return ret;
000040  4620              MOV      r0,r4
;;;238    }
000042  bd70              POP      {r4-r6,pc}
                  |L9.68|
000044  4081              LSLS     r1,r1,r0              ;232
000046  b289              UXTH     r1,r1                 ;232
000048  4802              LDR      r0,|L9.84|
00004a  e7f7              B        |L9.60|
;;;239    
                          ENDP

                  |L9.76|
                          DCD      0x40010800
                  |L9.80|
                          DCD      0x40010c00
                  |L9.84|
                          DCD      0x40011000

                          AREA ||i.write_gpio||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  write_gpio PROC
;;;128    
;;;129    static int write_gpio(const char *portStr)
000000  b538              PUSH     {r3-r5,lr}
;;;130    {
;;;131      int ret = CMD_RC_SUCCESS;
;;;132     	int led0pwmval = 0;
000002  2400              MOVS     r4,#0
;;;133    	
;;;134    	sscanf(portStr, "%d", &led0pwmval);
000004  466a              MOV      r2,sp
000006  a107              ADR      r1,|L10.36|
000008  9400              STR      r4,[sp,#0]
00000a  f7fffffe          BL       __0sscanf
;;;135    	
;;;136    	TIM_SetCompare2(TIM3, (u16)led0pwmval);		   
00000e  9800              LDR      r0,[sp,#0]
000010  b281              UXTH     r1,r0
000012  4805              LDR      r0,|L10.40|
000014  f7fffffe          BL       TIM_SetCompare2
;;;137      
;;;138    	printf ("PWM  [%d]\r\n", led0pwmval);
000018  a004              ADR      r0,|L10.44|
00001a  9900              LDR      r1,[sp,#0]
00001c  f7fffffe          BL       __2printf
;;;139    			
;;;140      return ret;
000020  4620              MOV      r0,r4
;;;141    }
000022  bd38              POP      {r3-r5,pc}
;;;142    
                          ENDP

                  |L10.36|
000024  256400            DCB      "%d",0
000027  00                DCB      0
                  |L10.40|
                          DCD      0x40000400
                  |L10.44|
00002c  50574d20          DCB      "PWM  [%d]\r\n",0
000030  205b2564
000034  5d0d0a00

                          AREA ||i.write_rtc||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  write_rtc PROC
;;;79     
;;;80     static int write_rtc(const char *ys,const char *mons,const char *ds,const char *hs,const char *ms,const char *ss)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;81     {
000004  b089              SUB      sp,sp,#0x24
000006  4690              MOV      r8,r2
000008  e9dd5610          LDRD     r5,r6,[sp,#0x40]
00000c  4689              MOV      r9,r1
00000e  461f              MOV      r7,r3
;;;82       int ret = CMD_RC_SUCCESS;
000010  2400              MOVS     r4,#0
;;;83       u16 syear ;
;;;84     	u8 smon;
;;;85     	u8 sday;
;;;86     	u8 hour;
;;;87     	u8 min;
;;;88     	u8 sec;
;;;89     	
;;;90     	sscanf(ys, "%d", (int *)&syear );
000012  aa03              ADD      r2,sp,#0xc
000014  a120              ADR      r1,|L11.152|
000016  f7fffffe          BL       __0sscanf
;;;91     	sscanf(mons, "%d",(int *) &smon );
00001a  aa04              ADD      r2,sp,#0x10
00001c  a11e              ADR      r1,|L11.152|
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       __0sscanf
;;;92     	sscanf(ds, "%d", (int *)&sday );
000024  aa05              ADD      r2,sp,#0x14
000026  a11c              ADR      r1,|L11.152|
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       __0sscanf
;;;93     	sscanf(hs, "%d", (int *)&hour );
00002e  aa06              ADD      r2,sp,#0x18
000030  a119              ADR      r1,|L11.152|
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       __0sscanf
;;;94     	sscanf(ms, "%d", (int *)&min );
000038  aa07              ADD      r2,sp,#0x1c
00003a  a117              ADR      r1,|L11.152|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       __0sscanf
;;;95     	sscanf(ss, "%d", (int *)&sec );
000042  aa08              ADD      r2,sp,#0x20
000044  a114              ADR      r1,|L11.152|
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       __0sscanf
;;;96     
;;;97       usrrtc_set( syear, smon, sday, hour, min, sec);
00004c  f89d1020          LDRB     r1,[sp,#0x20]
000050  f89d001c          LDRB     r0,[sp,#0x1c]
000054  e9cd0100          STRD     r0,r1,[sp,#0]
000058  f89d3018          LDRB     r3,[sp,#0x18]
00005c  f89d2014          LDRB     r2,[sp,#0x14]
000060  f89d1010          LDRB     r1,[sp,#0x10]
000064  f8bd000c          LDRH     r0,[sp,#0xc]
000068  f7fffffe          BL       usrrtc_set
;;;98       printf ("RTC[Y:%d][M:%d][M:%d][D:%d][h:%d][m:%d][s:%d]\r\n", 
00006c  f89d0018          LDRB     r0,[sp,#0x18]
000070  f89d2020          LDRB     r2,[sp,#0x20]
000074  f89d101c          LDRB     r1,[sp,#0x1c]
000078  e88d0007          STM      sp,{r0-r2}
00007c  f89d3014          LDRB     r3,[sp,#0x14]
000080  f89d2010          LDRB     r2,[sp,#0x10]
000084  f8bd100c          LDRH     r1,[sp,#0xc]
000088  a004              ADR      r0,|L11.156|
00008a  f7fffffe          BL       __2printf
;;;99     	 syear ,smon, sday,	 hour,	 min,	 sec);
;;;100    	
;;;101      return ret;
;;;102    }
00008e  b009              ADD      sp,sp,#0x24
000090  4620              MOV      r0,r4                 ;101
000092  e8bd83f0          POP      {r4-r9,pc}
;;;103    
                          ENDP

000096  0000              DCW      0x0000
                  |L11.152|
000098  256400            DCB      "%d",0
00009b  00                DCB      0
                  |L11.156|
00009c  5254435b          DCB      "RTC[Y:%d][M:%d][M:%d][D:%d][h:%d][m:%d][s:%d]\r\n",0
0000a0  593a2564
0000a4  5d5b4d3a
0000a8  25645d5b
0000ac  4d3a2564
0000b0  5d5b443a
0000b4  25645d5b
0000b8  683a2564
0000bc  5d5b6d3a
0000c0  25645d5b
0000c4  733a2564
0000c8  5d0d0a00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  gpio
                          DCD      open_gpio
                          DCD      0x00000000
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      dir_gpio
                          DCD      0x00000003
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x34
                          DCD      set_gpio
                          DCD      0x00000002
                          DCD      ||.conststring||+0x48
                          DCD      ||.conststring||+0x4c
                          DCD      ||.conststring||+0x58
                          DCD      reset_gpio
                          DCD      0x00000002
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x4c
                          DCD      ||.conststring||+0x6c
                          DCD      get_gpio
                          DCD      0x00000002
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x4c
                          DCD      ||.conststring||+0x7c
                          DCD      read_gpio
                          DCD      0x00000001
                          DCD      ||.conststring||+0x88
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0x94
                          DCD      write_gpio
                          DCD      0x00000001
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0xb0
                          DCD      loop_gpio
                          DCD      0x00000004
                          DCD      ||.conststring||+0xc4
                          DCD      ||.conststring||+0xcc
                          DCD      ||.conststring||+0x8
                          DCD      read_rtc
                          DCD      0x00000000
                          DCD      ||.conststring||+0xe0
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xe4
                          DCD      write_rtc
                          DCD      0x00000006
                          DCD      ||.conststring||+0xf0
                          DCD      ||.conststring||+0xf8
                          DCD      ||.conststring||+0xe4
                          DCD      close_gpio
                          DCD      0x00000000
                          DCD      ||.conststring||+0x108
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x110
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6f70656e          DCB      "open",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  00                DCB      0
000009  00                DCB      0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  6f70656e          DCB      "open device driver.",0
000010  20646576
000014  69636520
000018  64726976
00001c  65722e00
000020  64697200          DCB      "dir",0
000024  706f7274          DCB      "port pin dir",0
000028  2070696e
00002c  20646972
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
000034  73657420          DCB      "set gpio direction",0
000038  6770696f
00003c  20646972
000040  65637469
000044  6f6e00  
000047  00                DCB      0
000048  73657400          DCB      "set",0
00004c  706f7274          DCB      "port pin",0
000050  2070696e
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
000058  73657420          DCB      "set gpio ",0
00005c  6770696f
000060  2000    
000062  00                DCB      0
000063  00                DCB      0
000064  72657365          DCB      "reset",0
000068  7400    
00006a  00                DCB      0
00006b  00                DCB      0
00006c  72657365          DCB      "reset gpio ",0
000070  74206770
000074  696f2000
000078  67657400          DCB      "get",0
00007c  67657420          DCB      "get gpio",0
000080  6770696f
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
000088  72656164          DCB      "read",0
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
000090  747c6100          DCB      "t|a",0
000094  72656164          DCB      "read adc channel ",0
000098  20616463
00009c  20636861
0000a0  6e6e656c
0000a4  2000    
0000a6  00                DCB      0
0000a7  00                DCB      0
0000a8  77726974          DCB      "write",0
0000ac  6500    
0000ae  00                DCB      0
0000af  00                DCB      0
0000b0  77726974          DCB      "write pwm channel ",0
0000b4  65207077
0000b8  6d206368
0000bc  616e6e65
0000c0  6c2000  
0000c3  00                DCB      0
0000c4  6c6f6f70          DCB      "loop",0
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  706f7274          DCB      "port pin dely num",0
0000d0  2070696e
0000d4  2064656c
0000d8  79206e75
0000dc  6d00    
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  72746300          DCB      "rtc",0
0000e4  72656164          DCB      "read rtc ",0
0000e8  20727463
0000ec  2000    
0000ee  00                DCB      0
0000ef  00                DCB      0
0000f0  72746373          DCB      "rtcset",0
0000f4  657400  
0000f7  00                DCB      0
0000f8  79206d20          DCB      "y m d h m s ",0
0000fc  64206820
000100  6d207320
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
000108  636c6f73          DCB      "close",0
00010c  6500    
00010e  00                DCB      0
00010f  00                DCB      0
000110  636c6f73          DCB      "close device driver.",0
000114  65206465
000118  76696365
00011c  20647269
000120  7665722e
000124  00      
