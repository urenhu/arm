L 1 "..\free_rtos\timers.c"
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
Nall the API functions to use the MPU wrappers.  That should only be done when
Ntask.h is included from an application file. */
N#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
N
N#include "FreeRTOS.h"
L 1 "..\free_rtos\FreeRTOS.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef INC_FREERTOS_H
N#define INC_FREERTOS_H
N
N
N/*
N * Include the generic headers required for the FreeRTOS port being used.
N */
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 83 "..\free_rtos\FreeRTOS.h" 2
N
N/* Basic FreeRTOS definitions. */
N#include "projdefs.h"
L 1 "..\free_rtos\projdefs.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef PROJDEFS_H
N#define PROJDEFS_H
N
N/* Defines the prototype to which task functions must conform. */
Ntypedef void (*pdTASK_CODE)( void * );
N
N#define pdTRUE		( 1 )
N#define pdFALSE		( 0 )
N
N#define pdPASS									( 1 )
N#define pdFAIL									( 0 )
N#define errQUEUE_EMPTY							( 0 )
N#define errQUEUE_FULL							( 0 )
N
N/* Error definitions. */
N#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	( -1 )
N#define errNO_TASK_TO_RUN						( -2 )
N#define errQUEUE_BLOCKED						( -4 )
N#define errQUEUE_YIELD							( -5 )
N
N#endif /* PROJDEFS_H */
N
N
N
L 86 "..\free_rtos\FreeRTOS.h" 2
N
N/* Application specific configuration options. */
N#include "FreeRTOSConfig.h"
L 1 "..\free_rtos\FreeRTOSConfig.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef FREERTOS_CONFIG_H
N#define FREERTOS_CONFIG_H
N
N/*-----------------------------------------------------------
N * Application specific definitions.
N *
N * These definitions should be adjusted for your particular hardware and
N * application requirements.
N *
N * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
N * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
N *
N * See http://www.freertos.org/a00110.html.
N *----------------------------------------------------------*/
N
N#define configUSE_PREEMPTION		1
N#define configUSE_IDLE_HOOK			0
N#define configUSE_TICK_HOOK			0
N#define configCPU_CLOCK_HZ			( ( unsigned long ) 72000000 )	
N#define configTICK_RATE_HZ			( ( portTickType ) 1000 )
N#define configMAX_PRIORITIES		( ( unsigned portBASE_TYPE ) 5 )
N#define configMINIMAL_STACK_SIZE	( ( unsigned short ) 128 )
N#define configTOTAL_HEAP_SIZE		( ( size_t ) ( 17 * 1024 ) )
N#define configMAX_TASK_NAME_LEN		( 16 )
N#define configUSE_TRACE_FACILITY	0
N#define configUSE_16_BIT_TICKS		0
N#define configIDLE_SHOULD_YIELD		1
N
N/* Co-routine definitions. */
N#define configUSE_CO_ROUTINES 		0
N#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )
N
N/* Set the following definitions to 1 to include the API function, or zero
Nto exclude the API function. */
N
N#define INCLUDE_vTaskPrioritySet		1
N#define INCLUDE_uxTaskPriorityGet		1
N#define INCLUDE_vTaskDelete				1
N#define INCLUDE_vTaskCleanUpResources	0
N#define INCLUDE_vTaskSuspend			1
N#define INCLUDE_vTaskDelayUntil			1
N#define INCLUDE_vTaskDelay				1
N
N/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
N(lowest) to 0 (1?) (highest). */
N#define configKERNEL_INTERRUPT_PRIORITY 		255
N/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
NSee http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
N#define configMAX_SYSCALL_INTERRUPT_PRIORITY 	191 /* equivalent to 0xb0, or priority 11. */
N
N
N/* This is the value being used as per the ST library which permits 16
Npriority values, 0 to 15.  This must correspond to the
NconfigKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NNVIC value of 255. */
N#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY	15
N
N#endif /* FREERTOS_CONFIG_H */
N
L 89 "..\free_rtos\FreeRTOS.h" 2
N
N/* configUSE_PORT_OPTIMISED_TASK_SELECTION must be defined before portable.h
Nis included as it is used by the port layer. */
N#ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
N	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 0
N#endif
N
N/* Definitions specific to the port being used. */
N#include "portable.h"
L 1 "..\free_rtos\portable.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*-----------------------------------------------------------
N * Portable layer API.  Each function must be defined for each port.
N *----------------------------------------------------------*/
N
N#ifndef PORTABLE_H
N#define PORTABLE_H
N
N/* Include the macro file relevant to the port being used. */
N
N#ifdef OPEN_WATCOM_INDUSTRIAL_PC_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\pc\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef OPEN_WATCOM_FLASH_LITE_186_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\flsh186\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef GCC_MEGA_AVR
S	#include "../portable/GCC/ATMega323/portmacro.h"
N#endif
N
N#ifdef IAR_MEGA_AVR
S	#include "../portable/IAR/ATMega323/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC24_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_DSPIC_PORT
S	#include "..\..\Source\portable\MPLAB\PIC24_dsPIC\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC18F_PORT
S	#include "..\..\Source\portable\MPLAB\PIC18F\portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC32MX_PORT
S	#include "..\..\Source\portable\MPLAB\PIC32MX\portmacro.h"
N#endif
N
N#ifdef _FEDPICC
S	#include "libFreeRTOS/Include/portmacro.h"
N#endif
N
N#ifdef SDCC_CYGNAL
S	#include "../../Source/portable/SDCC/Cygnal/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7
S	#include "../../Source/portable/GCC/ARM7_LPC2000/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7_ECLIPSE
S	#include "portmacro.h"
N#endif
N
N#ifdef ROWLEY_LPC23xx
S	#include "../../Source/portable/GCC/ARM7_LPC23xx/portmacro.h"
N#endif
N
N#ifdef IAR_MSP430
S	#include "..\..\Source\portable\IAR\MSP430\portmacro.h"	
N#endif
N	
N#ifdef GCC_MSP430
S	#include "../../Source/portable/GCC/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ROWLEY_MSP430
S	#include "../../Source/portable/Rowley/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ARM7_LPC21xx_KEIL_RVDS
S	#include "..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.h"
N#endif
N
N#ifdef SAM7_GCC
S	#include "../../Source/portable/GCC/ARM7_AT91SAM7S/portmacro.h"
N#endif
N
N#ifdef SAM7_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM7S64\portmacro.h"
N#endif
N
N#ifdef SAM9XE_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM9XE\portmacro.h"
N#endif
N
N#ifdef LPC2000_IAR
S	#include "..\..\Source\portable\IAR\LPC2000\portmacro.h"
N#endif
N
N#ifdef STR71X_IAR
S	#include "..\..\Source\portable\IAR\STR71x\portmacro.h"
N#endif
N
N#ifdef STR75X_IAR
S	#include "..\..\Source\portable\IAR\STR75x\portmacro.h"
N#endif
N	
N#ifdef STR75X_GCC
S	#include "..\..\Source\portable\GCC\STR75x\portmacro.h"
N#endif
N
N#ifdef STR91X_IAR
S	#include "..\..\Source\portable\IAR\STR91x\portmacro.h"
N#endif
N	
N#ifdef GCC_H8S
S	#include "../../Source/portable/GCC/H8S2329/portmacro.h"
N#endif
N
N#ifdef GCC_AT91FR40008
S	#include "../../Source/portable/GCC/ARM7_AT91FR40008/portmacro.h"
N#endif
N
N#ifdef RVDS_ARMCM3_LM3S102
S	#include "../../Source/portable/RVDS/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3_LM3S102
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARM_CM3
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARMCM3_LM
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N	
N#ifdef HCS12_CODE_WARRIOR
S	#include "../../Source/portable/CodeWarrior/HCS12/portmacro.h"
N#endif	
N
N#ifdef MICROBLAZE_GCC
S	#include "../../Source/portable/GCC/MicroBlaze/portmacro.h"
N#endif
N
N#ifdef TERN_EE
S	#include "..\..\Source\portable\Paradigm\Tern_EE\small\portmacro.h"
N#endif
N
N#ifdef GCC_HCS12
S	#include "../../Source/portable/GCC/HCS12/portmacro.h"
N#endif
N
N#ifdef GCC_MCF5235
S    #include "../../Source/portable/GCC/MCF5235/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_GCC
S	#include "../../../Source/portable/GCC/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_CODEWARRIOR
S	#include "../../Source/portable/CodeWarrior/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef GCC_PPC405
S	#include "../../Source/portable/GCC/PPC405_Xilinx/portmacro.h"
N#endif
N
N#ifdef GCC_PPC440
S	#include "../../Source/portable/GCC/PPC440_Xilinx/portmacro.h"
N#endif
N
N#ifdef _16FX_SOFTUNE
S	#include "..\..\Source\portable\Softune\MB96340\portmacro.h"
N#endif
N
N#ifdef BCC_INDUSTRIAL_PC_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\PC\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef BCC_FLASH_LITE_186_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\flsh186\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef __GNUC__
S   #ifdef __AVR32_AVR32A__
S	   #include "portmacro.h"
S   #endif
N#endif
N
N#ifdef __ICCAVR32__
S   #ifdef __CORE__
S      #if __CORE__ == __AVR32A__
S	      #include "portmacro.h"
S      #endif
S   #endif
N#endif
N
N#ifdef __91467D
S	#include "portmacro.h"
N#endif
N
N#ifdef __96340
S	#include "portmacro.h"
N#endif
N
N
N#ifdef __IAR_V850ES_Fx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3_L__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Hx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_78K0R_Kx3__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N#ifdef __IAR_78K0R_Kx3L__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N	
N/* Catch all to ensure portmacro.h is included in the build.  Newer demos
Nhave the path as part of the project options, rather than as relative from
Nthe project location.  If portENTER_CRITICAL() has not been defined then
Nportmacro.h has not yet been included - as every portmacro.h provides a
NportENTER_CRITICAL() definition.  Check the demo application for your demo
Nto find the path to the correct portmacro.h file. */
N#ifndef portENTER_CRITICAL
N	#include "portmacro.h"	
L 1 "..\free_rtos\portmacro.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef PORTMACRO_H
N#define PORTMACRO_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * Port specific definitions.
N *
N * The settings in this file configure FreeRTOS correctly for the
N * given hardware and compiler.
N *
N * These settings should not be altered.
N *-----------------------------------------------------------
N */
N
N/* Type definitions. */
N#define portCHAR		     char
N#define portFLOAT		     float
N#define portDOUBLE		   double
N#define portLONG         long
N#define portSHORT	       short
N#define portSTACK_TYPE	 unsigned portLONG
N#define portBASE_TYPE	   long
N
N#if( configUSE_16_BIT_TICKS == 1 )
X#if( 0 == 1 )
S	typedef unsigned portSHORT                portTickType;
S	#define portMAX_DELAY ( portTickType )    0xffff
N#else
N	typedef unsigned portLONG                 portTickType;
X	typedef unsigned long                 portTickType;
N	#define portMAX_DELAY ( portTickType )    0xffffffff
N#endif
N/*-----------------------------------------------------------*/
N/* Architecture specifics. */
N#define portSTACK_GROWTH			  ( -1 )
N#define portTICK_RATE_MS			  ( ( portTickType ) 1000 / configTICK_RATE_HZ )
N#define portBYTE_ALIGNMENT			 8
N/*-----------------------------------------------------------*/
N/* Scheduler utilities. */
Nextern void                        vPortYield( void );
N#define portNVIC_INT_CTRL_REG		   ( * ( ( volatile unsigned long * ) 0xe000ed04 ) )
N#define portNVIC_PENDSVSET_BIT		 ( 1UL << 28UL )
N#define portYIELD()					        vPortYield()
N#define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
N/*-----------------------------------------------------------*/
N/* Critical section management. */
Nextern unsigned long   ulPortSetInterruptMask( void );
Nextern void            vPortClearInterruptMask( unsigned long ulNewMask );
Nextern void            vPortEnterCritical( void );
Nextern void            vPortExitCritical( void );
N
N#define portDISABLE_INTERRUPTS()				      ulPortSetInterruptMask()
N#define portENABLE_INTERRUPTS()					      vPortClearInterruptMask( 0 )
N#define portENTER_CRITICAL()					        vPortEnterCritical()
N#define portEXIT_CRITICAL()						        vPortExitCritical()
N#define portSET_INTERRUPT_MASK_FROM_ISR()		  ulPortSetInterruptMask()
N#define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
N/*-----------------------------------------------------------*/
N
N/* Tickless idle/low power functionality. */
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
N	extern void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime );
N	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdleTime )
N#endif
N/*-----------------------------------------------------------*/
N
N/* Port specific optimisations. */
N#if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
X#if 0 == 1
S	/* Check the configuration. */
S	#if( configMAX_PRIORITIES > 32 )
S		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is less than or equal to 32.  It is very rare that a system requires more than 10 to 15 difference priorities as tasks that share a priority will time slice.
S	#endif
S
S	/* Store/clear the ready priorities in a bit map. */
S	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )        ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
S	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )         ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
S	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )        uxTopPriority = ( 31 - __clz( ( uxReadyPriorities ) ) )
S
N#endif /* taskRECORD_READY_PRIORITY */
N/*-----------------------------------------------------------*/
N/* Task function macros as described on the FreeRTOS.org WEB site.  These are
N   not necessary for to use this port.  They are defined so the common demo files
N   (which build with all the ports) will build. */
N#define portTASK_FUNCTION_PROTO( vFunction, pvParameters )  void vFunction( void *pvParameters )
N#define portTASK_FUNCTION( vFunction, pvParameters )        void vFunction( void *pvParameters )
N
N/*-----------------------------------------------------------*/
N/* portNOP() is not required by this port. */
N#define portNOP()
N#ifdef __cplusplus
S}
N#endif
N#endif /* PORTMACRO_H */
N
L 329 "..\free_rtos\portable.h" 2
N#endif
N	
N#if portBYTE_ALIGNMENT == 8
X#if 8 == 8
N	#define portBYTE_ALIGNMENT_MASK ( 0x0007 )
N#endif
N
N#if portBYTE_ALIGNMENT == 4
X#if 8 == 4
S	#define portBYTE_ALIGNMENT_MASK	( 0x0003 )
N#endif
N
N#if portBYTE_ALIGNMENT == 2
X#if 8 == 2
S	#define portBYTE_ALIGNMENT_MASK	( 0x0001 )
N#endif
N
N#if portBYTE_ALIGNMENT == 1
X#if 8 == 1
S	#define portBYTE_ALIGNMENT_MASK	( 0x0000 )
N#endif
N
N#ifndef portBYTE_ALIGNMENT_MASK
S	#error "Invalid portBYTE_ALIGNMENT definition"
N#endif
N
N#ifndef portNUM_CONFIGURABLE_REGIONS
N	#define portNUM_CONFIGURABLE_REGIONS 1
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "mpu_wrappers.h"
L 1 "..\free_rtos\mpu_wrappers.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N#ifndef MPU_WRAPPERS_H
N#define MPU_WRAPPERS_H
N
N/* This file redefines API functions to be called through a wrapper macro, but
Nonly for ports that are using the MPU. */
N#ifdef portUSING_MPU_WRAPPERS
S
S	/* MPU_WRAPPERS_INCLUDED_FROM_API_FILE will be defined when this file is
S	included from queue.c or task.c to prevent it from having an effect within
S	those files. */
S	#ifndef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
S
S		#define xTaskGenericCreate				MPU_xTaskGenericCreate
S		#define vTaskAllocateMPURegions			MPU_vTaskAllocateMPURegions
S		#define vTaskDelete						MPU_vTaskDelete
S		#define vTaskDelayUntil					MPU_vTaskDelayUntil
S		#define vTaskDelay						MPU_vTaskDelay
S		#define uxTaskPriorityGet				MPU_uxTaskPriorityGet
S		#define vTaskPrioritySet				MPU_vTaskPrioritySet
S		#define eTaskGetState					MPU_eTaskGetState
S		#define vTaskSuspend					MPU_vTaskSuspend
S		#define xTaskIsTaskSuspended			MPU_xTaskIsTaskSuspended
S		#define vTaskResume						MPU_vTaskResume
S		#define vTaskSuspendAll					MPU_vTaskSuspendAll
S		#define xTaskResumeAll					MPU_xTaskResumeAll
S		#define xTaskGetTickCount				MPU_xTaskGetTickCount
S		#define uxTaskGetNumberOfTasks			MPU_uxTaskGetNumberOfTasks
S		#define vTaskList						MPU_vTaskList
S		#define vTaskGetRunTimeStats			MPU_vTaskGetRunTimeStats
S		#define vTaskSetApplicationTaskTag		MPU_vTaskSetApplicationTaskTag
S		#define xTaskGetApplicationTaskTag		MPU_xTaskGetApplicationTaskTag
S		#define xTaskCallApplicationTaskHook	MPU_xTaskCallApplicationTaskHook
S		#define uxTaskGetStackHighWaterMark		MPU_uxTaskGetStackHighWaterMark
S		#define xTaskGetCurrentTaskHandle		MPU_xTaskGetCurrentTaskHandle
S		#define xTaskGetSchedulerState			MPU_xTaskGetSchedulerState
S		#define xTaskGetIdleTaskHandle			MPU_xTaskGetIdleTaskHandle
S
S		#define xQueueGenericCreate				MPU_xQueueGenericCreate
S		#define xQueueCreateMutex				MPU_xQueueCreateMutex
S		#define xQueueGiveMutexRecursive		MPU_xQueueGiveMutexRecursive
S		#define xQueueTakeMutexRecursive		MPU_xQueueTakeMutexRecursive
S		#define xQueueCreateCountingSemaphore	MPU_xQueueCreateCountingSemaphore
S		#define xQueueGenericSend				MPU_xQueueGenericSend
S		#define xQueueAltGenericSend			MPU_xQueueAltGenericSend
S		#define xQueueAltGenericReceive			MPU_xQueueAltGenericReceive
S		#define xQueueGenericReceive			MPU_xQueueGenericReceive
S		#define uxQueueMessagesWaiting			MPU_uxQueueMessagesWaiting
S		#define vQueueDelete					MPU_vQueueDelete
S		#define xQueueGenericReset				MPU_xQueueGenericReset
S		#define xQueueCreateSet					MPU_xQueueCreateSet
S		#define xQueueSelectFromSet				MPU_xQueueSelectFromSet
S		#define xQueueAddToSet					MPU_xQueueAddToSet
S		#define xQueueRemoveFromSet				MPU_xQueueRemoveFromSet
S
S		#define pvPortMalloc					MPU_pvPortMalloc
S		#define vPortFree						MPU_vPortFree
S		#define xPortGetFreeHeapSize			MPU_xPortGetFreeHeapSize
S		#define vPortInitialiseBlocks			MPU_vPortInitialiseBlocks
S
S		#if configQUEUE_REGISTRY_SIZE > 0
S			#define vQueueAddToRegistry				MPU_vQueueAddToRegistry
S			#define vQueueUnregisterQueue			MPU_vQueueUnregisterQueue
S		#endif
S
S		/* Remove the privileged function macro. */
S		#define PRIVILEGED_FUNCTION
S
S	#else /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
S		/* Ensure API functions go in the privileged execution section. */
S		#define PRIVILEGED_FUNCTION __attribute__((section("privileged_functions")))
S		#define PRIVILEGED_DATA __attribute__((section("privileged_data")))
S        //#define PRIVILEGED_DATA
S
S	#endif /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
N#else /* portUSING_MPU_WRAPPERS */
N
N	#define PRIVILEGED_FUNCTION
N	#define PRIVILEGED_DATA
N	#define portUSING_MPU_WRAPPERS 0
N
N#endif /* portUSING_MPU_WRAPPERS */
N
N
N#endif /* MPU_WRAPPERS_H */
N
L 360 "..\free_rtos\portable.h" 2
N
N/*
N * Setup the stack of a new task so it is ready to be placed under the
N * scheduler control.  The registers have to be placed on the stack in
N * the order that the port expects to find them.
N *
N */
N#if( portUSING_MPU_WRAPPERS == 1 )
X#if( 0 == 1 )
S	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters, portBASE_TYPE xRunPrivileged ) PRIVILEGED_FUNCTION;
N#else
N	portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
X	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );
N#endif
N
N/*
N * Map to the memory management routines required for the port.
N */
Nvoid *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION;
Xvoid *pvPortMalloc( size_t xSize ) ;
Nvoid vPortFree( void *pv ) PRIVILEGED_FUNCTION;
Xvoid vPortFree( void *pv ) ;
Nvoid vPortInitialiseBlocks( void ) PRIVILEGED_FUNCTION;
Xvoid vPortInitialiseBlocks( void ) ;
Nsize_t xPortGetFreeHeapSize( void ) PRIVILEGED_FUNCTION;
Xsize_t xPortGetFreeHeapSize( void ) ;
N
N/*
N * Setup the hardware ready for the scheduler to take control.  This generally
N * sets up a tick interrupt and sets timers for the correct tick frequency.
N */
NportBASE_TYPE xPortStartScheduler( void ) PRIVILEGED_FUNCTION;
Xlong xPortStartScheduler( void ) ;
N
N/*
N * Undo any hardware/ISR setup that was performed by xPortStartScheduler() so
N * the hardware is left in its original condition after the scheduler stops
N * executing.
N */
Nvoid vPortEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vPortEndScheduler( void ) ;
N
N/*
N * The structures and methods of manipulating the MPU are contained within the
N * port layer.
N *
N * Fills the xMPUSettings structure with the memory region information
N * contained in xRegions.
N */
N#if( portUSING_MPU_WRAPPERS == 1 ) 
X#if( 0 == 1 ) 
S	struct xMEMORY_REGION;
S	void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, portSTACK_TYPE *pxBottomOfStack, unsigned short usStackDepth ) PRIVILEGED_FUNCTION;
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* PORTABLE_H */
N
L 98 "..\free_rtos\FreeRTOS.h" 2
N
N
N/* Defines the prototype to which the application task hook function must
Nconform. */
Ntypedef portBASE_TYPE (*pdTASK_HOOK_CODE)( void * );
Xtypedef long (*pdTASK_HOOK_CODE)( void * );
N
N
N
N
N
N/*
N * Check all the required application specific macros have been defined.
N * These macros are application specific and (as downloaded) are defined
N * within FreeRTOSConfig.h.
N */
N
N#ifndef configUSE_PREEMPTION
S	#error Missing definition:  configUSE_PREEMPTION should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_IDLE_HOOK
S	#error Missing definition:  configUSE_IDLE_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_TICK_HOOK
S	#error Missing definition:  configUSE_TICK_HOOK should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_CO_ROUTINES
S	#error  Missing definition:  configUSE_CO_ROUTINES should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskPrioritySet
S	#error Missing definition:  INCLUDE_vTaskPrioritySet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_uxTaskPriorityGet
S	#error Missing definition:  INCLUDE_uxTaskPriorityGet should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelete
S	#error Missing definition:  INCLUDE_vTaskDelete		 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskSuspend
S	#error Missing definition:  INCLUDE_vTaskSuspend	 should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelayUntil
S	#error Missing definition:  INCLUDE_vTaskDelayUntil should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelay
S	#error Missing definition:  INCLUDE_vTaskDelay should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_16_BIT_TICKS
S	#error Missing definition:  configUSE_16_BIT_TICKS should be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_xTaskGetIdleTaskHandle
N	#define INCLUDE_xTaskGetIdleTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xTimerGetTimerDaemonTaskHandle
N	#define INCLUDE_xTimerGetTimerDaemonTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xQueueGetMutexHolder
N	#define INCLUDE_xQueueGetMutexHolder 0
N#endif
N
N#ifndef INCLUDE_xSemaphoreGetMutexHolder
N	#define INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetMutexHolder
N#endif
N
N#ifndef INCLUDE_pcTaskGetTaskName
N	#define INCLUDE_pcTaskGetTaskName 0
N#endif
N
N#ifndef configUSE_APPLICATION_TASK_TAG
N	#define configUSE_APPLICATION_TASK_TAG 0
N#endif
N
N#ifndef INCLUDE_uxTaskGetStackHighWaterMark
N	#define INCLUDE_uxTaskGetStackHighWaterMark 0
N#endif
N
N#ifndef INCLUDE_eTaskGetState
N	#define INCLUDE_eTaskGetState 0
N#endif
N
N#ifndef configUSE_RECURSIVE_MUTEXES
N	#define configUSE_RECURSIVE_MUTEXES 0
N#endif
N
N#ifndef configUSE_MUTEXES
N	#define configUSE_MUTEXES 0
N#endif
N
N#ifndef configUSE_TIMERS
N	#define configUSE_TIMERS 0
N#endif
N
N#ifndef configUSE_COUNTING_SEMAPHORES
N	#define configUSE_COUNTING_SEMAPHORES 0
N#endif
N
N#ifndef configUSE_ALTERNATIVE_API
N	#define configUSE_ALTERNATIVE_API 0
N#endif
N
N#ifndef portCRITICAL_NESTING_IN_TCB
N	#define portCRITICAL_NESTING_IN_TCB 0
N#endif
N
N#ifndef configMAX_TASK_NAME_LEN
S	#define configMAX_TASK_NAME_LEN 16
N#endif
N
N#ifndef configIDLE_SHOULD_YIELD
S	#define configIDLE_SHOULD_YIELD		1
N#endif
N
N#if configMAX_TASK_NAME_LEN < 1
X#if ( 16 ) < 1
S	#error configMAX_TASK_NAME_LEN must be set to a minimum of 1 in FreeRTOSConfig.h
N#endif
N
N#ifndef INCLUDE_xTaskResumeFromISR
N	#define INCLUDE_xTaskResumeFromISR 1
N#endif
N
N#ifndef configASSERT
N	#define configASSERT( x )
N#endif
N
N#ifndef portALIGNMENT_ASSERT_pxCurrentTCB
N	#define portALIGNMENT_ASSERT_pxCurrentTCB configASSERT
N#endif
N
N/* The timers module relies on xTaskGetSchedulerState(). */
N#if configUSE_TIMERS == 1
X#if 0 == 1
S
S	#ifndef configTIMER_TASK_PRIORITY
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_PRIORITY must also be defined.
S	#endif /* configTIMER_TASK_PRIORITY */
S
S	#ifndef configTIMER_QUEUE_LENGTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_QUEUE_LENGTH must also be defined.
S	#endif /* configTIMER_QUEUE_LENGTH */
S
S	#ifndef configTIMER_TASK_STACK_DEPTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_STACK_DEPTH must also be defined.
S	#endif /* configTIMER_TASK_STACK_DEPTH */
S
N#endif /* configUSE_TIMERS */
N
N#ifndef INCLUDE_xTaskGetSchedulerState
N	#define INCLUDE_xTaskGetSchedulerState 0
N#endif
N
N#ifndef INCLUDE_xTaskGetCurrentTaskHandle
N	#define INCLUDE_xTaskGetCurrentTaskHandle 0
N#endif
N
N
N#ifndef portSET_INTERRUPT_MASK_FROM_ISR
S	#define portSET_INTERRUPT_MASK_FROM_ISR() 0
N#endif
N
N#ifndef portCLEAR_INTERRUPT_MASK_FROM_ISR
S	#define portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedStatusValue ) ( void ) uxSavedStatusValue
N#endif
N
N#ifndef portCLEAN_UP_TCB
N	#define portCLEAN_UP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef portSETUP_TCB
N	#define portSETUP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef configQUEUE_REGISTRY_SIZE
N	#define configQUEUE_REGISTRY_SIZE 0U
N#endif
N
N#if ( configQUEUE_REGISTRY_SIZE < 1 )
X#if ( 0U < 1 )
N	#define vQueueAddToRegistry( xQueue, pcName )
N	#define vQueueUnregisterQueue( xQueue )
N#endif
N
N#ifndef portPOINTER_SIZE_TYPE
N	#define portPOINTER_SIZE_TYPE unsigned long
N#endif
N
N/* Remove any unused trace macros. */
N#ifndef traceSTART
N	/* Used to perform any necessary initialisation - for example, open a file
N	into which trace is to be written. */
N	#define traceSTART()
N#endif
N
N#ifndef traceEND
N	/* Use to close a trace, for example close a file into which trace has been
N	written. */
N	#define traceEND()
N#endif
N
N#ifndef traceTASK_SWITCHED_IN
N	/* Called after a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the selected task. */
N	#define traceTASK_SWITCHED_IN()
N#endif
N
N#ifndef traceTASK_SWITCHED_OUT
N	/* Called before a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the task being switched out. */
N	#define traceTASK_SWITCHED_OUT()
N#endif
N
N#ifndef traceTASK_PRIORITY_INHERIT
N	/* Called when a task attempts to take a mutex that is already held by a
N	lower priority task.  pxTCBOfMutexHolder is a pointer to the TCB of the task
N	that holds the mutex.  uxInheritedPriority is the priority the mutex holder
N	will inherit (the priority of the task that is attempting to obtain the
N	muted. */
N	#define traceTASK_PRIORITY_INHERIT( pxTCBOfMutexHolder, uxInheritedPriority )
N#endif
N
N#ifndef traceTASK_PRIORITY_DISINHERIT
N	/* Called when a task releases a mutex, the holding of which had resulted in
N	the task inheriting the priority of a higher priority task.
N	pxTCBOfMutexHolder is a pointer to the TCB of the task that is releasing the
N	mutex.  uxOriginalPriority is the task's configured (base) priority. */
N	#define traceTASK_PRIORITY_DISINHERIT( pxTCBOfMutexHolder, uxOriginalPriority )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_RECEIVE
N	/* Task is about to block because it cannot read from a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the read was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the read. */
N	#define traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_SEND
N	/* Task is about to block because it cannot write to a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the write was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the write. */
N	#define traceBLOCKING_ON_QUEUE_SEND( pxQueue )
N#endif
N
N#ifndef configCHECK_FOR_STACK_OVERFLOW
N	#define configCHECK_FOR_STACK_OVERFLOW 0
N#endif
N
N/* The following event macros are embedded in the kernel API calls. */
N
N#ifndef traceMOVED_TASK_TO_READY_STATE
N	#define traceMOVED_TASK_TO_READY_STATE( pxTCB )
N#endif
N
N#ifndef traceQUEUE_CREATE
N	#define traceQUEUE_CREATE( pxNewQueue )
N#endif
N
N#ifndef traceQUEUE_CREATE_FAILED
N	#define traceQUEUE_CREATE_FAILED( ucQueueType )
N#endif
N
N#ifndef traceCREATE_MUTEX
N	#define traceCREATE_MUTEX( pxNewQueue )
N#endif
N
N#ifndef traceCREATE_MUTEX_FAILED
N	#define traceCREATE_MUTEX_FAILED()
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE
N	#define traceGIVE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE_FAILED
N	#define traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE
N	#define traceTAKE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE_FAILED
N	#define traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE
N	#define traceCREATE_COUNTING_SEMAPHORE()
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE_FAILED
N	#define traceCREATE_COUNTING_SEMAPHORE_FAILED()
N#endif
N
N#ifndef traceQUEUE_SEND
N	#define traceQUEUE_SEND( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FAILED
N	#define traceQUEUE_SEND_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE
N	#define traceQUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK
N	#define traceQUEUE_PEEK( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FAILED
N	#define traceQUEUE_RECEIVE_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR
N	#define traceQUEUE_SEND_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR_FAILED
N	#define traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR
N	#define traceQUEUE_RECEIVE_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR_FAILED
N	#define traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_DELETE
N	#define traceQUEUE_DELETE( pxQueue )
N#endif
N
N#ifndef traceTASK_CREATE
N	#define traceTASK_CREATE( pxNewTCB )
N#endif
N
N#ifndef traceTASK_CREATE_FAILED
N	#define traceTASK_CREATE_FAILED()
N#endif
N
N#ifndef traceTASK_DELETE
N	#define traceTASK_DELETE( pxTaskToDelete )
N#endif
N
N#ifndef traceTASK_DELAY_UNTIL
N	#define traceTASK_DELAY_UNTIL()
N#endif
N
N#ifndef traceTASK_DELAY
N	#define traceTASK_DELAY()
N#endif
N
N#ifndef traceTASK_PRIORITY_SET
N	#define traceTASK_PRIORITY_SET( pxTask, uxNewPriority )
N#endif
N
N#ifndef traceTASK_SUSPEND
N	#define traceTASK_SUSPEND( pxTaskToSuspend )
N#endif
N
N#ifndef traceTASK_RESUME
N	#define traceTASK_RESUME( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_RESUME_FROM_ISR
N	#define traceTASK_RESUME_FROM_ISR( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_INCREMENT_TICK
N	#define traceTASK_INCREMENT_TICK( xTickCount )
N#endif
N
N#ifndef traceTIMER_CREATE
N	#define traceTIMER_CREATE( pxNewTimer )
N#endif
N
N#ifndef traceTIMER_CREATE_FAILED
N	#define traceTIMER_CREATE_FAILED()
N#endif
N
N#ifndef traceTIMER_COMMAND_SEND
N	#define traceTIMER_COMMAND_SEND( xTimer, xMessageID, xMessageValueValue, xReturn )
N#endif
N
N#ifndef traceTIMER_EXPIRED
N	#define traceTIMER_EXPIRED( pxTimer )
N#endif
N
N#ifndef traceTIMER_COMMAND_RECEIVED
N	#define traceTIMER_COMMAND_RECEIVED( pxTimer, xMessageID, xMessageValue )
N#endif
N
N#ifndef configGENERATE_RUN_TIME_STATS
N	#define configGENERATE_RUN_TIME_STATS 0
N#endif
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
S		#error If configGENERATE_RUN_TIME_STATS is defined then portCONFIGURE_TIMER_FOR_RUN_TIME_STATS must also be defined.  portCONFIGURE_TIMER_FOR_RUN_TIME_STATS should call a port layer function to setup a peripheral timer/counter that can then be used as the run time counter time base.
S	#endif /* portCONFIGURE_TIMER_FOR_RUN_TIME_STATS */
S
S	#ifndef portGET_RUN_TIME_COUNTER_VALUE
S		#ifndef portALT_GET_RUN_TIME_COUNTER_VALUE
S			#error If configGENERATE_RUN_TIME_STATS is defined then either portGET_RUN_TIME_COUNTER_VALUE or portALT_GET_RUN_TIME_COUNTER_VALUE must also be defined.  See the examples provided and the FreeRTOS web site for more information.
S		#endif /* portALT_GET_RUN_TIME_COUNTER_VALUE */
S	#endif /* portGET_RUN_TIME_COUNTER_VALUE */
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N
N#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
N	#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()
N#endif
N
N#ifndef configUSE_MALLOC_FAILED_HOOK
N	#define configUSE_MALLOC_FAILED_HOOK 0
N#endif
N
N#ifndef portPRIVILEGE_BIT
N	#define portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00 )
N#endif
N
N#ifndef portYIELD_WITHIN_API
N	#define portYIELD_WITHIN_API portYIELD
N#endif
N
N#ifndef pvPortMallocAligned
N	#define pvPortMallocAligned( x, puxStackBuffer ) ( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )
N#endif
N
N#ifndef vPortFreeAligned
N	#define vPortFreeAligned( pvBlockToFree ) vPortFree( pvBlockToFree )
N#endif
N
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
S	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )
N#endif
N
N#ifndef configEXPECTED_IDLE_TIME_BEFORE_SLEEP
N	#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2
N#endif
N
N#if configEXPECTED_IDLE_TIME_BEFORE_SLEEP < 2
X#if 2 < 2
S	#error configEXPECTED_IDLE_TIME_BEFORE_SLEEP must not be less than 2
N#endif
N
N#ifndef configUSE_TICKLESS_IDLE
N	#define configUSE_TICKLESS_IDLE 0
N#endif
N
N#ifndef configPRE_SLEEP_PROCESSING
N	#define configPRE_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configPOST_SLEEP_PROCESSING
N	#define configPOST_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configUSE_QUEUE_SETS
N	#define configUSE_QUEUE_SETS 0
N#endif
N
N/* For backward compatability. */
N#define eTaskStateGet eTaskGetState
N
N#endif /* INC_FREERTOS_H */
N
L 81 "..\free_rtos\timers.c" 2
N#include "task.h"
L 1 "..\free_rtos\task.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions,
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
N    Integrity Systems, who sell the code with commercial support,
N    indemnification and middleware, under the OpenRTOS brand.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef TASK_H
N#define TASK_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include task.h"
N#endif
N
N#include "portable.h"
N#include "list.h"
L 1 "..\free_rtos\list.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N/*
N * This is the list implementation used by the scheduler.  While it is tailored
N * heavily for the schedulers needs, it is also available for use by
N * application code.
N *
N * xLists can only store pointers to xListItems.  Each xListItem contains a
N * numeric value (xItemValue).  Most of the time the lists are sorted in
N * descending item value order.
N *
N * Lists are created already containing one list item.  The value of this
N * item is the maximum possible that can be stored, it is therefore always at
N * the end of the list and acts as a marker.  The list member pxHead always
N * points to this marker - even though it is at the tail of the list.  This
N * is because the tail contains a wrap back pointer to the true head of
N * the list.
N *
N * In addition to it's value, each list item contains a pointer to the next
N * item in the list (pxNext), a pointer to the list it is in (pxContainer)
N * and a pointer to back to the object that contains it.  These later two
N * pointers are included for efficiency of list manipulation.  There is
N * effectively a two way link between the object containing the list item and
N * the list item itself.
N *
N *
N * \page ListIntroduction List Implementation
N * \ingroup FreeRTOSIntro
N */
N
N
N#ifndef LIST_H
N#define LIST_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N/*
N * Definition of the only type of object that a list can contain.
N */
Nstruct xLIST_ITEM
N{
N	portTickType xItemValue;				/*< The value being listed.  In most cases this is used to sort the list in descending order. */
N	volatile struct xLIST_ITEM * pxNext;	/*< Pointer to the next xListItem in the list. */
N	volatile struct xLIST_ITEM * pxPrevious;/*< Pointer to the previous xListItem in the list. */
N	void * pvOwner;							/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */
N	void * pvContainer;						/*< Pointer to the list in which this list item is placed (if any). */
N};
Ntypedef struct xLIST_ITEM xListItem;		/* For some reason lint wants this as two separate definitions. */
N
Nstruct xMINI_LIST_ITEM
N{
N	portTickType xItemValue;
N	volatile struct xLIST_ITEM *pxNext;
N	volatile struct xLIST_ITEM *pxPrevious;
N};
Ntypedef struct xMINI_LIST_ITEM xMiniListItem;
N
N/*
N * Definition of the type of queue used by the scheduler.
N */
Ntypedef struct xLIST
N{
N	volatile unsigned portBASE_TYPE uxNumberOfItems;
X	volatile unsigned long uxNumberOfItems;
N	volatile xListItem * pxIndex;			/*< Used to walk through the list.  Points to the last item returned by a call to pvListGetOwnerOfNextEntry (). */
N	volatile xMiniListItem xListEnd;		/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */
N} xList;
N
N/*
N * Access macro to set the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )		( pxListItem )->pvOwner = ( void * ) ( pxOwner )
N
N/*
N * Access macro to get the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_OWNER( pxListItem )		( pxListItem )->pvOwner
N
N/*
N * Access macro to set the value of the list item.  In most cases the value is
N * used to sort the list in descending order.
N *
N * \page listSET_LIST_ITEM_VALUE listSET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )		( pxListItem )->xItemValue = ( xValue )
N
N/*
N * Access macro to retrieve the value of the list item.  The value can
N * represent anything - for example a the priority of a task, or the time at
N * which a task should be unblocked.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_VALUE( pxListItem )				( ( pxListItem )->xItemValue )
N
N/*
N * Access macro the retrieve the value of the list item at the head of a given
N * list.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )			( (&( ( pxList )->xListEnd ))->pxNext->xItemValue )
N
N/*
N * Access macro to determine if a list contains any items.  The macro will
N * only have the value true if the list is empty.
N *
N * \page listLIST_IS_EMPTY listLIST_IS_EMPTY
N * \ingroup LinkedList
N */
N#define listLIST_IS_EMPTY( pxList )				( ( pxList )->uxNumberOfItems == ( unsigned portBASE_TYPE ) 0 )
N
N/*
N * Access macro to return the number of items in the list.
N */
N#define listCURRENT_LIST_LENGTH( pxList )		( ( pxList )->uxNumberOfItems )
N
N/*
N * Access function to obtain the owner of the next entry in a list.
N *
N * The list member pxIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pxIndex to the next item in the list
N * and returns that entries pxOwner parameter.  Using multiple calls to this
N * function it is therefore possible to move through every item contained in
N * a list.
N *
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the next item owner is to be returned.
N *
N * \page listGET_OWNER_OF_NEXT_ENTRY listGET_OWNER_OF_NEXT_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									\
N{																						\
NxList * const pxConstList = ( pxList );													\
N	/* Increment the index to the next item and return the item, ensuring */			\
N	/* we don't return the marker used at the end of the list.  */						\
N	( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						\
N	if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )	\
N	{																					\
N		( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;					\
N	}																					\
N	( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										\
N}
X#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )									{																						xList * const pxConstList = ( pxList );														 				 							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) )		{																							( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						}																						( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;										}
N
N
N/*
N * Access function to obtain the owner of the first entry in a list.  Lists
N * are normally sorted in ascending item value order.
N *
N * This function returns the pxOwner member of the first item in the list.
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the owner of the head item is to be
N * returned.
N *
N * \page listGET_OWNER_OF_HEAD_ENTRY listGET_OWNER_OF_HEAD_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_HEAD_ENTRY( pxList )  ( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )
N
N/*
N * Check to see if a list item is within a list.  The list item maintains a
N * "container" pointer that points to the list it is in.  All this macro does
N * is check to see if the container and the list match.
N *
N * @param pxList The list we want to know if the list item is within.
N * @param pxListItem The list item we want to know if is in the list.
N * @return pdTRUE is the list item is in the list, otherwise pdFALSE.
N * pointer against
N */
N#define listIS_CONTAINED_WITHIN( pxList, pxListItem ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) )
N
N/*
N * Return the list a list item is contained within (referenced from).
N *
N * @param pxListItem The list item being queried.
N * @return A pointer to the xList object that references the pxListItem
N */
N#define listLIST_ITEM_CONTAINER( pxListItem ) ( ( pxListItem )->pvContainer )
N
N/*
N * This provides a crude means of knowing if a list has been initialised, as
N * pxList->xListEnd.xItemValue is set to portMAX_DELAY by the vListInitialise()
N * function.
N */
N#define listLIST_IS_INITIALISED( pxList ) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
N
N/*
N * Must be called before a list is used!  This initialises all the members
N * of the list structure and inserts the xListEnd item into the list as a
N * marker to the back of the list.
N *
N * @param pxList Pointer to the list being initialised.
N *
N * \page vListInitialise vListInitialise
N * \ingroup LinkedList
N */
Nvoid vListInitialise( xList *pxList );
N
N/*
N * Must be called before a list item is used.  This sets the list container to
N * null so the item does not think that it is already contained in a list.
N *
N * @param pxItem Pointer to the list item being initialised.
N *
N * \page vListInitialiseItem vListInitialiseItem
N * \ingroup LinkedList
N */
Nvoid vListInitialiseItem( xListItem *pxItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted into the list in
N * a position determined by its item value (descending item value order).
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The item to that is to be placed in the list.
N *
N * \page vListInsert vListInsert
N * \ingroup LinkedList
N */
Nvoid vListInsert( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Insert a list item into a list.  The item will be inserted in a position
N * such that it will be the last item within the list returned by multiple
N * calls to listGET_OWNER_OF_NEXT_ENTRY.
N *
N * The list member pvIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pvIndex to the next item in the list.
N * Placing an item in a list using vListInsertEnd effectively places the item
N * in the list position pointed to by pvIndex.  This means that every other
N * item within the list will be returned by listGET_OWNER_OF_NEXT_ENTRY before
N * the pvIndex parameter again points to the item being inserted.
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The list item to be inserted into the list.
N *
N * \page vListInsertEnd vListInsertEnd
N * \ingroup LinkedList
N */
Nvoid vListInsertEnd( xList *pxList, xListItem *pxNewListItem );
N
N/*
N * Remove an item from a list.  The list item has a pointer to the list that
N * it is in, so only the list item need be passed into the function.
N *
N * @param uxListRemove The item to be removed.  The item will remove itself from
N * the list pointed to by it's pxContainer parameter.
N * 
N * @return The number of items that remain in the list after the list item has
N * been removed.
N *
N * \page uxListRemove uxListRemove
N * \ingroup LinkedList
N */
Nunsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove );
Xunsigned long uxListRemove( xListItem *pxItemToRemove );
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
L 85 "..\free_rtos\task.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N#define tskKERNEL_VERSION_NUMBER "V7.4.2"
N
N/**
N * task. h
N *
N * Type by which tasks are referenced.  For example, a call to xTaskCreate
N * returns (via a pointer parameter) an xTaskHandle variable that can then
N * be used as a parameter to vTaskDelete to delete the task.
N *
N * \page xTaskHandle xTaskHandle
N * \ingroup Tasks
N */
Ntypedef void * xTaskHandle;
N
N/*
N * Used internally only.
N */
Ntypedef struct xTIME_OUT
N{
N	portBASE_TYPE xOverflowCount;
X	long xOverflowCount;
N	portTickType  xTimeOnEntering;
N} xTimeOutType;
N
N/*
N * Defines the memory ranges allocated to the task when an MPU is used.
N */
Ntypedef struct xMEMORY_REGION
N{
N	void *pvBaseAddress;
N	unsigned long ulLengthInBytes;
N	unsigned long ulParameters;
N} xMemoryRegion;
N
N/*
N * Parameters required to create an MPU protected task.
N */
Ntypedef struct xTASK_PARAMTERS
N{
N	pdTASK_CODE pvTaskCode;
N	const signed char * const pcName;
N	unsigned short usStackDepth;
N	void *pvParameters;
N	unsigned portBASE_TYPE uxPriority;
X	unsigned long uxPriority;
N	portSTACK_TYPE *puxStackBuffer;
X	unsigned long *puxStackBuffer;
N	xMemoryRegion xRegions[ portNUM_CONFIGURABLE_REGIONS ];
X	xMemoryRegion xRegions[ 1 ];
N} xTaskParameters;
N
N/* Task states returned by eTaskGetState. */
Ntypedef enum
N{
N	eRunning = 0,	/* A task is querying the state of itself, so must be running. */
N	eReady,			/* The task being queried is in a read or pending ready list. */
N	eBlocked,		/* The task being queried is in the Blocked state. */
N	eSuspended,		/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */
N	eDeleted		/* The task being queried has been deleted, but its TCB has not yet been freed. */
N} eTaskState;
N
N/* Possible return values for eTaskConfirmSleepModeStatus(). */
Ntypedef enum
N{
N	eAbortSleep = 0,		/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */
N	eStandardSleep,			/* Enter a sleep mode that will not last any longer than the expected idle time. */
N	eNoTasksWaitingTimeout	/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */
N} eSleepModeStatus;
N
N
N/*
N * Defines the priority used by the idle task.  This must not be modified.
N *
N * \ingroup TaskUtils
N */
N#define tskIDLE_PRIORITY			( ( unsigned portBASE_TYPE ) 0U )
N
N/**
N * task. h
N *
N * Macro for forcing a context switch.
N *
N * \page taskYIELD taskYIELD
N * \ingroup SchedulerControl
N */
N#define taskYIELD()					portYIELD()
N
N/**
N * task. h
N *
N * Macro to mark the start of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskENTER_CRITICAL taskENTER_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskENTER_CRITICAL()		portENTER_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to mark the end of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \page taskEXIT_CRITICAL taskEXIT_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskEXIT_CRITICAL()			portEXIT_CRITICAL()
N
N/**
N * task. h
N *
N * Macro to disable all maskable interrupts.
N *
N * \page taskDISABLE_INTERRUPTS taskDISABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskDISABLE_INTERRUPTS()	portDISABLE_INTERRUPTS()
N
N/**
N * task. h
N *
N * Macro to enable microcontroller interrupts.
N *
N * \page taskENABLE_INTERRUPTS taskENABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskENABLE_INTERRUPTS()		portENABLE_INTERRUPTS()
N
N/* Definitions returned by xTaskGetSchedulerState(). */
N#define taskSCHEDULER_NOT_STARTED	0
N#define taskSCHEDULER_RUNNING		1
N#define taskSCHEDULER_SUSPENDED		2
N
N/*-----------------------------------------------------------
N * TASK CREATION API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreate(
N							  pdTASK_CODE pvTaskCode,
N							  const char * const pcName,
N							  unsigned short usStackDepth,
N							  void *pvParameters,
N							  unsigned portBASE_TYPE uxPriority,
N							  xTaskHandle *pvCreatedTask
N						  );</pre>
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N *
N * xTaskCreate() can only be used to create a task that has unrestricted
N * access to the entire microcontroller memory map.  Systems that include MPU
N * support can alternatively create an MPU constrained task using
N * xTaskCreateRestricted().
N *
N * @param pvTaskCode Pointer to the task entry function.  Tasks
N * must be implemented to never return (i.e. continuous loop).
N *
N * @param pcName A descriptive name for the task.  This is mainly used to
N * facilitate debugging.  Max length defined by tskMAX_TASK_NAME_LEN - default
N * is 16.
N *
N * @param usStackDepth The size of the task stack specified as the number of
N * variables the stack can hold - not the number of bytes.  For example, if
N * the stack is 16 bits wide and usStackDepth is defined as 100, 200 bytes
N * will be allocated for stack storage.
N *
N * @param pvParameters Pointer that will be used as the parameter for the task
N * being created.
N *
N * @param uxPriority The priority at which the task should run.  Systems that
N * include MPU support can optionally create tasks in a privileged (system)
N * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For
N * example, to create a privileged task at priority 2 the uxPriority parameter
N * should be set to ( 2 | portPRIVILEGE_BIT ).
N *
N * @param pvCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N // Task to be created.
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N	 }
N }
N
N // Function that creates a task.
N void vOtherFunction( void )
N {
N static unsigned char ucParameterToPass;
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass
N	 // must exist for the lifetime of the task, so in this case is declared static.  If it was just an
N	 // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time
N	 // the new task attempts to access it.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, &ucParameterToPass, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup xTaskCreate xTaskCreate
N * \ingroup Tasks
N */
N#define xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask ) xTaskGenericCreate( ( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvParameters ), ( uxPriority ), ( pxCreatedTask ), ( NULL ), ( NULL ) )
N
N/**
N * task. h
N *<pre>
N portBASE_TYPE xTaskCreateRestricted( xTaskParameters *pxTaskDefinition, xTaskHandle *pxCreatedTask );</pre>
N *
N * xTaskCreateRestricted() should only be used in systems that include an MPU
N * implementation.
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N * The function parameters define the memory regions and associated access
N * permissions allocated to the task.
N *
N * @param pxTaskDefinition Pointer to a structure that contains a member
N * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API
N * documentation) plus an optional stack buffer and the memory region
N * definitions.
N *
N * @param pxCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file errors. h
N *
N * Example usage:
N   <pre>
N// Create an xTaskParameters structure that defines the task to be created.
Nstatic const xTaskParameters xCheckTaskParameters =
N{
N	vATask,		// pvTaskCode - the function that implements the task.
N	"ATask",	// pcName - just a text name for the task to assist debugging.
N	100,		// usStackDepth	- the stack size DEFINED IN WORDS.
N	NULL,		// pvParameters - passed into the task function as the function parameters.
N	( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.
N	cStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.
N
N	// xRegions - Allocate up to three separate memory regions for access by
N	// the task, with appropriate access permissions.  Different processors have
N	// different memory alignment requirements - refer to the FreeRTOS documentation
N	// for full information.
N	{
N		// Base address					Length	Parameters
N        { cReadWriteArray,				32,		portMPU_REGION_READ_WRITE },
N        { cReadOnlyArray,				32,		portMPU_REGION_READ_ONLY },
N        { cPrivilegedOnlyAccessArray,	128,	portMPU_REGION_PRIVILEGED_READ_WRITE }
N	}
N};
N
Nint main( void )
N{
NxTaskHandle xHandle;
N
N	// Create a task from the const structure defined above.  The task handle
N	// is requested (the second parameter is not NULL) but in this case just for
N	// demonstration purposes as its not actually used.
N	xTaskCreateRestricted( &xRegTest1Parameters, &xHandle );
N
N	// Start the scheduler.
N	vTaskStartScheduler();
N
N	// Will only get here if there was insufficient memory to create the idle
N	// task.
N	for( ;; );
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
N#define xTaskCreateRestricted( x, pxCreatedTask ) xTaskGenericCreate( ((x)->pvTaskCode), ((x)->pcName), ((x)->usStackDepth), ((x)->pvParameters), ((x)->uxPriority), (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xRegions) )
N
N/**
N * task. h
N *<pre>
N void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions );</pre>
N *
N * Memory regions are assigned to a restricted task when the task is created by
N * a call to xTaskCreateRestricted().  These regions can be redefined using
N * vTaskAllocateMPURegions().
N *
N * @param xTask The handle of the task being updated.
N *
N * @param xRegions A pointer to an xMemoryRegion structure that contains the
N * new memory region definitions.
N *
N * Example usage:
N   <pre>
N// Define an array of xMemoryRegion structures that configures an MPU region
N// allowing read/write access for 1024 bytes starting at the beginning of the
N// ucOneKByte array.  The other two of the maximum 3 definable regions are
N// unused so set to zero.
Nstatic const xMemoryRegion xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =
N{
N	// Base address		Length		Parameters
N	{ ucOneKByte,		1024,		portMPU_REGION_READ_WRITE },
N	{ 0,				0,			0 },
N	{ 0,				0,			0 }
N};
N
Nvoid vATask( void *pvParameters )
N{
N	// This task was created such that it has access to certain regions of
N	// memory as defined by the MPU configuration.  At some point it is
N	// desired that these MPU regions are replaced with that defined in the
N	// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()
N	// for this purpose.  NULL is used as the task handle to indicate that this
N	// function should modify the MPU regions of the calling task.
N	vTaskAllocateMPURegions( NULL, xAltRegions );
N
N	// Now the task can continue its function, but from this point on can only
N	// access its stack and the ucOneKByte array (unless any other statically
N	// defined or shared regions have been declared elsewhere).
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
Nvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) PRIVILEGED_FUNCTION;
Xvoid vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelete( xTaskHandle xTask );</pre>
N *
N * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Remove a task from the RTOS real time kernels management.  The task being
N * deleted will be removed from all ready, blocked, suspended and event lists.
N *
N * NOTE:  The idle task is responsible for freeing the kernel allocated
N * memory from tasks that have been deleted.  It is therefore important that
N * the idle task is not starved of microcontroller processing time if your
N * application makes any calls to vTaskDelete ().  Memory allocated by the
N * task code is not automatically freed, and should be freed before the task
N * is deleted.
N *
N * See the demo application file death.c for sample code that utilises
N * vTaskDelete ().
N *
N * @param xTask The handle of the task to be deleted.  Passing NULL will
N * cause the calling task to be deleted.
N *
N * Example usage:
N   <pre>
N void vOtherFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create the task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup vTaskDelete vTaskDelete
N * \ingroup Tasks
N */
Nvoid vTaskDelete( xTaskHandle xTaskToDelete ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelete( xTaskHandle xTaskToDelete ) ;
N
N/*-----------------------------------------------------------
N * TASK CONTROL API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskDelay( portTickType xTicksToDelay );</pre>
N *
N * Delay a task for a given number of ticks.  The actual time that the
N * task remains blocked depends on the tick rate.  The constant
N * portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N *
N * vTaskDelay() specifies a time at which the task wishes to unblock relative to
N * the time at which vTaskDelay() is called.  For example, specifying a block
N * period of 100 ticks will cause the task to unblock 100 ticks after
N * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method
N * of controlling the frequency of a cyclical task as the path taken through the
N * code, as well as other task and interrupt activity, will effect the frequency
N * at which vTaskDelay() gets called and therefore the time at which the task
N * next executes.  See vTaskDelayUntil() for an alternative API function designed
N * to facilitate fixed frequency execution.  It does this by specifying an
N * absolute time (rather than a relative time) at which the calling task should
N * unblock.
N *
N * @param xTicksToDelay The amount of time, in tick periods, that
N * the calling task should block.
N *
N * Example usage:
N
N void vTaskFunction( void * pvParameters )
N {
N void vTaskFunction( void * pvParameters )
N {
N // Block for 500ms.
N const portTickType xDelay = 500 / portTICK_RATE_MS;
N
N	 for( ;; )
N	 {
N		 // Simply toggle the LED every 500ms, blocking between each toggle.
N		 vToggleLED();
N		 vTaskDelay( xDelay );
N	 }
N }
N
N * \defgroup vTaskDelay vTaskDelay
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelay( portTickType xTicksToDelay ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelay( portTickType xTicksToDelay ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelayUntil( portTickType *pxPreviousWakeTime, portTickType xTimeIncrement );</pre>
N *
N * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Delay a task until a specified time.  This function can be used by cyclical
N * tasks to ensure a constant execution frequency.
N *
N * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will
N * cause a task to block for the specified number of ticks from the time vTaskDelay () is
N * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed
N * execution frequency as the time between a task starting to execute and that task
N * calling vTaskDelay () may not be fixed [the task may take a different path though the
N * code between calls, or may get interrupted or preempted a different number of times
N * each time it executes].
N *
N * Whereas vTaskDelay () specifies a wake time relative to the time at which the function
N * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to
N * unblock.
N *
N * The constant portTICK_RATE_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the
N * task was last unblocked.  The variable must be initialised with the current time
N * prior to its first use (see the example below).  Following this the variable is
N * automatically updated within vTaskDelayUntil ().
N *
N * @param xTimeIncrement The cycle time period.  The task will be unblocked at
N * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the
N * same xTimeIncrement parameter value will cause the task to execute with
N * a fixed interface period.
N *
N * Example usage:
N   <pre>
N // Perform an action every 10 ticks.
N void vTaskFunction( void * pvParameters )
N {
N portTickType xLastWakeTime;
N const portTickType xFrequency = 10;
N
N	 // Initialise the xLastWakeTime variable with the current time.
N	 xLastWakeTime = xTaskGetTickCount ();
N	 for( ;; )
N	 {
N		 // Wait for the next cycle.
N		 vTaskDelayUntil( &xLastWakeTime, xFrequency );
N
N		 // Perform action here.
N	 }
N }
N   </pre>
N * \defgroup vTaskDelayUntil vTaskDelayUntil
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;
N
N/**
N * task. h
N * <pre>unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask );</pre>
N *
N * INCLUDE_xTaskPriorityGet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the priority of any task.
N *
N * @param xTask Handle of the task to be queried.  Passing a NULL
N * handle results in the priority of the calling task being returned.
N *
N * @return The priority of xTask.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to obtain the priority of the created task.
N	 // It was created with tskIDLE_PRIORITY, but may have changed
N	 // it itself.
N	 if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )
N	 {
N		 // The task has changed it's priority.
N	 }
N
N	 // ...
N
N	 // Is our priority higher than the created task?
N	 if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )
N	 {
N		 // Our priority (obtained using NULL handle) is higher.
N	 }
N }
N   </pre>
N * \defgroup uxTaskPriorityGet uxTaskPriorityGet
N * \ingroup TaskCtrl
N */
Nunsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskPriorityGet( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>eTaskState eTaskGetState( xTaskHandle xTask );</pre>
N *
N * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the state of any task.  States are encoded by the eTaskState
N * enumerated type.
N *
N * @param xTask Handle of the task to be queried.
N *
N * @return The state of xTask at the time the function was called.  Note the
N * state of the task might change between the function being called, and the
N * functions return value being tested by the calling task.
N */
NeTaskState eTaskGetState( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
XeTaskState eTaskGetState( xTaskHandle xTask ) ;
N
N/**
N * task. h
N * <pre>void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority );</pre>
N *
N * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Set the priority of any task.
N *
N * A context switch will occur before the function returns if the priority
N * being set is higher than the currently executing task.
N *
N * @param xTask Handle to the task for which the priority is being set.
N * Passing a NULL handle results in the priority of the calling task being set.
N *
N * @param uxNewPriority The priority to which the task will be set.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to raise the priority of the created task.
N	 vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );
N
N	 // ...
N
N	 // Use a NULL handle to raise our priority to the same value.
N	 vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );
N }
N   </pre>
N * \defgroup vTaskPrioritySet vTaskPrioritySet
N * \ingroup TaskCtrl
N */
Nvoid vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority ) PRIVILEGED_FUNCTION;
Xvoid vTaskPrioritySet( xTaskHandle xTask, unsigned long uxNewPriority ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspend( xTaskHandle xTaskToSuspend );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Suspend any task.  When suspended a task will never get any microcontroller
N * processing time, no matter what its priority.
N *
N * Calls to vTaskSuspend are not accumulative -
N * i.e. calling vTaskSuspend () twice on the same task still only requires one
N * call to vTaskResume () to ready the suspended task.
N *
N * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL
N * handle will cause the calling task to be suspended.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Suspend ourselves.
N	 vTaskSuspend( NULL );
N
N	 // We cannot get here unless another task calls vTaskResume
N	 // with our handle as the parameter.
N }
N   </pre>
N * \defgroup vTaskSuspend vTaskSuspend
N * \ingroup TaskCtrl
N */
Nvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspend( xTaskHandle xTaskToSuspend ) ;
N
N/**
N * task. h
N * <pre>void vTaskResume( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Resumes a suspended task.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * vTaskResume ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N xTaskHandle xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Resume the suspended task ourselves.
N	 vTaskResume( xHandle );
N
N	 // The created task will once again get microcontroller processing
N	 // time in accordance with it priority within the system.
N }
N   </pre>
N * \defgroup vTaskResume vTaskResume
N * \ingroup TaskCtrl
N */
Nvoid vTaskResume( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xvoid vTaskResume( xTaskHandle xTaskToResume ) ;
N
N/**
N * task. h
N * <pre>void xTaskResumeFromISR( xTaskHandle xTaskToResume );</pre>
N *
N * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * An implementation of vTaskResume() that can be called from within an ISR.
N *
N * A task that has been suspended by one of more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * xTaskResumeFromISR ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * \defgroup vTaskResumeFromISR vTaskResumeFromISR
N * \ingroup TaskCtrl
N */
NportBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume ) PRIVILEGED_FUNCTION;
Xlong xTaskResumeFromISR( xTaskHandle xTaskToResume ) ;
N
N/*-----------------------------------------------------------
N * SCHEDULER CONTROL
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskStartScheduler( void );</pre>
N *
N * Starts the real time kernel tick processing.  After calling the kernel
N * has control over which tasks are executed and when.  This function
N * does not return until an executing task calls vTaskEndScheduler ().
N *
N * At least one task should be created via a call to xTaskCreate ()
N * before calling vTaskStartScheduler ().  The idle task is created
N * automatically when the first application task is created.
N *
N * See the demo application file main.c for an example of creating
N * tasks and starting the kernel.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will not get here unless a task calls vTaskEndScheduler ()
N }
N   </pre>
N *
N * \defgroup vTaskStartScheduler vTaskStartScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskStartScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskEndScheduler( void );</pre>
N *
N * Stops the real time kernel tick.  All created tasks will be automatically
N * deleted and multitasking (either preemptive or cooperative) will
N * stop.  Execution then resumes from the point where vTaskStartScheduler ()
N * was called, as if vTaskStartScheduler () had just returned.
N *
N * See the demo application file main. c in the demo/PC directory for an
N * example that uses vTaskEndScheduler ().
N *
N * vTaskEndScheduler () requires an exit function to be defined within the
N * portable layer (see vPortEndScheduler () in port. c for the PC port).  This
N * performs hardware specific operations such as stopping the kernel tick.
N *
N * vTaskEndScheduler () will cause all of the resources allocated by the
N * kernel to be freed - but will not free resources allocated by application
N * tasks.
N *
N * Example usage:
N   <pre>
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // At some point we want to end the real time kernel processing
N		 // so call ...
N		 vTaskEndScheduler ();
N	 }
N }
N
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will only get here when the vTaskCode () task has called
N	 // vTaskEndScheduler ().  When we get here we are back to single task
N	 // execution.
N }
N   </pre>
N *
N * \defgroup vTaskEndScheduler vTaskEndScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskEndScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspendAll( void );</pre>
N *
N * Suspends all real time kernel activity while keeping interrupts (including the
N * kernel tick) enabled.
N *
N * After calling vTaskSuspendAll () the calling task will continue to execute
N * without risk of being swapped out until a call to xTaskResumeAll () has been
N * made.
N *
N * API functions that have the potential to cause a context switch (for example,
N * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler
N * is suspended.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the kernel
N		 // tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.
N		 xTaskResumeAll ();
N	 }
N }
N   </pre>
N * \defgroup vTaskSuspendAll vTaskSuspendAll
N * \ingroup SchedulerControl
N */
Nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspendAll( void ) ;
N
N/**
N * task. h
N * <pre>char xTaskResumeAll( void );</pre>
N *
N * Resumes real time kernel activity following a call to vTaskSuspendAll ().
N * After a call to vTaskSuspendAll () the kernel will take control of which
N * task is executing at any time.
N *
N * @return If resuming the scheduler caused a context switch then pdTRUE is
N *		  returned, otherwise pdFALSE is returned.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the real
N		 // time kernel tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.  We want to force
N		 // a context switch - but there is no point if resuming the scheduler
N		 // caused a context switch already.
N		 if( !xTaskResumeAll () )
N		 {
N			  taskYIELD ();
N		 }
N	 }
N }
N   </pre>
N * \defgroup xTaskResumeAll xTaskResumeAll
N * \ingroup SchedulerControl
N */
Nsigned portBASE_TYPE xTaskResumeAll( void ) PRIVILEGED_FUNCTION;
Xsigned long xTaskResumeAll( void ) ;
N
N/**
N * task. h
N * <pre>signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask );</pre>
N *
N * Utility task that simply returns pdTRUE if the task referenced by xTask is
N * currently in the Suspended state, or pdFALSE if the task referenced by xTask
N * is in any other state.
N *
N */
Nsigned portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xsigned long xTaskIsTaskSuspended( xTaskHandle xTask ) ;
N
N/*-----------------------------------------------------------
N * TASK UTILITIES
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCount( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCount( void ) ;
N
N/**
N * task. h
N * <PRE>portTickType xTaskGetTickCountFromISR( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * This is a version of xTaskGetTickCount() that is safe to be called from an
N * ISR - provided that portTickType is the natural word size of the
N * microcontroller being used or interrupt nesting is either not supported or
N * not being used.
N *
N * \page xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NportTickType xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;
XportTickType xTaskGetTickCountFromISR( void ) ;
N
N/**
N * task. h
N * <PRE>unsigned short uxTaskGetNumberOfTasks( void );</PRE>
N *
N * @return The number of tasks that the real time kernel is currently managing.
N * This includes all ready, blocked and suspended tasks.  A task that
N * has been deleted but not yet freed by the idle task will also be
N * included in the count.
N *
N * \page uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks
N * \ingroup TaskUtils
N */
Nunsigned portBASE_TYPE uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetNumberOfTasks( void ) ;
N
N/**
N * task. h
N * <PRE>signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );</PRE>
N *
N * @return The text (human readable) name of the task referenced by the handle
N * xTaskToQueury.  A task can query its own name by either passing in its own
N * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be
N * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.
N *
N * \page pcTaskGetTaskName pcTaskGetTaskName
N * \ingroup TaskUtils
N */
Nsigned char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
N
N/**
N * task. h
N * <PRE>void vTaskList( char *pcWriteBuffer );</PRE>
N *
N * configUSE_TRACE_FACILITY must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Lists all the current tasks, along with their current state and stack
N * usage high water mark.
N *
N * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or
N * suspended ('S').
N *
N * @param pcWriteBuffer A buffer into which the above mentioned details
N * will be written, in ascii form.  This buffer is assumed to be large
N * enough to contain the generated report.  Approximately 40 bytes per
N * task should be sufficient.
N *
N * \page vTaskList vTaskList
N * \ingroup TaskUtils
N */
Nvoid vTaskList( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskList( signed char *pcWriteBuffer ) ;
N
N/**
N * task. h
N * <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>
N *
N * configGENERATE_RUN_TIME_STATS must be defined as 1 for this function
N * to be available.  The application must also then provide definitions
N * for portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and
N * portGET_RUN_TIME_COUNTER_VALUE to configure a peripheral timer/counter
N * and return the timers current count value respectively.  The counter
N * should be at least 10 times the frequency of the tick count.
N *
N * NOTE: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total
N * accumulated execution time being stored for each task.  The resolution
N * of the accumulated time value depends on the frequency of the timer
N * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.
N * Calling vTaskGetRunTimeStats() writes the total execution time of each
N * task into a buffer, both as an absolute count value and as a percentage
N * of the total system execution time.
N *
N * @param pcWriteBuffer A buffer into which the execution times will be
N * written, in ascii form.  This buffer is assumed to be large enough to
N * contain the generated report.  Approximately 40 bytes per task should
N * be sufficient.
N *
N * \page vTaskGetRunTimeStats vTaskGetRunTimeStats
N * \ingroup TaskUtils
N */
Nvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) PRIVILEGED_FUNCTION;
Xvoid vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;
N
N/**
N * task.h
N * <PRE>unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask );</PRE>
N *
N * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for
N * this function to be available.
N *
N * Returns the high water mark of the stack associated with xTask.  That is,
N * the minimum free stack space there has been (in words, so on a 32 bit machine
N * a value of 1 means 4 bytes) since the task started.  The smaller the returned
N * number the closer the task has come to overflowing its stack.
N *
N * @param xTask Handle of the task associated with the stack to be checked.
N * Set xTask to NULL to check the stack of the calling task.
N *
N * @return The smallest amount of free stack space there has been (in bytes)
N * since the task referenced by xTask was created.
N */
Nunsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
Xunsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;
N
N/* When using trace macros it is sometimes necessary to include tasks.h before
NFreeRTOS.h.  When this is done pdTASK_HOOK_CODE will not yet have been defined,
Nso the following two prototypes will cause a compilation error.  This can be
Nfixed by simply guarding against the inclusion of these two prototypes unless
Nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration
Nconstant. */
N#ifdef configUSE_APPLICATION_TASK_TAG
N	#if configUSE_APPLICATION_TASK_TAG == 1
X	#if 0 == 1
S		/**
S		 * task.h
S		 * <pre>void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
S		 *
S		 * Sets pxHookFunction to be the task hook function used by the task xTask.
S		 * Passing xTask as NULL has the effect of setting the calling tasks hook
S		 * function.
S		 */
S		void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction ) PRIVILEGED_FUNCTION;
S
S		/**
S		 * task.h
S		 * <pre>void xTaskGetApplicationTaskTag( xTaskHandle xTask );</pre>
S		 *
S		 * Returns the pxHookFunction value assigned to the task xTask.
S		 */
S		pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask ) PRIVILEGED_FUNCTION;
N	#endif /* configUSE_APPLICATION_TASK_TAG ==1 */
N#endif /* ifdef configUSE_APPLICATION_TASK_TAG */
N
N/**
N * task.h
N * <pre>portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction );</pre>
N *
N * Calls the hook function associated with xTask.  Passing xTask as NULL has
N * the effect of calling the Running tasks (the calling task) hook function.
N *
N * pvParameter is passed to the hook function for the task to interpret as it
N * wants.
N */
NportBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) PRIVILEGED_FUNCTION;
Xlong xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;
N
N/**
N * xTaskGetIdleTaskHandle() is only available if
N * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the idle task.  It is not valid to call
N * xTaskGetIdleTaskHandle() before the scheduler has been started.
N */
NxTaskHandle xTaskGetIdleTaskHandle( void );
N
N/*-----------------------------------------------------------
N * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
N *----------------------------------------------------------*/
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Called from the real time kernel tick (either preemptive or cooperative),
N * this increments the tick count and checks if any tasks that are blocked
N * for a finite period required removing from a blocked list and placing on
N * a ready list.
N */
Nvoid vTaskIncrementTick( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskIncrementTick( void ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes the calling task from the ready list and places it both
N * on the list of tasks waiting for a particular event, and the
N * list of delayed tasks.  The task will be removed from both lists
N * and replaced on the ready list should either the event occur (and
N * there be no higher priority tasks waiting on the same event) or
N * the delay period expires.
N *
N * @param pxEventList The list containing tasks that are blocked waiting
N * for the event to occur.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait
N * for the event to occur.  This is specified in kernel ticks,the constant
N * portTICK_RATE_MS can be used to convert kernel ticks into a real time
N * period.
N */
Nvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * This function performs nearly the same function as vTaskPlaceOnEventList().
N * The difference being that this function does not permit tasks to block
N * indefinitely, whereas vTaskPlaceOnEventList() does.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes a task from both the specified event list and the list of blocked
N * tasks, and places it on a ready queue.
N *
N * xTaskRemoveFromEventList () will be called if either an event occurs to
N * unblock a task, or the block timeout period expires.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
Nsigned portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList ) PRIVILEGED_FUNCTION;
Xsigned long xTaskRemoveFromEventList( const xList * const pxEventList ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Sets the pointer to the current TCB to the TCB of the highest priority task
N * that is ready to run.
N */
Nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSwitchContext( void ) ;
N
N/*
N * Return the handle of the calling task.
N */
NxTaskHandle xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;
XxTaskHandle xTaskGetCurrentTaskHandle( void ) ;
N
N/*
N * Capture the current time status for future reference.
N */
Nvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) PRIVILEGED_FUNCTION;
Xvoid vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;
N
N/*
N * Compare the time status now with that previously captured to see if the
N * timeout has expired.
N */
NportBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) PRIVILEGED_FUNCTION;
Xlong xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;
N
N/*
N * Shortcut used by the queue implementation to prevent unnecessary call to
N * taskYIELD();
N */
Nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskMissedYield( void ) ;
N
N/*
N * Returns the scheduler state as taskSCHEDULER_RUNNING,
N * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.
N */
NportBASE_TYPE xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;
Xlong xTaskGetSchedulerState( void ) ;
N
N/*
N * Raises the priority of the mutex holder to that of the calling task should
N * the mutex holder have a priority less than the calling task.
N */
Nvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Set the priority of a task back to its proper priority in the case that it
N * inherited a higher priority while it was holding a semaphore.
N */
Nvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;
N
N/*
N * Generic version of the task creation function which is in turn called by the
N * xTaskCreate() and xTaskCreateRestricted() macros.
N */
Nsigned portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions ) PRIVILEGED_FUNCTION;
Xsigned long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;
N
N/*
N * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.
N */
Nunsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask );
Xunsigned long uxTaskGetTaskNumber( xTaskHandle xTask );
N
N/*
N * Set the uxTCBNumber of the task referenced by the xTask parameter to
N * ucHandle.
N */
Nvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle );
Xvoid vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );
N
N/*
N * If tickless mode is being used, or a low power mode is implemented, then
N * the tick interrupt will not execute during idle periods.  When this is the
N * case, the tick count value maintained by the scheduler needs to be kept up
N * to date with the actual execution time by being skipped forward by the by
N * a time equal to the idle period.
N */
Nvoid vTaskStepTick( portTickType xTicksToJump );
N
N/*
N * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port
N * specific sleep function to determine if it is ok to proceed with the sleep,
N * and if it is ok to proceed, if it is ok to sleep indefinitely.
N *
N * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only
N * called with the scheduler suspended, not from within a critical section.  It
N * is therefore possible for an interrupt to request a context switch between
N * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being
N * entered.  eTaskConfirmSleepModeStatus() should be called from a short
N * critical section between the timer being stopped and the sleep mode being
N * entered to ensure it is ok to proceed into the sleep mode.
N */
NeSleepModeStatus eTaskConfirmSleepModeStatus( void );
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TASK_H */
N
N
N
L 82 "..\free_rtos\timers.c" 2
N#include "queue.h"
L 1 "..\free_rtos\queue.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef QUEUE_H
N#define QUEUE_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h" must appear in source files before "include queue.h"
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N#include "mpu_wrappers.h"
N
N/**
N * Type by which queues are referenced.  For example, a call to xQueueCreate()
N * returns an xQueueHandle variable that can then be used as a parameter to
N * xQueueSend(), xQueueReceive(), etc.
N */
Ntypedef void * xQueueHandle;
N
N/**
N * Type by which queue sets are referenced.  For example, a call to
N * xQueueCreateSet() returns an xQueueSet variable that can then be used as a
N * parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc.
N */
Ntypedef void * xQueueSetHandle;
N
N/**
N * Queue sets can contain both queues and semaphores, so the
N * xQueueSetMemberHandle is defined as a type to be used where a parameter or
N * return value can be either an xQueueHandle or an xSemaphoreHandle.
N */
Ntypedef void * xQueueSetMemberHandle;
N
N/* For internal use only. */
N#define	queueSEND_TO_BACK	( 0 )
N#define	queueSEND_TO_FRONT	( 1 )
N
N/* For internal use only.  These definitions *must* match those in queue.c. */
N#define queueQUEUE_TYPE_BASE				( 0U )
N#define queueQUEUE_TYPE_SET					( 0U )
N#define queueQUEUE_TYPE_MUTEX 				( 1U )
N#define queueQUEUE_TYPE_COUNTING_SEMAPHORE	( 2U )
N#define queueQUEUE_TYPE_BINARY_SEMAPHORE	( 3U )
N#define queueQUEUE_TYPE_RECURSIVE_MUTEX		( 4U )
N
N/**
N * queue. h
N * <pre>
N xQueueHandle xQueueCreate(
N							  unsigned portBASE_TYPE uxQueueLength,
N							  unsigned portBASE_TYPE uxItemSize
N						  );
N * </pre>
N *
N * Creates a new queue instance.  This allocates the storage required by the
N * new queue and returns a handle for the queue.
N *
N * @param uxQueueLength The maximum number of items that the queue can contain.
N *
N * @param uxItemSize The number of bytes each item in the queue will require.
N * Items are queued by copy, not by reference, so this is the number of bytes
N * that will be copied for each posted item.  Each item on the queue must be
N * the same size.
N *
N * @return If the queue is successfully create then a handle to the newly
N * created queue is returned.  If the queue cannot be created then 0 is
N * returned.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N };
N
N void vATask( void *pvParameters )
N {
N xQueueHandle xQueue1, xQueue2;
N
N	// Create a queue capable of containing 10 unsigned long values.
N	xQueue1 = xQueueCreate( 10, sizeof( unsigned long ) );
N	if( xQueue1 == 0 )
N	{
N		// Queue was not created and must not be used.
N	}
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
N	if( xQueue2 == 0 )
N	{
N		// Queue was not created and must not be used.
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueCreate xQueueCreate
N * \ingroup QueueManagement
N */
N#define xQueueCreate( uxQueueLength, uxItemSize ) xQueueGenericCreate( uxQueueLength, uxItemSize, queueQUEUE_TYPE_BASE )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSendToToFront(
N								   xQueueHandle	xQueue,
N								   const void	*	pvItemToQueue,
N								   portTickType	xTicksToWait
N							   );
N * </pre>
N *
N * This is a macro that calls xQueueGenericSend().
N *
N * Post an item to the front of a queue.  The item is queued by copy, not by
N * reference.  This function must not be called from an interrupt service
N * routine.  See xQueueSendFromISR () for an alternative which may be used
N * in an ISR.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for space to become available on the queue, should it already
N * be full.  The call will return immediately if this is set to 0 and the
N * queue is full.  The time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N *
N * @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N unsigned long ulVar = 10UL;
N
N void vATask( void *pvParameters )
N {
N xQueueHandle xQueue1, xQueue2;
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 unsigned long values.
N	xQueue1 = xQueueCreate( 10, sizeof( unsigned long ) );
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
N
N	// ...
N
N	if( xQueue1 != 0 )
N	{
N		// Send an unsigned long.  Wait for 10 ticks for space to become
N		// available if necessary.
N		if( xQueueSendToFront( xQueue1, ( void * ) &ulVar, ( portTickType ) 10 ) != pdPASS )
N		{
N			// Failed to post the message, even after 10 ticks.
N		}
N	}
N
N	if( xQueue2 != 0 )
N	{
N		// Send a pointer to a struct AMessage object.  Don't block if the
N		// queue is already full.
N		pxMessage = & xMessage;
N		xQueueSendToFront( xQueue2, ( void * ) &pxMessage, ( portTickType ) 0 );
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueSend xQueueSend
N * \ingroup QueueManagement
N */
N#define xQueueSendToFront( xQueue, pvItemToQueue, xTicksToWait ) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSendToBack(
N								   xQueueHandle	xQueue,
N								   const	void	*	pvItemToQueue,
N								   portTickType	xTicksToWait
N							   );
N * </pre>
N *
N * This is a macro that calls xQueueGenericSend().
N *
N * Post an item to the back of a queue.  The item is queued by copy, not by
N * reference.  This function must not be called from an interrupt service
N * routine.  See xQueueSendFromISR () for an alternative which may be used
N * in an ISR.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for space to become available on the queue, should it already
N * be full.  The call will return immediately if this is set to 0 and the queue
N * is full.  The  time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N *
N * @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N unsigned long ulVar = 10UL;
N
N void vATask( void *pvParameters )
N {
N xQueueHandle xQueue1, xQueue2;
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 unsigned long values.
N	xQueue1 = xQueueCreate( 10, sizeof( unsigned long ) );
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
N
N	// ...
N
N	if( xQueue1 != 0 )
N	{
N		// Send an unsigned long.  Wait for 10 ticks for space to become
N		// available if necessary.
N		if( xQueueSendToBack( xQueue1, ( void * ) &ulVar, ( portTickType ) 10 ) != pdPASS )
N		{
N			// Failed to post the message, even after 10 ticks.
N		}
N	}
N
N	if( xQueue2 != 0 )
N	{
N		// Send a pointer to a struct AMessage object.  Don't block if the
N		// queue is already full.
N		pxMessage = & xMessage;
N		xQueueSendToBack( xQueue2, ( void * ) &pxMessage, ( portTickType ) 0 );
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueSend xQueueSend
N * \ingroup QueueManagement
N */
N#define xQueueSendToBack( xQueue, pvItemToQueue, xTicksToWait ) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSend(
N							  xQueueHandle xQueue,
N							  const void * pvItemToQueue,
N							  portTickType xTicksToWait
N						 );
N * </pre>
N *
N * This is a macro that calls xQueueGenericSend().  It is included for
N * backward compatibility with versions of FreeRTOS.org that did not
N * include the xQueueSendToFront() and xQueueSendToBack() macros.  It is
N * equivalent to xQueueSendToBack().
N *
N * Post an item on a queue.  The item is queued by copy, not by reference.
N * This function must not be called from an interrupt service routine.
N * See xQueueSendFromISR () for an alternative which may be used in an ISR.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for space to become available on the queue, should it already
N * be full.  The call will return immediately if this is set to 0 and the
N * queue is full.  The time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N *
N * @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N unsigned long ulVar = 10UL;
N
N void vATask( void *pvParameters )
N {
N xQueueHandle xQueue1, xQueue2;
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 unsigned long values.
N	xQueue1 = xQueueCreate( 10, sizeof( unsigned long ) );
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
N
N	// ...
N
N	if( xQueue1 != 0 )
N	{
N		// Send an unsigned long.  Wait for 10 ticks for space to become
N		// available if necessary.
N		if( xQueueSend( xQueue1, ( void * ) &ulVar, ( portTickType ) 10 ) != pdPASS )
N		{
N			// Failed to post the message, even after 10 ticks.
N		}
N	}
N
N	if( xQueue2 != 0 )
N	{
N		// Send a pointer to a struct AMessage object.  Don't block if the
N		// queue is already full.
N		pxMessage = & xMessage;
N		xQueueSend( xQueue2, ( void * ) &pxMessage, ( portTickType ) 0 );
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueSend xQueueSend
N * \ingroup QueueManagement
N */
N#define xQueueSend( xQueue, pvItemToQueue, xTicksToWait ) xQueueGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
N
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueGenericSend(
N									xQueueHandle xQueue,
N									const void * pvItemToQueue,
N									portTickType xTicksToWait
N									portBASE_TYPE xCopyPosition
N								);
N * </pre>
N *
N * It is preferred that the macros xQueueSend(), xQueueSendToFront() and
N * xQueueSendToBack() are used in place of calling this function directly.
N *
N * Post an item on a queue.  The item is queued by copy, not by reference.
N * This function must not be called from an interrupt service routine.
N * See xQueueSendFromISR () for an alternative which may be used in an ISR.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for space to become available on the queue, should it already
N * be full.  The call will return immediately if this is set to 0 and the
N * queue is full.  The time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N *
N * @param xCopyPosition Can take the value queueSEND_TO_BACK to place the
N * item at the back of the queue, or queueSEND_TO_FRONT to place the item
N * at the front of the queue (for high priority messages).
N *
N * @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N unsigned long ulVar = 10UL;
N
N void vATask( void *pvParameters )
N {
N xQueueHandle xQueue1, xQueue2;
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 unsigned long values.
N	xQueue1 = xQueueCreate( 10, sizeof( unsigned long ) );
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
N
N	// ...
N
N	if( xQueue1 != 0 )
N	{
N		// Send an unsigned long.  Wait for 10 ticks for space to become
N		// available if necessary.
N		if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( portTickType ) 10, queueSEND_TO_BACK ) != pdPASS )
N		{
N			// Failed to post the message, even after 10 ticks.
N		}
N	}
N
N	if( xQueue2 != 0 )
N	{
N		// Send a pointer to a struct AMessage object.  Don't block if the
N		// queue is already full.
N		pxMessage = & xMessage;
N		xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( portTickType ) 0, queueSEND_TO_BACK );
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueSend xQueueSend
N * \ingroup QueueManagement
N */
Nsigned portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition );
Xsigned long xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition );
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueuePeek(
N							 xQueueHandle xQueue,
N							 void *pvBuffer,
N							 portTickType xTicksToWait
N						 );</pre>
N *
N * This is a macro that calls the xQueueGenericReceive() function.
N *
N * Receive an item from a queue without removing the item from the queue.
N * The item is received by copy so a buffer of adequate size must be
N * provided.  The number of bytes copied into the buffer was defined when
N * the queue was created.
N *
N * Successfully received items remain on the queue so will be returned again
N * by the next call, or a call to xQueueReceive().
N *
N * This macro must not be used in an interrupt service routine.
N *
N * @param xQueue The handle to the queue from which the item is to be
N * received.
N *
N * @param pvBuffer Pointer to the buffer into which the received item will
N * be copied.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for an item to receive should the queue be empty at the time
N * of the call.	 The time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N * xQueuePeek() will return immediately if xTicksToWait is 0 and the queue
N * is empty.
N *
N * @return pdTRUE if an item was successfully received from the queue,
N * otherwise pdFALSE.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N xQueueHandle xQueue;
N
N // Task to create a queue and post a value.
N void vATask( void *pvParameters )
N {
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
N	if( xQueue == 0 )
N	{
N		// Failed to create the queue.
N	}
N
N	// ...
N
N	// Send a pointer to a struct AMessage object.  Don't block if the
N	// queue is already full.
N	pxMessage = & xMessage;
N	xQueueSend( xQueue, ( void * ) &pxMessage, ( portTickType ) 0 );
N
N	// ... Rest of task code.
N }
N
N // Task to peek the data from the queue.
N void vADifferentTask( void *pvParameters )
N {
N struct AMessage *pxRxedMessage;
N
N	if( xQueue != 0 )
N	{
N		// Peek a message on the created queue.  Block for 10 ticks if a
N		// message is not immediately available.
N		if( xQueuePeek( xQueue, &( pxRxedMessage ), ( portTickType ) 10 ) )
N		{
N			// pcRxedMessage now points to the struct AMessage variable posted
N			// by vATask, but the item still remains on the queue.
N		}
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueReceive xQueueReceive
N * \ingroup QueueManagement
N */
N#define xQueuePeek( xQueue, pvBuffer, xTicksToWait ) xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueReceive(
N								 xQueueHandle xQueue,
N								 void *pvBuffer,
N								 portTickType xTicksToWait
N							);</pre>
N *
N * This is a macro that calls the xQueueGenericReceive() function.
N *
N * Receive an item from a queue.  The item is received by copy so a buffer of
N * adequate size must be provided.  The number of bytes copied into the buffer
N * was defined when the queue was created.
N *
N * Successfully received items are removed from the queue.
N *
N * This function must not be used in an interrupt service routine.  See
N * xQueueReceiveFromISR for an alternative that can.
N *
N * @param xQueue The handle to the queue from which the item is to be
N * received.
N *
N * @param pvBuffer Pointer to the buffer into which the received item will
N * be copied.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for an item to receive should the queue be empty at the time
N * of the call.	 xQueueReceive() will return immediately if xTicksToWait
N * is zero and the queue is empty.  The time is defined in tick periods so the
N * constant portTICK_RATE_MS should be used to convert to real time if this is
N * required.
N *
N * @return pdTRUE if an item was successfully received from the queue,
N * otherwise pdFALSE.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N xQueueHandle xQueue;
N
N // Task to create a queue and post a value.
N void vATask( void *pvParameters )
N {
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
N	if( xQueue == 0 )
N	{
N		// Failed to create the queue.
N	}
N
N	// ...
N
N	// Send a pointer to a struct AMessage object.  Don't block if the
N	// queue is already full.
N	pxMessage = & xMessage;
N	xQueueSend( xQueue, ( void * ) &pxMessage, ( portTickType ) 0 );
N
N	// ... Rest of task code.
N }
N
N // Task to receive from the queue.
N void vADifferentTask( void *pvParameters )
N {
N struct AMessage *pxRxedMessage;
N
N	if( xQueue != 0 )
N	{
N		// Receive a message on the created queue.  Block for 10 ticks if a
N		// message is not immediately available.
N		if( xQueueReceive( xQueue, &( pxRxedMessage ), ( portTickType ) 10 ) )
N		{
N			// pcRxedMessage now points to the struct AMessage variable posted
N			// by vATask.
N		}
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueReceive xQueueReceive
N * \ingroup QueueManagement
N */
N#define xQueueReceive( xQueue, pvBuffer, xTicksToWait ) xQueueGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )
N
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueGenericReceive(
N									   xQueueHandle	xQueue,
N									   void	*pvBuffer,
N									   portTickType	xTicksToWait
N									   portBASE_TYPE	xJustPeek
N									);</pre>
N *
N * It is preferred that the macro xQueueReceive() be used rather than calling
N * this function directly.
N *
N * Receive an item from a queue.  The item is received by copy so a buffer of
N * adequate size must be provided.  The number of bytes copied into the buffer
N * was defined when the queue was created.
N *
N * This function must not be used in an interrupt service routine.  See
N * xQueueReceiveFromISR for an alternative that can.
N *
N * @param xQueue The handle to the queue from which the item is to be
N * received.
N *
N * @param pvBuffer Pointer to the buffer into which the received item will
N * be copied.
N *
N * @param xTicksToWait The maximum amount of time the task should block
N * waiting for an item to receive should the queue be empty at the time
N * of the call.	 The time is defined in tick periods so the constant
N * portTICK_RATE_MS should be used to convert to real time if this is required.
N * xQueueGenericReceive() will return immediately if the queue is empty and
N * xTicksToWait is 0.
N *
N * @param xJustPeek When set to true, the item received from the queue is not
N * actually removed from the queue - meaning a subsequent call to
N * xQueueReceive() will return the same item.  When set to false, the item
N * being received from the queue is also removed from the queue.
N *
N * @return pdTRUE if an item was successfully received from the queue,
N * otherwise pdFALSE.
N *
N * Example usage:
N   <pre>
N struct AMessage
N {
N	char ucMessageID;
N	char ucData[ 20 ];
N } xMessage;
N
N xQueueHandle xQueue;
N
N // Task to create a queue and post a value.
N void vATask( void *pvParameters )
N {
N struct AMessage *pxMessage;
N
N	// Create a queue capable of containing 10 pointers to AMessage structures.
N	// These should be passed by pointer as they contain a lot of data.
N	xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
N	if( xQueue == 0 )
N	{
N		// Failed to create the queue.
N	}
N
N	// ...
N
N	// Send a pointer to a struct AMessage object.  Don't block if the
N	// queue is already full.
N	pxMessage = & xMessage;
N	xQueueSend( xQueue, ( void * ) &pxMessage, ( portTickType ) 0 );
N
N	// ... Rest of task code.
N }
N
N // Task to receive from the queue.
N void vADifferentTask( void *pvParameters )
N {
N struct AMessage *pxRxedMessage;
N
N	if( xQueue != 0 )
N	{
N		// Receive a message on the created queue.  Block for 10 ticks if a
N		// message is not immediately available.
N		if( xQueueGenericReceive( xQueue, &( pxRxedMessage ), ( portTickType ) 10 ) )
N		{
N			// pcRxedMessage now points to the struct AMessage variable posted
N			// by vATask.
N		}
N	}
N
N	// ... Rest of task code.
N }
N </pre>
N * \defgroup xQueueReceive xQueueReceive
N * \ingroup QueueManagement
N */
Nsigned portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeek );
Xsigned long xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, long xJustPeek );
N
N/**
N * queue. h
N * <pre>unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle xQueue );</pre>
N *
N * Return the number of messages stored in a queue.
N *
N * @param xQueue A handle to the queue being queried.
N *
N * @return The number of messages available in the queue.
N *
N * \page uxQueueMessagesWaiting uxQueueMessagesWaiting
N * \ingroup QueueManagement
N */
Nunsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle xQueue );
Xunsigned long uxQueueMessagesWaiting( const xQueueHandle xQueue );
N
N/**
N * queue. h
N * <pre>void vQueueDelete( xQueueHandle xQueue );</pre>
N *
N * Delete a queue - freeing all the memory allocated for storing of items
N * placed on the queue.
N *
N * @param xQueue A handle to the queue to be deleted.
N *
N * \page vQueueDelete vQueueDelete
N * \ingroup QueueManagement
N */
Nvoid vQueueDelete( xQueueHandle xQueue );
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSendToFrontFromISR(
N										 xQueueHandle xQueue,
N										 const void *pvItemToQueue,
N										 portBASE_TYPE *pxHigherPriorityTaskWoken
N									  );
N </pre>
N *
N * This is a macro that calls xQueueGenericSendFromISR().
N *
N * Post an item to the front of a queue.  It is safe to use this macro from
N * within an interrupt service routine.
N *
N * Items are queued by copy not reference so it is preferable to only
N * queue small items, especially when called from an ISR.  In most cases
N * it would be preferable to store a pointer to the item being queued.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param pxHigherPriorityTaskWoken xQueueSendToFrontFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task
N * to unblock, and the unblocked task has a priority higher than the currently
N * running task.  If xQueueSendToFromFromISR() sets this value to pdTRUE then
N * a context switch should be requested before the interrupt is exited.
N *
N * @return pdTRUE if the data was successfully sent to the queue, otherwise
N * errQUEUE_FULL.
N *
N * Example usage for buffered IO (where the ISR can obtain more than one value
N * per call):
N   <pre>
N void vBufferISR( void )
N {
N char cIn;
N portBASE_TYPE xHigherPrioritTaskWoken;
N
N	// We have not woken a task at the start of the ISR.
N	xHigherPriorityTaskWoken = pdFALSE;
N
N	// Loop until the buffer is empty.
N	do
N	{
N		// Obtain a byte from the buffer.
N		cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );
N
N		// Post the byte.
N		xQueueSendToFrontFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWoken );
N
N	} while( portINPUT_BYTE( BUFFER_COUNT ) );
N
N	// Now the buffer is empty we can switch context if necessary.
N	if( xHigherPriorityTaskWoken )
N	{
N		taskYIELD ();
N	}
N }
N </pre>
N *
N * \defgroup xQueueSendFromISR xQueueSendFromISR
N * \ingroup QueueManagement
N */
N#define xQueueSendToFrontFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken ) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_FRONT )
N
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSendToBackFromISR(
N										 xQueueHandle xQueue,
N										 const void *pvItemToQueue,
N										 portBASE_TYPE *pxHigherPriorityTaskWoken
N									  );
N </pre>
N *
N * This is a macro that calls xQueueGenericSendFromISR().
N *
N * Post an item to the back of a queue.  It is safe to use this macro from
N * within an interrupt service routine.
N *
N * Items are queued by copy not reference so it is preferable to only
N * queue small items, especially when called from an ISR.  In most cases
N * it would be preferable to store a pointer to the item being queued.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param pxHigherPriorityTaskWoken xQueueSendToBackFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task
N * to unblock, and the unblocked task has a priority higher than the currently
N * running task.  If xQueueSendToBackFromISR() sets this value to pdTRUE then
N * a context switch should be requested before the interrupt is exited.
N *
N * @return pdTRUE if the data was successfully sent to the queue, otherwise
N * errQUEUE_FULL.
N *
N * Example usage for buffered IO (where the ISR can obtain more than one value
N * per call):
N   <pre>
N void vBufferISR( void )
N {
N char cIn;
N portBASE_TYPE xHigherPriorityTaskWoken;
N
N	// We have not woken a task at the start of the ISR.
N	xHigherPriorityTaskWoken = pdFALSE;
N
N	// Loop until the buffer is empty.
N	do
N	{
N		// Obtain a byte from the buffer.
N		cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );
N
N		// Post the byte.
N		xQueueSendToBackFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWoken );
N
N	} while( portINPUT_BYTE( BUFFER_COUNT ) );
N
N	// Now the buffer is empty we can switch context if necessary.
N	if( xHigherPriorityTaskWoken )
N	{
N		taskYIELD ();
N	}
N }
N </pre>
N *
N * \defgroup xQueueSendFromISR xQueueSendFromISR
N * \ingroup QueueManagement
N */
N#define xQueueSendToBackFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken ) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueSendFromISR(
N									 xQueueHandle xQueue,
N									 const void *pvItemToQueue,
N									 portBASE_TYPE *pxHigherPriorityTaskWoken
N								);
N </pre>
N *
N * This is a macro that calls xQueueGenericSendFromISR().  It is included
N * for backward compatibility with versions of FreeRTOS.org that did not
N * include the xQueueSendToBackFromISR() and xQueueSendToFrontFromISR()
N * macros.
N *
N * Post an item to the back of a queue.  It is safe to use this function from
N * within an interrupt service routine.
N *
N * Items are queued by copy not reference so it is preferable to only
N * queue small items, especially when called from an ISR.  In most cases
N * it would be preferable to store a pointer to the item being queued.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param pxHigherPriorityTaskWoken xQueueSendFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task
N * to unblock, and the unblocked task has a priority higher than the currently
N * running task.  If xQueueSendFromISR() sets this value to pdTRUE then
N * a context switch should be requested before the interrupt is exited.
N *
N * @return pdTRUE if the data was successfully sent to the queue, otherwise
N * errQUEUE_FULL.
N *
N * Example usage for buffered IO (where the ISR can obtain more than one value
N * per call):
N   <pre>
N void vBufferISR( void )
N {
N char cIn;
N portBASE_TYPE xHigherPriorityTaskWoken;
N
N	// We have not woken a task at the start of the ISR.
N	xHigherPriorityTaskWoken = pdFALSE;
N
N	// Loop until the buffer is empty.
N	do
N	{
N		// Obtain a byte from the buffer.
N		cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );
N
N		// Post the byte.
N		xQueueSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWoken );
N
N	} while( portINPUT_BYTE( BUFFER_COUNT ) );
N
N	// Now the buffer is empty we can switch context if necessary.
N	if( xHigherPriorityTaskWoken )
N	{
N		// Actual macro used here is port specific.
N		taskYIELD_FROM_ISR ();
N	}
N }
N </pre>
N *
N * \defgroup xQueueSendFromISR xQueueSendFromISR
N * \ingroup QueueManagement
N */
N#define xQueueSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken ) xQueueGenericSendFromISR( ( xQueue ), ( pvItemToQueue ), ( pxHigherPriorityTaskWoken ), queueSEND_TO_BACK )
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueGenericSendFromISR(
N										   xQueueHandle		xQueue,
N										   const	void	*pvItemToQueue,
N										   portBASE_TYPE	*pxHigherPriorityTaskWoken,
N										   portBASE_TYPE	xCopyPosition
N									   );
N </pre>
N *
N * It is preferred that the macros xQueueSendFromISR(),
N * xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place
N * of calling this function directly.
N *
N * Post an item on a queue.  It is safe to use this function from within an
N * interrupt service routine.
N *
N * Items are queued by copy not reference so it is preferable to only
N * queue small items, especially when called from an ISR.  In most cases
N * it would be preferable to store a pointer to the item being queued.
N *
N * @param xQueue The handle to the queue on which the item is to be posted.
N *
N * @param pvItemToQueue A pointer to the item that is to be placed on the
N * queue.  The size of the items the queue will hold was defined when the
N * queue was created, so this many bytes will be copied from pvItemToQueue
N * into the queue storage area.
N *
N * @param pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task
N * to unblock, and the unblocked task has a priority higher than the currently
N * running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then
N * a context switch should be requested before the interrupt is exited.
N *
N * @param xCopyPosition Can take the value queueSEND_TO_BACK to place the
N * item at the back of the queue, or queueSEND_TO_FRONT to place the item
N * at the front of the queue (for high priority messages).
N *
N * @return pdTRUE if the data was successfully sent to the queue, otherwise
N * errQUEUE_FULL.
N *
N * Example usage for buffered IO (where the ISR can obtain more than one value
N * per call):
N   <pre>
N void vBufferISR( void )
N {
N char cIn;
N portBASE_TYPE xHigherPriorityTaskWokenByPost;
N
N	// We have not woken a task at the start of the ISR.
N	xHigherPriorityTaskWokenByPost = pdFALSE;
N
N	// Loop until the buffer is empty.
N	do
N	{
N		// Obtain a byte from the buffer.
N		cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );
N
N		// Post each byte.
N		xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );
N
N	} while( portINPUT_BYTE( BUFFER_COUNT ) );
N
N	// Now the buffer is empty we can switch context if necessary.  Note that the
N	// name of the yield function required is port specific.
N	if( xHigherPriorityTaskWokenByPost )
N	{
N		taskYIELD_YIELD_FROM_ISR();
N	}
N }
N </pre>
N *
N * \defgroup xQueueSendFromISR xQueueSendFromISR
N * \ingroup QueueManagement
N */
Nsigned portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition );
Xsigned long xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed long *pxHigherPriorityTaskWoken, long xCopyPosition );
N
N/**
N * queue. h
N * <pre>
N portBASE_TYPE xQueueReceiveFromISR(
N									   xQueueHandle	xQueue,
N									   void	*pvBuffer,
N									   portBASE_TYPE *pxTaskWoken
N								   );
N * </pre>
N *
N * Receive an item from a queue.  It is safe to use this function from within an
N * interrupt service routine.
N *
N * @param xQueue The handle to the queue from which the item is to be
N * received.
N *
N * @param pvBuffer Pointer to the buffer into which the received item will
N * be copied.
N *
N * @param pxTaskWoken A task may be blocked waiting for space to become
N * available on the queue.  If xQueueReceiveFromISR causes such a task to
N * unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will
N * remain unchanged.
N *
N * @return pdTRUE if an item was successfully received from the queue,
N * otherwise pdFALSE.
N *
N * Example usage:
N   <pre>
N
N xQueueHandle xQueue;
N
N // Function to create a queue and post some values.
N void vAFunction( void *pvParameters )
N {
N char cValueToPost;
N const portTickType xBlockTime = ( portTickType )0xff;
N
N	// Create a queue capable of containing 10 characters.
N	xQueue = xQueueCreate( 10, sizeof( char ) );
N	if( xQueue == 0 )
N	{
N		// Failed to create the queue.
N	}
N
N	// ...
N
N	// Post some characters that will be used within an ISR.  If the queue
N	// is full then this task will block for xBlockTime ticks.
N	cValueToPost = 'a';
N	xQueueSend( xQueue, ( void * ) &cValueToPost, xBlockTime );
N	cValueToPost = 'b';
N	xQueueSend( xQueue, ( void * ) &cValueToPost, xBlockTime );
N
N	// ... keep posting characters ... this task may block when the queue
N	// becomes full.
N
N	cValueToPost = 'c';
N	xQueueSend( xQueue, ( void * ) &cValueToPost, xBlockTime );
N }
N
N // ISR that outputs all the characters received on the queue.
N void vISR_Routine( void )
N {
N portBASE_TYPE xTaskWokenByReceive = pdFALSE;
N char cRxedChar;
N
N	while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )
N	{
N		// A character was received.  Output the character now.
N		vOutputCharacter( cRxedChar );
N
N		// If removing the character from the queue woke the task that was
N		// posting onto the queue cTaskWokenByReceive will have been set to
N		// pdTRUE.  No matter how many times this loop iterates only one
N		// task will be woken.
N	}
N
N	if( cTaskWokenByPost != ( char ) pdFALSE;
N	{
N		taskYIELD ();
N	}
N }
N </pre>
N * \defgroup xQueueReceiveFromISR xQueueReceiveFromISR
N * \ingroup QueueManagement
N */
Nsigned portBASE_TYPE xQueueReceiveFromISR( xQueueHandle xQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken );
Xsigned long xQueueReceiveFromISR( xQueueHandle xQueue, void * const pvBuffer, signed long *pxHigherPriorityTaskWoken );
N
N/*
N * Utilities to query queues that are safe to use from an ISR.  These utilities
N * should be used only from witin an ISR, or within a critical section.
N */
Nsigned portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue );
Xsigned long xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue );
Nsigned portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle xQueue );
Xsigned long xQueueIsQueueFullFromISR( const xQueueHandle xQueue );
Nunsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue );
Xunsigned long uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue );
N
N
N/*
N * xQueueAltGenericSend() is an alternative version of xQueueGenericSend().
N * Likewise xQueueAltGenericReceive() is an alternative version of
N * xQueueGenericReceive().
N *
N * The source code that implements the alternative (Alt) API is much
N * simpler	because it executes everything from within a critical section.
N * This is	the approach taken by many other RTOSes, but FreeRTOS.org has the
N * preferred fully featured API too.  The fully featured API has more
N * complex	code that takes longer to execute, but makes much less use of
N * critical sections.  Therefore the alternative API sacrifices interrupt
N * responsiveness to gain execution speed, whereas the fully featured API
N * sacrifices execution speed to ensure better interrupt responsiveness.
N */
Nsigned portBASE_TYPE xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition );
Xsigned long xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition );
Nsigned portBASE_TYPE xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking );
Xsigned long xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, long xJustPeeking );
N#define xQueueAltSendToFront( xQueue, pvItemToQueue, xTicksToWait ) xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_FRONT )
N#define xQueueAltSendToBack( xQueue, pvItemToQueue, xTicksToWait ) xQueueAltGenericSend( ( xQueue ), ( pvItemToQueue ), ( xTicksToWait ), queueSEND_TO_BACK )
N#define xQueueAltReceive( xQueue, pvBuffer, xTicksToWait ) xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdFALSE )
N#define xQueueAltPeek( xQueue, pvBuffer, xTicksToWait ) xQueueAltGenericReceive( ( xQueue ), ( pvBuffer ), ( xTicksToWait ), pdTRUE )
N
N/*
N * The functions defined above are for passing data to and from tasks.  The
N * functions below are the equivalents for passing data to and from
N * co-routines.
N *
N * These functions are called from the co-routine macro implementation and
N * should not be called directly from application code.  Instead use the macro
N * wrappers defined within croutine.h.
N */
Nsigned portBASE_TYPE xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed portBASE_TYPE xCoRoutinePreviouslyWoken );
Xsigned long xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed long xCoRoutinePreviouslyWoken );
Nsigned portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed portBASE_TYPE *pxTaskWoken );
Xsigned long xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed long *pxTaskWoken );
Nsigned portBASE_TYPE xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xTicksToWait );
Xsigned long xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xTicksToWait );
Nsigned portBASE_TYPE xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait );
Xsigned long xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait );
N
N/*
N * For internal use only.  Use xSemaphoreCreateMutex(),
N * xSemaphoreCreateCounting() or xSemaphoreGetMutexHolder() instead of calling
N * these functions directly.
N */
NxQueueHandle xQueueCreateMutex( unsigned char ucQueueType );
NxQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount );
XxQueueHandle xQueueCreateCountingSemaphore( unsigned long uxCountValue, unsigned long uxInitialCount );
Nvoid* xQueueGetMutexHolder( xQueueHandle xSemaphore );
N
N/*
N * For internal use only.  Use xSemaphoreTakeMutexRecursive() or
N * xSemaphoreGiveMutexRecursive() instead of calling these functions directly.
N */
NportBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime );
Xlong xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime );
NportBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex );
Xlong xQueueGiveMutexRecursive( xQueueHandle pxMutex );
N
N/*
N * Reset a queue back to its original empty state.  pdPASS is returned if the
N * queue is successfully reset.  pdFAIL is returned if the queue could not be
N * reset because there are tasks blocked on the queue waiting to either
N * receive from the queue or send to the queue.
N */
N#define xQueueReset( xQueue ) xQueueGenericReset( xQueue, pdFALSE )
N
N/*
N * The registry is provided as a means for kernel aware debuggers to
N * locate queues, semaphores and mutexes.  Call vQueueAddToRegistry() add
N * a queue, semaphore or mutex handle to the registry if you want the handle
N * to be available to a kernel aware debugger.  If you are not using a kernel
N * aware debugger then this function can be ignored.
N *
N * configQUEUE_REGISTRY_SIZE defines the maximum number of handles the
N * registry can hold.  configQUEUE_REGISTRY_SIZE must be greater than 0
N * within FreeRTOSConfig.h for the registry to be available.  Its value
N * does not effect the number of queues, semaphores and mutexes that can be
N * created - just the number that the registry can hold.
N *
N * @param xQueue The handle of the queue being added to the registry.  This
N * is the handle returned by a call to xQueueCreate().  Semaphore and mutex
N * handles can also be passed in here.
N *
N * @param pcName The name to be associated with the handle.  This is the
N * name that the kernel aware debugger will display.
N */
N#if configQUEUE_REGISTRY_SIZE > 0U
X#if 0U > 0U
S	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcName );
N#endif
N
N/*
N * Generic version of the queue creation function, which is in turn called by
N * any queue, semaphore or mutex creation function or macro.
N */
NxQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType );
XxQueueHandle xQueueGenericCreate( unsigned long uxQueueLength, unsigned long uxItemSize, unsigned char ucQueueType );
N
N/*
N * Queue sets provide a mechanism to allow a task to block (pend) on a read
N * operation from multiple queues or semaphores simultaneously.
N *
N * See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this
N * function.
N *
N * A queue set must be explicitly created using a call to xQueueCreateSet()
N * before it can be used.  Once created, standard FreeRTOS queues and semaphores
N * can be added to the set using calls to xQueueAddToSet().
N * xQueueSelectFromSet() is then used to determine which, if any, of the queues
N * or semaphores contained in the set is in a state where a queue read or
N * semaphore take operation would be successful.
N *
N * Note 1:  See the documentation on http://wwwFreeRTOS.org/RTOS-queue-sets.html
N * for reasons why queue sets are very rarely needed in practice as there are 
N * simpler methods of blocking on multiple objects.
N *
N * Note 2:  Blocking on a queue set that contains a mutex will not cause the
N * mutex holder to inherit the priority of the blocked task.
N *
N * Note 3:  An additional 4 bytes of RAM is required for each space in a every
N * queue added to a queue set.  Therefore counting semaphores that have a high
N * maximum count value should not be added to a queue set.
N *
N * Note 4:  A receive (in the case of a queue) or take (in the case of a
N * semaphore) operation must not be performed on a member of a queue set unless
N * a call to xQueueSelectFromSet() has first returned a handle to that set member.
N *
N * @param uxEventQueueLength Queue sets store events that occur on
N * the queues and semaphores contained in the set.  uxEventQueueLength specifies
N * the maximum number of events that can be queued at once.  To be absolutely
N * certain that events are not lost uxEventQueueLength should be set to the
N * total sum of the length of the queues added to the set, where binary
N * semaphores and mutexes have a length of 1, and counting semaphores have a
N * length set by their maximum count value.  Examples:
N *  + If a queue set is to hold a queue of length 5, another queue of length 12,
N *    and a binary semaphore, then uxEventQueueLength should be set to
N *    (5 + 12 + 1), or 18.
N *  + If a queue set is to hold three binary semaphores then uxEventQueueLength
N *    should be set to (1 + 1 + 1 ), or 3.
N *  + If a queue set is to hold a counting semaphore that has a maximum count of
N *    5, and a counting semaphore that has a maximum count of 3, then
N *    uxEventQueueLength should be set to (5 + 3), or 8.
N *
N * @return If the queue set is created successfully then a handle to the created
N * queue set is returned.  Otherwise NULL is returned.
N */
NxQueueSetHandle xQueueCreateSet( unsigned portBASE_TYPE uxEventQueueLength );
XxQueueSetHandle xQueueCreateSet( unsigned long uxEventQueueLength );
N
N/*
N * Adds a queue or semaphore to a queue set that was previously created by a
N * call to xQueueCreateSet().
N *
N * See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this
N * function.
N *
N * Note 1:  A receive (in the case of a queue) or take (in the case of a
N * semaphore) operation must not be performed on a member of a queue set unless
N * a call to xQueueSelectFromSet() has first returned a handle to that set member.
N *
N * @param xQueueOrSemaphore The handle of the queue or semaphore being added to
N * the queue set (cast to an xQueueSetMemberHandle type).
N *
N * @param xQueueSet The handle of the queue set to which the queue or semaphore
N * is being added.
N *
N * @return If the queue or semaphore was successfully added to the queue set
N * then pdPASS is returned.  If the queue could not be successfully added to the
N * queue set because it is already a member of a different queue set then pdFAIL
N * is returned.
N */
NportBASE_TYPE xQueueAddToSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet );
Xlong xQueueAddToSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet );
N
N/*
N * Removes a queue or semaphore from a queue set.  A queue or semaphore can only 
N * be removed from a set if the queue or semaphore is empty.
N *
N * See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this
N * function.
N *
N * @param xQueueOrSemaphore The handle of the queue or semaphore being removed
N * from the queue set (cast to an xQueueSetMemberHandle type).
N *
N * @param xQueueSet The handle of the queue set in which the queue or semaphore
N * is included.
N *
N * @return If the queue or semaphore was successfully removed from the queue set
N * then pdPASS is returned.  If the queue was not in the queue set, or the
N * queue (or semaphore) was not empty, then pdFAIL is returned.
N */
NportBASE_TYPE xQueueRemoveFromSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet );
Xlong xQueueRemoveFromSet( xQueueSetMemberHandle xQueueOrSemaphore, xQueueSetHandle xQueueSet );
N
N/*
N * xQueueSelectFromSet() selects from the members of a queue set a queue or
N * semaphore that either contains data (in the case of a queue) or is available
N * to take (in the case of a semaphore).  xQueueSelectFromSet() effectively
N * allows a task to block (pend) on a read operation on all the queues and
N * semaphores in a queue set simultaneously.
N *
N * See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this
N * function.
N *
N * Note 1:  See the documentation on http://wwwFreeRTOS.org/RTOS-queue-sets.html
N * for reasons why queue sets are very rarely needed in practice as there are 
N * simpler methods of blocking on multiple objects.
N *
N * Note 2:  Blocking on a queue set that contains a mutex will not cause the
N * mutex holder to inherit the priority of the blocked task.
N *
N * Note 3:  A receive (in the case of a queue) or take (in the case of a
N * semaphore) operation must not be performed on a member of a queue set unless
N * a call to xQueueSelectFromSet() has first returned a handle to that set member.
N *
N * @param xQueueSet The queue set on which the task will (potentially) block.
N *
N * @param xBlockTimeTicks The maximum time, in ticks, that the calling task will
N * remain in the Blocked state (with other tasks executing) to wait for a member
N * of the queue set to be ready for a successful queue read or semaphore take
N * operation.
N *
N * @return xQueueSelectFromSet() will return the handle of a queue (cast to
N * a xQueueSetMemberHandle type) contained in the queue set that contains data,
N * or the handle of a semaphore (cast to a xQueueSetMemberHandle type) contained
N * in the queue set that is available, or NULL if no such queue or semaphore
N * exists before before the specified block time expires.
N */
NxQueueSetMemberHandle xQueueSelectFromSet( xQueueSetHandle xQueueSet, portTickType xBlockTimeTicks );
N
N/*
N * A version of xQueueSelectFromSet() that can be used from an ISR.
N */
NxQueueSetMemberHandle xQueueSelectFromSetFromISR( xQueueSetHandle xQueueSet );
N
N/* Not public API functions. */
Nvoid vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait );
NportBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue );
Xlong xQueueGenericReset( xQueueHandle xQueue, long xNewQueue );
Nvoid vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber ) PRIVILEGED_FUNCTION;
Xvoid vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber ) ;
Nunsigned char ucQueueGetQueueType( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
Xunsigned char ucQueueGetQueueType( xQueueHandle xQueue ) ;
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* QUEUE_H */
N
L 83 "..\free_rtos\timers.c" 2
N#include "timers.h"
L 1 "..\free_rtos\timers.h" 1
N/*
N    FreeRTOS V7.4.2 - Copyright (C) 2013 Real Time Engineers Ltd.
N
N    FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
N    http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS tutorial books are available in pdf and paperback.        *
N     *    Complete, revised, and edited pdf reference manuals are also       *
N     *    available.                                                         *
N     *                                                                       *
N     *    Purchasing FreeRTOS documentation will not only help you, by       *
N     *    ensuring you get running as quickly as possible and with an        *
N     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
N     *    the FreeRTOS project to continue with its mission of providing     *
N     *    professional grade, cross platform, de facto standard solutions    *
N     *    for microcontrollers - completely free of charge!                  *
N     *                                                                       *
N     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
N     *                                                                       *
N     *    Thank you for using FreeRTOS, and thank you for your support!      *
N     *                                                                       *
N    ***************************************************************************
N
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
N
N    >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
N    distribute a combined work that includes FreeRTOS without being obliged to
N    provide the source code for proprietary components outside of the FreeRTOS
N    kernel.
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
N    details. You should have received a copy of the GNU General Public License
N    and the FreeRTOS license exception along with FreeRTOS; if not it can be
N    viewed here: http://www.freertos.org/a00114.html and also obtained by
N    writing to Real Time Engineers Ltd., contact details for whom are available
N    on the FreeRTOS WEB site.
N
N    1 tab == 4 spaces!
N
N    ***************************************************************************
N     *                                                                       *
N     *    Having a problem?  Start by reading the FAQ "My application does   *
N     *    not run, what could be wrong?"                                     *
N     *                                                                       *
N     *    http://www.FreeRTOS.org/FAQHelp.html                               *
N     *                                                                       *
N    ***************************************************************************
N
N
N    http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
N    license and Real Time Engineers Ltd. contact details.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, and our new
N    fully thread aware and reentrant UDP/IP stack.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
N    Integrity Systems, who sell the code with commercial support, 
N    indemnification and middleware, under the OpenRTOS brand.
N    
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
N    engineered and independently SIL3 certified version for use in safety and 
N    mission critical applications that require provable dependability.
N*/
N
N
N#ifndef TIMERS_H
N#define TIMERS_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include timers.h"
N#endif
N
N#include "portable.h"
N#include "list.h"
N#include "task.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* IDs for commands that can be sent/received on the timer queue.  These are to
Nbe used solely through the macros that make up the public software timer API,
Nas defined below. */
N#define tmrCOMMAND_START					0
N#define tmrCOMMAND_STOP						1
N#define tmrCOMMAND_CHANGE_PERIOD			2
N#define tmrCOMMAND_DELETE					3
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N /**
N * Type by which software timers are referenced.  For example, a call to
N * xTimerCreate() returns an xTimerHandle variable that can then be used to
N * reference the subject timer in calls to other software timer API functions
N * (for example, xTimerStart(), xTimerReset(), etc.).
N */
Ntypedef void * xTimerHandle;
N
N/* Define the prototype to which timer callback functions must conform. */
Ntypedef void (*tmrTIMER_CALLBACK)( xTimerHandle xTimer );
N
N/**
N * xTimerHandle xTimerCreate( 	const signed char *pcTimerName,
N * 								portTickType xTimerPeriodInTicks,
N * 								unsigned portBASE_TYPE uxAutoReload,
N * 								void * pvTimerID,
N * 								tmrTIMER_CALLBACK pxCallbackFunction );
N *
N * Creates a new software timer instance.  This allocates the storage required
N * by the new timer, initialises the new timers internal state, and returns a
N * handle by which the new timer can be referenced.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the
N * active state.
N *
N * @param pcTimerName A text name that is assigned to the timer.  This is done
N * purely to assist debugging.  The kernel itself only ever references a timer by
N * its handle, and never by its name.
N *
N * @param xTimerPeriodInTicks The timer period.  The time is defined in tick periods so
N * the constant portTICK_RATE_MS can be used to convert a time that has been
N * specified in milliseconds.  For example, if the timer must expire after 100
N * ticks, then xTimerPeriodInTicks should be set to 100.  Alternatively, if the timer
N * must expire after 500ms, then xPeriod can be set to ( 500 / portTICK_RATE_MS )
N * provided configTICK_RATE_HZ is less than or equal to 1000.
N *
N * @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will
N * expire repeatedly with a frequency set by the xTimerPeriodInTicks parameter.  If
N * uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and
N * enter the dormant state after it expires.
N *
N * @param pvTimerID An identifier that is assigned to the timer being created.
N * Typically this would be used in the timer callback function to identify which
N * timer expired when the same callback function is assigned to more than one
N * timer.
N *
N * @param pxCallbackFunction The function to call when the timer expires.
N * Callback functions must have the prototype defined by tmrTIMER_CALLBACK,
N * which is	"void vCallbackFunction( xTimerHandle xTimer );".
N *
N * @return If the timer is successfully create then a handle to the newly
N * created timer is returned.  If the timer cannot be created (because either
N * there is insufficient FreeRTOS heap remaining to allocate the timer
N * structures, or the timer period was set to 0) then 0 is returned.
N *
N * Example usage:
N *
N * #define NUM_TIMERS 5
N *
N * // An array to hold handles to the created timers.
N * xTimerHandle xTimers[ NUM_TIMERS ];
N *
N * // An array to hold a count of the number of times each timer expires.
N * long lExpireCounters[ NUM_TIMERS ] = { 0 };
N *
N * // Define a callback function that will be used by multiple timer instances.
N * // The callback function does nothing but count the number of times the
N * // associated timer expires, and stop the timer once the timer has expired
N * // 10 times.
N * void vTimerCallback( xTimerHandle pxTimer )
N * {
N * long lArrayIndex;
N * const long xMaxExpiryCountBeforeStopping = 10;
N *
N * 	   // Optionally do something if the pxTimer parameter is NULL.
N * 	   configASSERT( pxTimer );
N * 	
N *     // Which timer expired?
N *     lArrayIndex = ( long ) pvTimerGetTimerID( pxTimer );
N *
N *     // Increment the number of times that pxTimer has expired.
N *     lExpireCounters[ lArrayIndex ] += 1;
N *
N *     // If the timer has expired 10 times then stop it from running.
N *     if( lExpireCounters[ lArrayIndex ] == xMaxExpiryCountBeforeStopping )
N *     {
N *         // Do not use a block time if calling a timer API function from a
N *         // timer callback function, as doing so could cause a deadlock!
N *         xTimerStop( pxTimer, 0 );
N *     }
N * }
N *
N * void main( void )
N * {
N * long x;
N *
N *     // Create then start some timers.  Starting the timers before the scheduler
N *     // has been started means the timers will start running immediately that
N *     // the scheduler starts.
N *     for( x = 0; x < NUM_TIMERS; x++ )
N *     {
N *         xTimers[ x ] = xTimerCreate(     "Timer",         // Just a text name, not used by the kernel.
N *                                         ( 100 * x ),     // The timer period in ticks.
N *                                         pdTRUE,         // The timers will auto-reload themselves when they expire.
N *                                         ( void * ) x,     // Assign each timer a unique id equal to its array index.
N *                                         vTimerCallback     // Each timer calls the same callback when it expires.
N *                                     );
N *
N *         if( xTimers[ x ] == NULL )
N *         {
N *             // The timer was not created.
N *         }
N *         else
N *         {
N *             // Start the timer.  No block time is specified, and even if one was
N *             // it would be ignored because the scheduler has not yet been
N *             // started.
N *             if( xTimerStart( xTimers[ x ], 0 ) != pdPASS )
N *             {
N *                 // The timer could not be set into the Active state.
N *             }
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timers running as they have already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N */
NxTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ) PRIVILEGED_FUNCTION;
XxTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks, unsigned long uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ) ;
N
N/**
N * void *pvTimerGetTimerID( xTimerHandle xTimer );
N *
N * Returns the ID assigned to the timer.
N *
N * IDs are assigned to timers using the pvTimerID parameter of the call to
N * xTimerCreated() that was used to create the timer.
N *
N * If the same callback function is assigned to multiple timers then the timer
N * ID can be used within the callback function to identify which timer actually
N * expired.
N *
N * @param xTimer The timer being queried.
N *
N * @return The ID assigned to the timer being queried.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N */
Nvoid *pvTimerGetTimerID( xTimerHandle xTimer ) PRIVILEGED_FUNCTION;
Xvoid *pvTimerGetTimerID( xTimerHandle xTimer ) ;
N
N/**
N * portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer );
N *
N * Queries a timer to see if it is active or dormant.
N *
N * A timer will be dormant if:
N *     1) It has been created but not started, or
N *     2) It is an expired on-shot timer that has not been restarted.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the
N * active state.
N *
N * @param xTimer The timer being queried.
N *
N * @return pdFALSE will be returned if the timer is dormant.  A value other than
N * pdFALSE will be returned if the timer is active.
N *
N * Example usage:
N *
N * // This function assumes xTimer has already been created.
N * void vAFunction( xTimerHandle xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is active, do something.
N *     }
N *     else
N *     {
N *         // xTimer is not active, do something else.
N *     }
N * }
N */
NportBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer ) PRIVILEGED_FUNCTION;
Xlong xTimerIsTimerActive( xTimerHandle xTimer ) ;
N
N/**
N * xTimerGetTimerDaemonTaskHandle() is only available if 
N * INCLUDE_xTimerGetTimerDaemonTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the timer service/daemon task.  It it not valid
N * to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started.
N */
NxTaskHandle xTimerGetTimerDaemonTaskHandle( void );
N
N/**
N * portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStart() starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerStart() has equivalent functionality
N * to the xTimerReset() API function.
N *
N * Starting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerStart() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerStart() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerStart() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStart()
N * to be available.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the start command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStart() was called.  xBlockTime is ignored if xTimerStart() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStart( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStop() stops a timer that was previously started using either of the
N * The xTimerStart(), xTimerReset(), xTimerStartFromISR(), xTimerResetFromISR(),
N * xTimerChangePeriod() or xTimerChangePeriodFromISR() API functions.
N *
N * Stopping a timer ensures the timer is not in the active state.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStop()
N * to be available.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the stop command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStop() was called.  xBlockTime is ignored if xTimerStop() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStop( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerChangePeriod( 	xTimerHandle xTimer,
N *										portTickType xNewPeriod,
N *										portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerChangePeriod() changes the period of a timer that was previously
N * created using the xTimerCreate() API function.
N *
N * xTimerChangePeriod() can be called to change the period of an active or
N * dormant state timer.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerChangePeriod() to be available.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_RATE_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the change period command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerChangePeriod() was called.  xBlockTime is ignored if
N * xTimerChangePeriod() is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the change period command could not be
N * sent to the timer command queue even after xBlockTime ticks had passed.
N * pdPASS will be returned if the command was successfully sent to the timer
N * command queue.  When the command is actually processed will depend on the
N * priority of the timer service/daemon task relative to other tasks in the
N * system.  The timer service/daemon task priority is set by the
N * configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This function assumes xTimer has already been created.  If the timer
N * // referenced by xTimer is already active when it is called, then the timer
N * // is deleted.  If the timer referenced by xTimer is not active when it is
N * // called, then the period of the timer is set to 500ms and the timer is
N * // started.
N * void vAFunction( xTimerHandle xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is already active - delete it.
N *         xTimerDelete( xTimer );
N *     }
N *     else
N *     {
N *         // xTimer is not active, change its period to 500ms.  This will also
N *         // cause the timer to start.  Block for a maximum of 100 ticks if the
N *         // change period command cannot immediately be sent to the timer
N *         // command queue.
N *         if( xTimerChangePeriod( xTimer, 500 / portTICK_RATE_MS, 100 ) == pdPASS )
N *         {
N *             // The command was successfully sent.
N *         }
N *         else
N *         {
N *             // The command could not be sent, even after waiting for 100 ticks
N *             // to pass.  Take appropriate action here.
N *         }
N *     }
N * }
N */
N #define xTimerChangePeriod( xTimer, xNewPeriod, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerDelete() deletes a timer that was previously created using the
N * xTimerCreate() API function.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerDelete() to be available.
N *
N * @param xTimer The handle of the timer being deleted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the delete command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerDelete() was called.  xBlockTime is ignored if xTimerDelete()
N * is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the delete command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerChangePeriod() API function example usage scenario.
N */
N#define xTimerDelete( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * though a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerReset() re-starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerReset() will cause the timer to
N * re-evaluate its expiry time so that it is relative to when xTimerReset() was
N * called.  If the timer was in the dormant state then xTimerReset() has
N * equivalent functionality to the xTimerStart() API function.
N *
N * Resetting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerReset() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerReset() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerReset() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset()
N * to be available.
N *
N * @param xTimer The handle of the timer being reset/started/restarted.
N *
N * @param xBlockTime Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the reset command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerReset() was called.  xBlockTime is ignored if xTimerReset() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue even after xBlockTime ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * // When a key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer.
N *
N * xTimerHandle xBacklightTimer = NULL;
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press event handler.
N * void vKeyPressEventHandler( char cKey )
N * {
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  Wait 10 ticks for the command to be successfully sent
N *     // if it cannot be sent immediately.
N *     vSetBacklightState( BACKLIGHT_ON );
N *     if( xTimerReset( xBacklightTimer, 100 ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N * }
N *
N * void main( void )
N * {
N * long x;
N *
N *     // Create then start the one-shot timer that is responsible for turning
N *     // the back-light off if no keys are pressed within a 5 second period.
N *     xBacklightTimer = xTimerCreate( "BacklightTimer",           // Just a text name, not used by the kernel.
N *                                     ( 5000 / portTICK_RATE_MS), // The timer period in ticks.
N *                                     pdFALSE,                    // The timer is a one-shot timer.
N *                                     0,                          // The id is not used by the callback so can take any value.
N *                                     vBacklightTimerCallback     // The callback function that switches the LCD back-light off.
N *                                   );
N *
N *     if( xBacklightTimer == NULL )
N *     {
N *         // The timer was not created.
N *     }
N *     else
N *     {
N *         // Start the timer.  No block time is specified, and even if one was
N *         // it would be ignored because the scheduler has not yet been
N *         // started.
N *         if( xTimerStart( xBacklightTimer, 0 ) != pdPASS )
N *         {
N *             // The timer could not be set into the Active state.
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timer running as it has already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N */
N#define xTimerReset( xTimer, xBlockTime ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xBlockTime ) )
N
N/**
N * portBASE_TYPE xTimerStartFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStart() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStartFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStartFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStartFromISR() function.  If
N * xTimerStartFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerStartFromISR() is actually called.  The timer service/daemon
N * task priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then restart the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerStartFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The start command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerStartFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerStopFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStop() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStopFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStopFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStopFromISR() function.  If
N * xTimerStopFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the timer should be simply stopped.
N *
N * // The interrupt service routine that stops the timer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - simply stop the timer.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerStopFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The stop command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerStopFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0, ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer,
N *											portTickType xNewPeriod,
N *											portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerChangePeriod() that can be called from an interrupt
N * service routine.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_RATE_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerChangePeriodFromISR() writes a message to the
N * timer command queue, so has the potential to transition the timer service/
N * daemon task out of the Blocked state.  If calling xTimerChangePeriodFromISR()
N * causes the timer service/daemon task to leave the Blocked state, and the
N * timer service/daemon task has a priority equal to or greater than the
N * currently executing task (the task that was interrupted), then
N * *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the
N * xTimerChangePeriodFromISR() function.  If xTimerChangePeriodFromISR() sets
N * this value to pdTRUE then a context switch should be performed before the
N * interrupt exits.
N *
N * @return pdFAIL will be returned if the command to change the timers period
N * could not be sent to the timer command queue.  pdPASS will be returned if the
N * command was successfully sent to the timer command queue.  When the command
N * is actually processed will depend on the priority of the timer service/daemon
N * task relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the period of xTimer should be changed to 500ms.
N *
N * // The interrupt service routine that changes the period of xTimer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - change the period of xTimer to 500ms.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerChangePeriodFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The command to change the timers period was not executed
N *         // successfully.  Take appropriate action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerChangePeriodFromISR( xTimer, xNewPeriod, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * portBASE_TYPE xTimerResetFromISR( 	xTimerHandle xTimer,
N *										portBASE_TYPE *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerReset() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer that is to be started, reset, or
N * restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerResetFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerResetFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerResetFromISR() function.  If
N * xTimerResetFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerResetFromISR() is actually called.  The timer service/daemon
N * task priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N *
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( xTimerHandle pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerResetFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used.
N *     }
N * }
N */
N#define xTimerResetFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/*
N * Functions beyond this part are not part of the public API and are intended
N * for use by the kernel only.
N */
NportBASE_TYPE xTimerCreateTimerTask( void ) PRIVILEGED_FUNCTION;
Xlong xTimerCreateTimerTask( void ) ;
NportBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime ) PRIVILEGED_FUNCTION;
Xlong xTimerGenericCommand( xTimerHandle xTimer, long xCommandID, portTickType xOptionalValue, signed long *pxHigherPriorityTaskWoken, portTickType xBlockTime ) ;
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TIMERS_H */
N
N
N
L 84 "..\free_rtos\timers.c" 2
N
N#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
N
N/* This entire source file will be skipped if the application is not configured
Nto include software timer functionality.  This #if is closed at the very bottom
Nof this file.  If you want to include software timer functionality then ensure
NconfigUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
N#if ( configUSE_TIMERS == 1 )
X#if ( 0 == 1 )
S
S/* Misc definitions. */
S#define tmrNO_DELAY		( portTickType ) 0U
S
S/* The definition of the timers themselves. */
Stypedef struct tmrTimerControl
S{
S	const signed char		*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simply to make debugging easier. */
S	xListItem				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for event management. */
S	portTickType			xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
S	unsigned portBASE_TYPE	uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted once expired.  Set to pdFALSE if the timer is, in effect, a one shot timer. */
S	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified when the same callback is used for multiple timers. */
S	tmrTIMER_CALLBACK		pxCallbackFunction;	/*<< The function that will be called when the timer expires. */
S} xTIMER;
S
S/* The definition of messages that can be sent and received on the timer
Squeue. */
Stypedef struct tmrTimerQueueMessage
S{
S	portBASE_TYPE			xMessageID;			/*<< The command being sent to the timer service task. */
S	portTickType			xMessageValue;		/*<< An optional value used by a subset of commands, for example, when changing the period of a timer. */
S	xTIMER *				pxTimer;			/*<< The timer to which the command will be applied. */
S} xTIMER_MESSAGE;
S
S
S/* The list in which active timers are stored.  Timers are referenced in expire
Stime order, with the nearest expiry time at the front of the list.  Only the
Stimer service task is allowed to access xActiveTimerList. */
SPRIVILEGED_DATA static xList xActiveTimerList1;
SPRIVILEGED_DATA static xList xActiveTimerList2;
SPRIVILEGED_DATA static xList *pxCurrentTimerList;
SPRIVILEGED_DATA static xList *pxOverflowTimerList;
S
S/* A queue that is used to send commands to the timer service task. */
SPRIVILEGED_DATA static xQueueHandle xTimerQueue = NULL;
S
S#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
S
S	PRIVILEGED_DATA static xTaskHandle xTimerTaskHandle = NULL;
S
S#endif
S
S/*-----------------------------------------------------------*/
S
S/*
S * Initialise the infrastructure used by the timer service task if it has not
S * been initialised already.
S */
Sstatic void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
S
S/*
S * The timer service task (daemon).  Timer functionality is controlled by this
S * task.  Other tasks communicate with the timer service task using the
S * xTimerQueue queue.
S */
Sstatic void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
S
S/*
S * Called by the timer service task to interpret and process a command it
S * received on the timer queue.
S */
Sstatic void	prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
S
S/*
S * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
S * depending on if the expire time causes a timer counter overflow.
S */
Sstatic portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime ) PRIVILEGED_FUNCTION;
S
S/*
S * An active timer has reached its expire time.  Reload the timer if it is an
S * auto reload timer, then call its callback.
S */
Sstatic void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow ) PRIVILEGED_FUNCTION;
S
S/*
S * The tick count has overflowed.  Switch the timer lists after ensuring the
S * current timer list does not still reference some timers.
S */
Sstatic void prvSwitchTimerLists( portTickType xLastTime ) PRIVILEGED_FUNCTION;
S
S/*
S * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
S * if a tick count overflow occurred since prvSampleTimeNow() was last called.
S */
Sstatic portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched ) PRIVILEGED_FUNCTION;
S
S/*
S * If the timer list contains any active timers then return the expire time of
S * the timer that will expire first and set *pxListWasEmpty to false.  If the
S * timer list does not contain any timers then return 0 and set *pxListWasEmpty
S * to pdTRUE.
S */
Sstatic portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty ) PRIVILEGED_FUNCTION;
S
S/*
S * If a timer has expired, process it.  Otherwise, block the timer service task
S * until either a timer does expire or a command is received.
S */
Sstatic void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;
S
S/*-----------------------------------------------------------*/
S
SportBASE_TYPE xTimerCreateTimerTask( void )
S{
SportBASE_TYPE xReturn = pdFAIL;
S
S	/* This function is called when the scheduler is started if
S	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
S	timer service task has been created/initialised.  If timers have already
S	been created then the initialisation will already have been performed. */
S	prvCheckForValidListAndQueue();
S
S	if( xTimerQueue != NULL )
S	{
S		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
S		{
S			/* Create the timer task, storing its handle in xTimerTaskHandle so
S			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
S			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
S		}
S		#else
S		{
S			/* Create the timer task without storing its handle. */
S			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
S		}
S		#endif
S	}
S
S	configASSERT( xReturn );
S	return xReturn;
S}
S/*-----------------------------------------------------------*/
S
SxTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
S{
SxTIMER *pxNewTimer;
S
S	/* Allocate the timer structure. */
S	if( xTimerPeriodInTicks == ( portTickType ) 0U )
S	{
S		pxNewTimer = NULL;
S		configASSERT( ( xTimerPeriodInTicks > 0 ) );
S	}
S	else
S	{
S		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
S		if( pxNewTimer != NULL )
S		{
S			/* Ensure the infrastructure used by the timer service task has been
S			created/initialised. */
S			prvCheckForValidListAndQueue();
S
S			/* Initialise the timer structure members using the function parameters. */
S			pxNewTimer->pcTimerName = pcTimerName;
S			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
S			pxNewTimer->uxAutoReload = uxAutoReload;
S			pxNewTimer->pvTimerID = pvTimerID;
S			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
S			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
S
S			traceTIMER_CREATE( pxNewTimer );
S		}
S		else
S		{
S			traceTIMER_CREATE_FAILED();
S		}
S	}
S
S	return ( xTimerHandle ) pxNewTimer;
S}
S/*-----------------------------------------------------------*/
S
SportBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
S{
SportBASE_TYPE xReturn = pdFAIL;
SxTIMER_MESSAGE xMessage;
S
S	/* Send a message to the timer service task to perform a particular action
S	on a particular timer definition. */
S	if( xTimerQueue != NULL )
S	{
S		/* Send a command to the timer service task to start the xTimer timer. */
S		xMessage.xMessageID = xCommandID;
S		xMessage.xMessageValue = xOptionalValue;
S		xMessage.pxTimer = ( xTIMER * ) xTimer;
S
S		if( pxHigherPriorityTaskWoken == NULL )
S		{
S			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
S			{
S				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
S			}
S			else
S			{
S				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
S			}
S		}
S		else
S		{
S			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
S		}
S
S		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
S	}
S
S	return xReturn;
S}
S/*-----------------------------------------------------------*/
S
S#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
S
S	xTaskHandle xTimerGetTimerDaemonTaskHandle( void )
S	{
S		/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
S		started, then xTimerTaskHandle will be NULL. */
S		configASSERT( ( xTimerTaskHandle != NULL ) );
S		return xTimerTaskHandle;
S	}
S
S#endif
S/*-----------------------------------------------------------*/
S
Sstatic void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
S{
SxTIMER *pxTimer;
SportBASE_TYPE xResult;
S
S	/* Remove the timer from the list of active timers.  A check has already
S	been performed to ensure the list is not empty. */
S	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
S	uxListRemove( &( pxTimer->xTimerListItem ) );
S	traceTIMER_EXPIRED( pxTimer );
S
S	/* If the timer is an auto reload timer then calculate the next
S	expiry time and re-insert the timer in the list of active timers. */
S	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
S	{
S		/* This is the only time a timer is inserted into a list using
S		a time relative to anything other than the current time.  It
S		will therefore be inserted into the correct list relative to
S		the time this task thinks it is now, even if a command to
S		switch lists due to a tick count overflow is already waiting in
S		the timer queue. */
S		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
S		{
S			/* The timer expired before it was added to the active timer
S			list.  Reload it now.  */
S			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
S			configASSERT( xResult );
S			( void ) xResult;
S		}
S	}
S
S	/* Call the timer callback. */
S	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
S}
S/*-----------------------------------------------------------*/
S
Sstatic void prvTimerTask( void *pvParameters )
S{
SportTickType xNextExpireTime;
SportBASE_TYPE xListWasEmpty;
S
S	/* Just to avoid compiler warnings. */
S	( void ) pvParameters;
S
S	for( ;; )
S	{
S		/* Query the timers list to see if it contains any timers, and if so,
S		obtain the time at which the next timer will expire. */
S		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
S
S		/* If a timer has expired, process it.  Otherwise, block this task
S		until either a timer does expire, or a command is received. */
S		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
S
S		/* Empty the command queue. */
S		prvProcessReceivedCommands();
S	}
S}
S/*-----------------------------------------------------------*/
S
Sstatic void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
S{
SportTickType xTimeNow;
SportBASE_TYPE xTimerListsWereSwitched;
S
S	vTaskSuspendAll();
S	{
S		/* Obtain the time now to make an assessment as to whether the timer
S		has expired or not.  If obtaining the time causes the lists to switch
S		then don't process this timer as any timers that remained in the list
S		when the lists were switched will have been processed within the
S		prvSampelTimeNow() function. */
S		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
S		if( xTimerListsWereSwitched == pdFALSE )
S		{
S			/* The tick count has not overflowed, has the timer expired? */
S			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
S			{
S				xTaskResumeAll();
S				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
S			}
S			else
S			{
S				/* The tick count has not overflowed, and the next expire
S				time has not been reached yet.  This task should therefore
S				block to wait for the next expire time or a command to be
S				received - whichever comes first.  The following line cannot
S				be reached unless xNextExpireTime > xTimeNow, except in the
S				case when the current timer list is empty. */
S				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
S
S				if( xTaskResumeAll() == pdFALSE )
S				{
S					/* Yield to wait for either a command to arrive, or the block time
S					to expire.  If a command arrived between the critical section being
S					exited and this yield then the yield will not cause the task
S					to block. */
S					portYIELD_WITHIN_API();
S				}
S			}
S		}
S		else
S		{
S			xTaskResumeAll();
S		}
S	}
S}
S/*-----------------------------------------------------------*/
S
Sstatic portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
S{
SportTickType xNextExpireTime;
S
S	/* Timers are listed in expiry time order, with the head of the list
S	referencing the task that will expire first.  Obtain the time at which
S	the timer with the nearest expiry time will expire.  If there are no
S	active timers then just set the next expire time to 0.  That will cause
S	this task to unblock when the tick count overflows, at which point the
S	timer lists will be switched and the next expiry time can be
S	re-assessed.  */
S	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
S	if( *pxListWasEmpty == pdFALSE )
S	{
S		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
S	}
S	else
S	{
S		/* Ensure the task unblocks when the tick count rolls over. */
S		xNextExpireTime = ( portTickType ) 0U;
S	}
S
S	return xNextExpireTime;
S}
S/*-----------------------------------------------------------*/
S
Sstatic portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
S{
SportTickType xTimeNow;
SPRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;
S
S	xTimeNow = xTaskGetTickCount();
S
S	if( xTimeNow < xLastTime )
S	{
S		prvSwitchTimerLists( xLastTime );
S		*pxTimerListsWereSwitched = pdTRUE;
S	}
S	else
S	{
S		*pxTimerListsWereSwitched = pdFALSE;
S	}
S
S	xLastTime = xTimeNow;
S
S	return xTimeNow;
S}
S/*-----------------------------------------------------------*/
S
Sstatic portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
S{
SportBASE_TYPE xProcessTimerNow = pdFALSE;
S
S	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
S	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
S
S	if( xNextExpiryTime <= xTimeNow )
S	{
S		/* Has the expiry time elapsed between the command to start/reset a
S		timer was issued, and the time the command was processed? */
S		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
S		{
S			/* The time between a command being issued and the command being
S			processed actually exceeds the timers period.  */
S			xProcessTimerNow = pdTRUE;
S		}
S		else
S		{
S			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
S		}
S	}
S	else
S	{
S		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
S		{
S			/* If, since the command was issued, the tick count has overflowed
S			but the expiry time has not, then the timer must have already passed
S			its expiry time and should be processed immediately. */
S			xProcessTimerNow = pdTRUE;
S		}
S		else
S		{
S			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
S		}
S	}
S
S	return xProcessTimerNow;
S}
S/*-----------------------------------------------------------*/
S
Sstatic void	prvProcessReceivedCommands( void )
S{
SxTIMER_MESSAGE xMessage;
SxTIMER *pxTimer;
SportBASE_TYPE xTimerListsWereSwitched, xResult;
SportTickType xTimeNow;
S
S	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
S	{
S		pxTimer = xMessage.pxTimer;
S
S		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
S		{
S			/* The timer is in a list, remove it. */
S			uxListRemove( &( pxTimer->xTimerListItem ) );
S		}
S
S		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
S
S		/* In this case the xTimerListsWereSwitched parameter is not used, but 
S		it must be present in the function call.  prvSampleTimeNow() must be 
S		called after the message is received from xTimerQueue so there is no 
S		possibility of a higher priority task adding a message to the message
S		queue with a time that is ahead of the timer daemon task (because it
S		pre-empted the timer daemon task after the xTimeNow value was set). */
S		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
S
S		switch( xMessage.xMessageID )
S		{
S			case tmrCOMMAND_START :
S				/* Start or restart a timer. */
S				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
S				{
S					/* The timer expired before it was added to the active timer
S					list.  Process it now. */
S					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
S
S					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
S					{
S						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
S						configASSERT( xResult );
S						( void ) xResult;
S					}
S				}
S				break;
S
S			case tmrCOMMAND_STOP :
S				/* The timer has already been removed from the active list.
S				There is nothing to do here. */
S				break;
S
S			case tmrCOMMAND_CHANGE_PERIOD :
S				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
S				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
S				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
S				break;
S
S			case tmrCOMMAND_DELETE :
S				/* The timer has already been removed from the active list,
S				just free up the memory. */
S				vPortFree( pxTimer );
S				break;
S
S			default	:
S				/* Don't expect to get here. */
S				break;
S		}
S	}
S}
S/*-----------------------------------------------------------*/
S
Sstatic void prvSwitchTimerLists( portTickType xLastTime )
S{
SportTickType xNextExpireTime, xReloadTime;
SxList *pxTemp;
SxTIMER *pxTimer;
SportBASE_TYPE xResult;
S
S	/* Remove compiler warnings if configASSERT() is not defined. */
S	( void ) xLastTime;
S
S	/* The tick count has overflowed.  The timer lists must be switched.
S	If there are any timers still referenced from the current timer list
S	then they must have expired and should be processed before the lists
S	are switched. */
S	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
S	{
S		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
S
S		/* Remove the timer from the list. */
S		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
S		uxListRemove( &( pxTimer->xTimerListItem ) );
S
S		/* Execute its callback, then send a command to restart the timer if
S		it is an auto-reload timer.  It cannot be restarted here as the lists
S		have not yet been switched. */
S		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
S
S		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
S		{
S			/* Calculate the reload value, and if the reload value results in
S			the timer going into the same timer list then it has already expired
S			and the timer should be re-inserted into the current list so it is
S			processed again within this loop.  Otherwise a command should be sent
S			to restart the timer to ensure it is only inserted into a list after
S			the lists have been swapped. */
S			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
S			if( xReloadTime > xNextExpireTime )
S			{
S				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
S				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
S				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
S			}
S			else
S			{
S				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
S				configASSERT( xResult );
S				( void ) xResult;
S			}
S		}
S	}
S
S	pxTemp = pxCurrentTimerList;
S	pxCurrentTimerList = pxOverflowTimerList;
S	pxOverflowTimerList = pxTemp;
S}
S/*-----------------------------------------------------------*/
S
Sstatic void prvCheckForValidListAndQueue( void )
S{
S	/* Check that the list from which active timers are referenced, and the
S	queue used to communicate with the timer service, have been
S	initialised. */
S	taskENTER_CRITICAL();
S	{
S		if( xTimerQueue == NULL )
S		{
S			vListInitialise( &xActiveTimerList1 );
S			vListInitialise( &xActiveTimerList2 );
S			pxCurrentTimerList = &xActiveTimerList1;
S			pxOverflowTimerList = &xActiveTimerList2;
S			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
S		}
S	}
S	taskEXIT_CRITICAL();
S}
S/*-----------------------------------------------------------*/
S
SportBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
S{
SportBASE_TYPE xTimerIsInActiveList;
SxTIMER *pxTimer = ( xTIMER * ) xTimer;
S
S	/* Is the timer in the list of active timers? */
S	taskENTER_CRITICAL();
S	{
S		/* Checking to see if it is in the NULL list in effect checks to see if
S		it is referenced from either the current or the overflow timer lists in
S		one go, but the logic has to be reversed, hence the '!'. */
S		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
S	}
S	taskEXIT_CRITICAL();
S
S	return xTimerIsInActiveList;
S}
S/*-----------------------------------------------------------*/
S
Svoid *pvTimerGetTimerID( xTimerHandle xTimer )
S{
SxTIMER *pxTimer = ( xTIMER * ) xTimer;
S
S	return pxTimer->pvTimerID;
S}
S/*-----------------------------------------------------------*/
S
S/* This entire source file will be skipped if the application is not configured
Sto include software timer functionality.  If you want to include software timer
Sfunctionality then ensure configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
N#endif /* configUSE_TIMERS == 1 */
N
N
N
